!-----------------------------------------------------------------------
! cesarrr<Reporte|Proceso>: CK_COLC1.SQR - <Interface  - Clientes Colombiana >
! Versiones: V<001> <11/10/2000>-<NL>
!-----------------------------------------------------------------------
! Desc Programa: Esta interfaze se encarga de crear los clientes que fue-
!                ron incluidos en Colombiana de Comercio.
!-----------------------------------------------------------------------
! Parámetros: El parámetro de entrada es el Setid 
!
!------------------------------------------------------------------------
! Tablas referenciadas:CUSTOMER
!                      CUST_ADDR_SEQ
!                      CUST_ADDRESS
!                      LC_CUSTOMER_ID
!                      CUST_REGN_TYPE
!                      CUST_TEAM
!***************************************************************************************************************************************************************!
! Modificaciones							                       		       							!
!---------------------------------------------------------------------------------------------------------------------------------------------------------------!
! Proyecto			Ref	 	Fecha		Desarrollador	Descripcion									!
!---------------------------------------------------------------------------------------------------------------------------------------------------------------!
!6899				001		04/02/2011	MV		Actualiza los datos del cliente en la página de contactos.			!
!6899				002		07/02/2011	MV		Ingresa el dato del comprador.							!
!6899				003		07/02/2011	MV		Ingresa el grupo de clientes.							!
!6899				004		17/02/2011	MV		Se cambia de posición la validación de la dirección para que la valide 		!
!										después de ser georeferenciada.							!
!6996				005		04/03/2011	MV		Cuando el barrio no es georeferenciado, inserta un mensaje informando 		!
! 										que el cliente se creo pero la direccion no fue ubicada.			!
!										Se excluye de la macro la fecha de creación del cliente, el sistema 		!
!										ingresa de manera automática la fecha del dia en que se ejecuta el 		!
!										proceso. Estos clientes quedan en la auditoria de clientes nuevos.		!
!7373				006		18/05/2011	CER		Modificacion para que tome el grupo de cliente  				!
!										relacionado al canal								!
!CS7585				007	 	27-07-2011	CER		Ajuste para que el envio de datos del cliente se realice 			!
!										con la partición de nombres y apellidos que esta operando para terceros		!
!8739				008		02/04/2012	FSB		Se crea nueva dirección para Cartera						!
!8732       			009     	24/05/2012  	FMJ     	Control de terceros                             				!
!9020				010		19/06/2012	FSB		Se incluye un archivo csv de salida con los errores que se produzcan 		!
!										con las direcciones en la creación del cliente.					!
!8026       			011     	26/06/2012  	FMJ     	Incluye correo y tarjeta                        				!
!9771				012		14/03/2013	CHM		Se cambia de posición el registro de tercero para que este solo se haga 	!
!										cuando se inserten los datos de un cliente (cuando la dirección)		!
!										no existe       								!
!9771				013		30/04/2013	NJ		1.Se debe crear el cliente solo cuando no tiene dirección repetida o 		!
!										  cuando se permite duplicado							!
!										2.Se debe crear la clave contable tercero cuando se crea el cliente		!
!10149      			014		11/07/2013	NJ		No se debe crear clientes que tenga caracteres especiales en el NIT		!
!10200      			015		09/08/2013	FMJ		Incidencias relacionadas con terceros           				!
!10349      			016		02/10/2013	EHA		Incidencias relacionadas con tipopersona=o      				!
!10422	  			017		12/11/2013  	MTC     	Se incluye Parametrización de IpoNacional Client				!
!10854				019		28/07/2014  	CCG     	Si el barrio esta vacio, se asigna 88888        				!
!10978				020		12/08/2014  	CCG     	Adicion del concepto PRC en la tabla  PS_CUST_REGN_TYPE				!
!10978				021		12/08/2014  	CCG     	Verificacion lista Clinton							!
!11245      			022     	25/08/2014  	LFM     	La validación de duplicidad en direcciones únicamente se realice 		!
!										para el SETID  DISTR. 								!
!11384      			023     	22/01/2015  	CCG     	Validacion estado-ciudad							!
!11885				025		04/08/2015	GMC		Se coloca el % de tolerancia a 10               				!
!12557				026		03/06/2016	CCG		Modificacion para que ahora no vaya a la CK_ADDRESS_GEO sino a la 		!
!										PS_CK_ADDR_GEOREFE       							!
!12557				027 		29/06/2016	CCG		Si la direccion alterna es 'NO CAMBIO' se deja en cero               		!
!12888				028		29/08/2016	YSN		Se incluye la marcación del Flag Dirección Cartera 				!
!12557				029 		25/04/2017	CCG		Se comenta para que no inserte en la CUST_ADDRESS              			!
!13543				030 		23/08/2017	LFQ		Activa el flag cliente internet cuando el setid es DISTR.              		!
!13611				031 		25/09/2017	GMR		Si el tipo de identificacion es (P)asaporte se omite la validacion 		!
!										de caracteres en el NIT								!
!13676				032     	09/11/2017  	GMR     	Se agrega validacion del CUST_ID referenciado con el Tipo de Documento 		!
!14275          		033             03/12/2018      JCCB            Se elimana la tolerancia para carga masiva debe ser 0			    	!
!CK_CS_4499_SPRINT_32_FE_E_FMB	034		11/06/2019	FMB		Se agrega el campo Código Postal en Georreferenciación.			    	!
!CK_CS_6563_SPRINT_6_FMB	035		03/10/2019	FMB		Se agregan los campos Tipo de Responsabilidad y Tipo de Régimen del Cliente 	!
!CK_CS_6563_SPRINT_18_LFQ   036     28/09/2020  LFQ     Se agregan y validan los campos asociados a FAELE, Marcación FE, EmailFE,Contacto, Régimen y responsabilidad   !
!16003                          038		04/10/2021      NJ		Adicion de logica para insertar en tablas de Terceros y de Repositorio          !	
!									        Se cambia la constante 'AR' por la variable $modOrig				!
!16262              039         20/04/2022      JAS         Creación de terceros y repositorio de terceros      !
!16587             	040     	24/06/2022      GMR      Validar Primer Nombre, Primer Apellido, NO INSERTAR TERCEROS  , VALIDA DIGITO DE VERIFICACION     !
!16587              041    		03/08/2022      GMR      Se suprimen espacios en blancos de la lectura del nombre del archivo              !
!***************************************************************************************************************************************************************!

 
! Realiza los include necesarios
#include 'setenv.sqc'           ! Incializa el entorno
#Include 'setup01.sqc'  	! Printer and page-size initialization

begin-report
  do Init-DateTime
  do Init-Number
  do Init-Report
  do Process-Main
  do Terminate
  if $estado_final = 'error'       
     do actualizar-requerimiento
  end-if
  
end-report

begin-heading 6
  !#Include 'stdhdgint01.sqc'
end-heading

begin-procedure Init-Report
  move 'Interf_Clientes' to $ReportTitle
  !*** Inicio 010
  move 'CKCLINUE' to $ReportID
  !*** Fin 010
  display $ReportTitle

  Do Define-Prcs-Vars
  Do Get-Run-Control-Parms

  if $prcs_process_instance = ''
  else
    Do Select-Parameters
  end-if
end-procedure

!-----------------------------------------------------------------------
! Ingreso de parámetros desde el panel correspondiente => CK_INTCLI_PNL
!-----------------------------------------------------------------------
begin-procedure Select-Parameters
begin-select on-error=sql-error
run_cntl_in.oprid
run_cntl_in.language_cd
run_cntl_in.file_name
run_cntl_in.business_unit
run_cntl_in.wip_loc_flg
B.RECURNAME               &REPETICION
run_cntl_in.run_cntl_id   &run_cntrl
INSTR(run_cntl_in.file_name,'YYYYMMDD')   &FECHA_VAR
SUBSTR(TO_CHAR(SYSDATE,'YYYY-MM-DD'),1,4) || SUBSTR(TO_CHAR(SYSDATE,'YYYY-MM-DD'),6,2) || SUBSTR(TO_CHAR(SYSDATE,'YYYY-MM-DD'),9,2) &FECHAHOY 

    let $oprid	      = &run_cntl_in.oprid
    let $lenguaje     = &run_cntl_in.language_cd
    if &FECHA_VAR <> 0 and &REPETICION = &run_cntrl
       do gen-namefile
       show ' &nomfile  ' &nomfile       
       let $file_name   = &nomfile      
    else
       let $file_name = rtrim(&run_cntl_in.file_name,' ')    
    end-if

from ps_run_cntl_in run_cntl_in, PSPRCSRQST B
where run_cntl_in.oprid       = $prcs_oprid
  and run_cntl_in.run_cntl_id = $prcs_run_cntl_id
  AND run_cntl_in.oprid     = B.OPRID
  AND B.RUNCNTLID = run_cntl_in.run_cntl_id
  AND B.PRCSINSTANCE = #prcs_process_instance   
end-select

begin-select
A.URL

   let $nomfile = &A.URL

FROM PSURLDEFNLANG A, PSOPRDEFN B
WHERE A.URL_ID = 'CK_AR_INF_READ'
  AND A.LANGUAGE_CD = B.LANGUAGE_CD
  AND B.OPRID       = $prcs_oprid
end-select

IF ISBLANK($nomfile)
show ' no encontro el anterior URL'
begin-select
C.URL

   let $nomfile = &C.URL
   show ' $nomfile ' $nomfile

FROM PSURLDEFN C
WHERE C.URL_ID = 'CK_AR_INF_READ'
end-select
END-IF
end-procedure Select-Parameters


!***********************************************************************
!----------------------------------------------------------------------!
! Procedure: gen-namefile                                              !
! Descr:     Se arma el nombre del archivo con la fecha variable       !
!----------------------------------------------------------------------!
begin-procedure gen-namefile    
begin-select ON-ERROR = SQL-error
REPLACE(&run_cntl_in.file_name,'YYYYMMDD',&FECHAHOY)  &nomfile
FROM ps_run_cntl_in run_cntl_in
where run_cntl_in.oprid       = $prcs_oprid
  and run_cntl_in.run_cntl_id = $prcs_run_cntl_id
end-select
end-procedure

!-----------------------------------------------------------------------
! Proceso del programa
!-----------------------------------------------------------------------
begin-procedure PROCESS-MAIN
  !Inicio 026 
  do ObtenerInstanciaGeo
  !Fin 026 
  Let #Enc_Arc_Pla   = 0
  do OPEN-ARCHIVO
 
  !*** Inicio 010
  do Abrir_Archivo_Errores
  !*** Fin 010
  let $Prcs_Instance = $prcs_process_instance
  let #Secuencia     = 0
  let #message_seq   = 0
  
  let $JobId         = ' '
  let $NomPrograma   = 'CKCLINUE'
  if #Enc_Arc_Pla    = 0
     do PROCESAR-ARCHIVO
  end-if   
  !do GRABAR-ARCHIVO-CONTROL
  close 1	
  !*** Inicio 010
  close 2
  !*** Fin 010
end-procedure PROCESS-MAIN

!-----------------------------------------------------------------------
! Lectura del archivo plano correspondiente
!-----------------------------------------------------------------------
begin-procedure OPEN-ARCHIVO
   let $lenguaje  = 'ESP'
   !let $nomfile='P:\Temporal\Datos Diarios Cartera\' || $file_name
   !let $nomfile='/data/work/people/input/' || $file_name
   let $nomfile = $nomfile || $file_name
   show  ' $file_name ' $file_name
   show  ' $nomfile   ' $nomfile
   let #numfile=1
   open $nomfile as #numfile
   for-reading
   record=610:vary

!fin 011
   ! Fin 005 - MV - 07/03/2011
   STATUS=#open-status
   if #open-status=-1
      Let #Enc_Arc_Pla = 1
      DISPLAY 'NO PUDO ABRIR EL ARCHIVO'
      stop quiet
   end-if
end-procedure OPEN-ARCHIVO

!*** Inicio 010
!-----------------------------------------------------------------------
! Abrir_Archivo_Errores
!-----------------------------------------------------------------------
begin-procedure Abrir_Archivo_Errores

   let $Sep_Cam_Pla = ';'

begin-SELECT On-Error=SQL-Error
C2.URL
        
   let $nomfile2= &C2.URL
   show ' $nomfile2 quedo en ' $nomfile2
        
FROM PSURLDEFN C2
WHERE C2.URL_ID = 'ARCHIVOS_AR_GENERADOS' 
end-select

   let $Mod         = 'CKCLINUE_Errores_'
   let $Instancia   = $prcs_process_instance
   let $Punto       = '.'
   let $Sucur       = 'csv'
   let $file_name2   = $Mod || $Instancia || $Punto || $Sucur
   let $nomfile2    = $nomfile2 || $ReportID || '_' || $prcs_process_instance || '/' || $file_name2
 
   show '$nomfile2: ' $nomfile2

   
   open $nomfile2 as 2 for-writing record=250:vary status=#filestat

   if #filestat = 0
         show 'Error crear archivo plano '
         let $error_lit = $xv_error_open_file||' '
   end-if

#IFNDEF DEBUGD 

   Display 'Abrir_Archivo_Errores'
   Show 'Error:' $error_lit

#END-IF
   
end-procedure Abrir_Archivo_Errores
!*** Fin 010

!-----------------------------------------------------------------------
! Proceso del archivo, lectura y desarrollo de rutinas en las que se 
! insertan los datos en las respectivas tablas.
!-----------------------------------------------------------------------
begin-procedure PROCESAR-ARCHIVO
let #tot-rows    = 0
let #cnt-rows    = 0
let #no-tot-rows = 0
let #tot_leido   = 0
let #cnt_error   = 0
let #sw_descuadre   = 0
let $estado_final   = ' '
Let $Ck_Address1geo = ' '
Let $Ck_Address2geo = ' '
Let $Ck_Barrio      = ' '
let $Address2       = ' '

let #RowFile 	= 0

while #open-status <> -1

	read 1 into  	$Setid:5			 
			$Cust_id:15			 
			$Tipo_ident:1			 
			$Cust_status:1		 
			$Canal:1	
			$Name1:40			 
			$Name_Short:10		 
			$Subcust_qual1:6		 
			$address_seq_num:3		 
			$State:6			 
			$City:30			 
			$County:30			 
			$Address1:35			 
			$Phone:24			 
			$Fax:24			 
			$Cr_analyst:8			 	
			$Bill_specialist:8		 
			$Ind_Dir_Des:1
			$FechaActivacion:8
			$Ind_Med_Com:1
			$pymt_terms_cd:5
			$payment_method:3
			$cupo:26
			$busUnit:5
			$Ruta:6
			$SecVisita:15
                        $CorreoN:50
                        $TarjetaN:20

            $Str_Custo_Fact_Elect:3
            $Str_Emailid:70
            $Str_Regimen:10
            $Str_Responsabilidad:100
            $Str_Contact_Name:40

        Let $Str_Custo_Fact_Elect = LTrim($Str_Custo_Fact_Elect,' ')
        Let $Str_Emailid = LTrim($Str_Emailid,' ')
        Let $Str_Regimen = LTrim($Str_Regimen,' ')
        Let $Str_Responsabilidad = LTrim($Str_Responsabilidad,' ')
        Let $Str_Contact_Name = LTrim($Str_Contact_Name,' ')

	
	Let $DigitoVerificacion = ' '
	Let $PrimerNombre = ' '
	Let $SegundoNombre = ' '
	Let $PrimerApellido = ' '
	Let $SegundoApellido = ' '
	Let $Nombre1 = ' '
	Let $Nombre2 = ' '
	! Por defecto asigna tipo de persona Natural
	Let $TipoPersona = 'N'
	! Si el tipo de documento es NIT obtiene el digito de verificacion y el nombre 1
	
    Let $Cust_id = LTrim($Cust_id,' ')
	Let $Cust_id = RTrim($Cust_id,' ')

begin-select ON-ERROR=SQL-ERROR
SETIDAAAA.SETID

  let $setIdTercero = &SETIDAAAA.SETID

FROM PS_SET_CNTRL_REC SETIDAAAA
WHERE SETIDAAAA.RECNAME = 'LC_RPOS_TERC_HD'
  AND SETIDAAAA.SETCNTRLVALUE = $Setid
End-Select

	
        ! Si existe el tercero para este cliente entonces trae el id del tercero de lo contrario establecer el Id de tercero que debe quedar.
        !Inicio 038
        Let $modOrig ='AR'
        let $quote = chr(39)
        let $WhereSetid1 = ' AND TL.SETID_CUSTOMER = ' ||$quote||$Setid||$quote
	let $WhereSetid1 = $WhereSetid1 || ' AND TL.CUST_ID = ' ||$quote||$IdTercero||$quote   
        Do ExisteTerceroLinea($setIdTercero, $Setid, $Cust_id, $modOrig, $Tipo_ident, $ExisteTerceroLinea, $IdTercero, $ckCodOrigen, $WhereSetid1)
        !Fin 038
        
        ! Verifica si el tipo de identificaciòn requiere digito de verificaciòn en cuyo caso lo quita del nit
        DO reqDigitoVerificacion($Tipo_ident, $RequiereDigito)
  
        If $RequiereDigito = 'Y'  
           let #lengthNit = length($Cust_id)
           let $DigitoVerificacion = substr($Cust_id, #lengthNit,  1 )
        Else
          let $DigitoVerificacion = ' '
        End-If
	
	Do EncontrarTipoPersona($Tipo_ident, $TipoPersona)

	!Inicio 041 Suprime los 2 espacios en blanco por solo 1, del nombre leido
    let  $Name1 = replace($Name1, '  ', ' ')
    let  $Name1 = replace($Name1, '  ', ' ')
	!Fin 041 Suprime los 2 espacios en blanco por solo 1, del nombre leido

	If $TipoPersona = 'J'
		Let $Nombre1 = $Name1
	Else
	        Unstring $Name1 By ' ' Into $PrimerApellido $SegundoApellido $PrimerNombre $SegundoNombre $CVar1 $CVar2 $CVar3 $CVar4
		Let $SegundoNombre = $SegundoNombre || $CVar1 || $CVar2 || $CVar3 || $CVar4		
		If isblank($PrimerNombre) 		
		   let $PrimerNombre = $SegundoApellido 
		   let $SegundoApellido = ' '		
		End-if	
	End-if



	Show '$DigitoVerificacion ' $DigitoVerificacion
	Show '$$IdTercero ' $IdTercero

	! Inicio 026
	! Se blanquean estas variables porque se estaban llevando el valor para las nuevas lineas insertadas.
	let $Address2 = ' '
	let $barrio =  ' '
	! Fin 026

	If $PrimerApellido = '' 
		Let $PrimerApellido = ' '
	End-if
	If $SegundoApellido = ''
		Let $SegundoApellido = ' '
	End-if
	If $PrimerNombre = ''
		Let $PrimerNombre = ' '
	End-if
	If $SegundoNombre = ''
		Let $SegundoNombre = ' '
	End-if
	
	!<Fin 007>
	
         			        
	! Inicio 005 - MV - 07/03/2011      
	let $Cust_status_dt = edit($current-date, 'DD-MM-YYYY')
	let $barrio = $County
	! Fin 005 - MV - 07/03/2011

	show ' $Setid:5 ' $Setid
	show ' $Cust_id:15 ' $Cust_id
	show ' $Tipo_ident:1 ' $Tipo_ident
	show ' $Cust_status:1 ' $Cust_status
	show ' $Canal:1 ' $Canal
	show ' $Cust_status_dt:10 ' $Cust_status_dt
	show ' $Name1:40 ' $Name1
	show ' $Name_Short:10 ' $Name_Short
	show ' $Subcust_qual1:6 ' $Subcust_qual1
	show ' $address_seq_num:3 ' $address_seq_num
	show ' $State:6 ' $State
	show ' $City:30 ' $City
	show ' $County:30 ' $County
	show ' $Address1:35 ' $Address1
	show ' $Phone:24 ' $Phone
	show ' $Fax:24 ' $Fax
	show ' $Cr_analyst:8 ' $Cr_analyst
	show ' $Bill_specialist:8 ' $Bill_specialist
	show ' $Ind_Dir_Des:1 ' $Ind_Dir_Des
	show ' $FechaActivacion:8 ' $FechaActivacion
	show ' $Ind_Med_Com:1 ' $Ind_Med_Com
	show ' $pymt_terms_cd:5 ' $pymt_terms_cd 
	show ' $payment_method:3 ' $payment_method
	show ' $cupo:26 ' $cupo 
	show ' $busUnit:5 ' $busUnit
	show ' $Ruta:6 ' $Ruta
	show ' $SecVisita:15 ' $SecVisita

        show ' $CorreoN:50   ' $CorreoN
        show ' $TarjetaN:20  ' $TarjetaN

	
	show ' $setid inicial ' $Setid
	SHOW ' $cust_id      ' $cust_id

	SHOW ' $Ind_Dir_Des: ' $Ind_Dir_Des
	show ' $Address1     ' $Address1

        Let $country = 'COL'

        Let $NoGraba = 'N'


	if #end-file
		break
	else
		if $Setid <> 'TOTAL'
			let #dtu_yr = to_number(substr($Cust_status_dt, 7, 4))
			let #dtu_mo = to_number(substr($Cust_status_dt, 4, 2))
			let #dtu_da = to_number(substr($Cust_status_dt, 1, 2)) 

			do dtu-format-date(#dtu_yr, #dtu_mo, #dtu_da, $dtu_fecha)
			do Convert-From-DTU-Date($dtu_fecha, $fecha_out)
			let $fecha_out = upper($fecha_out)

			let  $address_seq_num  =  ltrim($address_seq_num,'0')
			move $address_seq_num  to $add_seq_num 999
			let  #Seq_Dir_Cli      =  $add_seq_num

			show '$state     ' $state
			show 'fecha plano' $fecha_out

			if $setid = 'TOTAL'
				let #tot_leido = to_number($Cust_id)
				let $unidad    = $name1
				DO GRABAR-ARCHIVO-CONTROL
				let #tot-rows    = 0
				let #cnt-rows    = 0
				let #no-tot-rows = 0
				let #tot_leido   = 0
				let #cnt_error   = 0
			else
				let #tot-rows = #tot-rows + 1
				do  VERIFICAR-EXIST-CLIENTE
				let #RowFile = #RowFile + 1
				do  VERIFICAR-ERRORES-CLIENTE

				! Inicio 021
				LET $clinton =' '
				do VERIFICAR-LISTA-CLINTON
				if $clinton = 'Y'
					let $Ck_Observaciones = 'Cliente en lista Clinton'
					!Inicio 040 Se envia  para que no grabe 
					Let $NoGraba = 'Y'
					!Fin 040					
					do Escribir_Plano
				end-if
				! Fin 021

				! Inicio 023
				LET $estadoValido ='N'
				do VERIFICAR-CIUDAD-DPTO
				if $estadoValido <> 'Y'
					show 'Error cc Ciudad no corresponde a estado  ' $cust_id
					let $Ck_Observaciones = 'Ciudad no corresponde a estado'
					Let $NoGraba = 'Y'
					do Escribir_Plano
				end-if

				If $ErrorClient <> 'Y'
				  do VALIDAR-CODIGO-CLIENTE
				end-if

				If $ErrorClient <> 'Y' and $clinton <> 'Y' and $estadoValido = 'Y'

				  Let $modOrig ='AR'
				  Do InsertaDatosTercerosMediosMagneticos	

				  Let $modOrig ='GL' 
				  Do InsertaDatosTercerosMediosMagneticos


				  Do Buscar-Existe-Cliente-Tercero

				  let $effDt = ''

				  If #Exi_Cli_Ter_Psl = 0        
					Do Insertar-Cliente-Tercero   
					else
					Do Actualizar-Indicar-Rut   
				  end-if

				  Do existeNombreTercero($setidTercero, $Cust_id, $fecha_out, $existe)
				  If $TipoPersona = 'N'
					Let $nameTerc = ' '
				  Else
					Let $nameTerc = $Name1
				  End-If
				  If $existe = 'Y'
					Do ActualizarNombreTercero($setidTercero, $Cust_id, $fecha_out, $nameTerc, $primerApellido, $segundoApellido, $primerNombre, $segundoNombre )
				  Else
					Do Insertar-Nombre-Tercero($setidTercero, $Cust_id, $fecha_out, $nameTerc, $primerApellido, $segundoApellido, $primerNombre, $segundoNombre )
				  End-If

				  Do existeDireccionTercero($setidTercero, $Cust_id, $fecha_out, $existe)
				  If $existe = 'Y'
					Do ActualizarDireccionTercero( $setidTercero, $Cust_id, $fecha_out, $address1, $address2, $phone, $country, $state, $city  )
				  Else
					  Do InsertarDireccionTercero($setidTercero, $Cust_id, $fecha_out, $address1, $address2, $phone, $country, $state, $city )
				  End-If 

					if  $INDCLI = 'Y' 
						
						let #Secuencia    = #Secuencia + 1
						let #message_seq  = #message_seq + 1   
						let #NbrSet       = 21000
						let #Nbr          = 33
						Do  Insertar_Mensaje

						let #ParamSecuencia = 1
						let $Parametro      = $cust_id
						Do Insertar_Parametro_mensaje

						let #sw_descuadre   = 1

					else

						do VERIFICAR-DATOS-CLIENTES
						show  ' $ind_zona  ' $ind_zona
						show  ' $ind_state ' $ind_state
						show  ' $ind_county' $ind_county
						show  ' $ind_barrio' $ind_barrio

						! Inicio 005 - MV - 04/03/2011
						!if $ind_zona   = 'N' or $ind_state  = 'N' or $ind_city = 'N' or $ind_county = 'N' or $ind_barrio = 'N'
						if $ind_zona   = 'N' or $ind_state  = 'N' or $ind_city = 'N' or $Val_Descripcion <> ''
						! Fin 005 - MV - 04/03/2011
							show '* * Cliente No fue Creado en Ps * *' $Cust_id
							
							!Inicio 039
						    if $ind_zona   = 'N' 
							 show 'La zona no corresponde al setid'
						    end-if
						   
						    if $ind_state   = 'N' 
							 show 'Departamento no corresponde a país'
						    end-if
						   
						    if $ind_city   = 'N' 
							 show 'Municipio no existe'
						    end-if
						   
						    !Fin 039
							
							let #cnt_error = #cnt_error + 1
							!*** Inicio 010
							let $Ck_Observaciones = 'Cliente No fue Creado en PS'

							!Inicio 040 Se envia  para que no grabe 
							Let $NoGraba = 'Y'
							!Fin 040
							
							do Escribir_Plano
							!*** Fin 010
						else 
						let #cnt-rows = #cnt-rows + 1
							Do Valida-Municipio-Existe

							if #find-geocity = 1 and $Canal <> '0' 

								Do Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP

								show ' $Ck_Estado_Geo ' $Ck_Estado_Geo
								
								if $Ck_Estado_Geo = 'E' or $Ck_Estado_Geo = 'F' or $Ck_Estado_Geo = ' '
									show '* * Dirección ingresada no pudo ser geo-refenciada * *' $Cust_id
									!*** Inicio 010
									let $Ck_Observaciones = 'Dirección ingresada: ' || $Address1 || ' no pudo ser geo-refenciada'
									do Escribir_Plano
									!*** Fin 010									

								else

									if isblank($Ck_Addre1_Geo)
										show ' Valor en blanco $Ck_Addre1_Geo ' $Ck_Addre1_Geo
										!*** Inicio 010
										let $Ck_Observaciones = 'Dirección1 geo-refenciada en blanco'
										do Escribir_Plano
										!*** Fin 010
									else
										let $Address1 = $Ck_Addre1_Geo
									end-if   ! end if  isblank($Ck_Addre1_Geo)

									if isblank($Ck_Addre2_Geo)
										show ' Valor en blanco $Ck_Addre2_Geo' $Ck_Addre2_Geo
									else
										let $Address2 = $Ck_Addre2_Geo              
									end-if ! end if de isblank($Ck_Addre2_Geo)

									if isblank($Ck_Barrio_Geo)
										show ' Valor en blanco $Ck_Addre1_Geo ' $Ck_Addre1_Geo
										!*** Inicio 010
										let $Ck_Observaciones = 'Barrio en blanco para dirección: ' || $Ck_Addre1_Geo
										do Escribir_Plano
										!*** Fin 010
									else
										let $barrio   = $Ck_Barrio_Geo  
									end-if  ! end if de isblank($Ck_Barrio_Geo)                   

									!Do  Buscar-Descripcion-Codigo-Barrio
								end-if! end if de  $Ck_Estado_Geo = 'E' or $Ck_Estado_Geo = 'F' 
							!Inicio 026 
							else
							!Si no cumple entonces no actualiza la variable para que lo haga despues
							let $BusquedaGEOREF = 'N'
							!Fin 026 
							end-if ! end if de #find-geocity = 1 and $Canal <> '0' 
							
							! Inicio 005 - MV - 04/03/2011
							do VERIFICAR-COUNTY
							! Fin 005 - MV - 04/03/2011
							! Inicio 004 - MV - 17/02/2011
							do find-address-general

							!Inicio #012
							!do isAddressValidToDuplicate ($Address1, $City)
							do isAddressValidToDuplicate
							!Fin #012
							SHOW '$permiteDuplicado: ' 
							SHOW $permiteDuplicado
						    ! Inicio 014						    
						    if $Existe-Cart = 'N'
						    ! Fin 014
							     if $find-address-general = 'Y'
							             !Inicio #013
							     	  !Inicio #012
							     	  !And $permiteDuplicado = 'Y'
							     	  !Fin #012
							     	  And $permiteDuplicado = 'N'
							     	!Fin #013
							     	
							     	let #Secuencia    = #Secuencia + 1
							     	let #message_seq  = #message_seq + 1   
							     	let #NbrSet       = 21000
							     	let #Nbr          = 34
							     	Do  Insertar_Mensaje
                                 
							     	let #ParamSecuencia = 1
							     	let $Parametro      = $Address1
							     	Do Insertar_Parametro_mensaje
                                 
							     	let #ParamSecuencia = 2
							     	let $Parametro      = $cust_id
							     	Do Insertar_Parametro_mensaje
                                 
							     	let #ParamSecuencia = 3
							     	let $Parametro      = $custIdExistente
							     	Do Insertar_Parametro_mensaje
                                 
							     	let #sw_descuadre   = 1		
							     	!*** Inicio 010
							     	let $Ck_Observaciones = 'Dirección ' || $Address1 || ' ya relacionada al cliente: ' || $custIdExistente || ' y no permite duplicado'
									!Inicio 040 Se envia  para que no grabe 
									Let $NoGraba = 'Y'
									!Fin 040
							     	do Escribir_Plano
							     	!*** Fin 010
							     else
							     ! Fin 004 - MV - 17/02/2011
							         !Inicio #013 Se debe crear el cliente solo cuando no existe la dirección  
							         ! o cuando existe la dirección pero se permite duplicado
							         if ($find-address-general = 'Y'  And $permiteDuplicado = 'Y') or
							             ($find-address-general = 'N')
							                  DISPLAY 'ENTRÓ AL SINO'
						                      !Fin #013
							                  
							     	          Do Eliminar-Registro-Cust-Addr-Cust-Addr-Seq-Cust-Cont-Sqr-Phn
							     	          do INSERTAR-DATOS-CLIENTES
									  !Inicio 036
									  do VALIDA-INFO-FACT-ELEC
									  do INSERTA-INFO-FACT-ELEC
								          If $Str_Custo_Fact_Elect <> 'N/A'
									     do INSERTA-EMAIL-FACT-ELEC
									  End-if
									  !Fin 036
							     	          !Inicio 035
									  !do INSERTAR-REGIMEN-CLIENTE
                                                                          !do INSERTAR-RESPONSABILIDAD-CLIENTE
						                          !Fin 035	
							     	          do INSERTAR-IDENTIF-CLIENTE
							     	          do INSERTAR-REGION-CLIENTE
                                               
							     	          If $Subcust_qual1 <>' ' And $Subcust_qual1 <>''  
							     	          	do INSERTAR-ZONA-CLIENTE1
							     	          End-If   
                                               
							     	          do DATOS-JURIDICOS-CLIENTE
                                               
							     	          !Inicio #012 - Se cambia de posicion
							     	          !do INSERTAR-DATOS-DIRECCION
							     	          !Fin #012
                                 
							     	         If  $Tipo_ident = 'N'
							     	         	do DATOS-ICA-CLIENTE
							     	         End-if
   
							     	         do INSERTAR-DATOS-DIRECCION
							     	         !Fin  #012
							     	         do INSERTAR-DIRECCION-CLIENTE
							     	         !Inicio 017
							     	         do GetSetidIpo
							     	         do INSERTAR-INFO-IPOCONSUMO
		
							     	         do INSERTAR-DIRECCION-CARTERA
							     	         do Insertar-Flag-DirCartera

							     	         do INSERTAR-DATOS-INTERNOS

							     	         If $ind_county = 'N' 
							     	            let #Secuencia    = #Secuencia + 1
							     	            let #message_seq  = #message_seq + 1   
							     	            let #NbrSet       = 21000
							     	            let #Nbr          = 40
							     	            Do  Insertar_Mensaje
                                              
							     	            let #ParamSecuencia = 1
							     	            let $Parametro      = $Cust_id
							     	            Do  Insertar_Parametro_mensaje
							     	            !*** Inicio 010
	  						                         let $Ck_Observaciones = 'No pudo ser encontrado el Barrio para dirección: ' || $Address1
							     	            do Escribir_Plano
							     	            !*** Fin 010
							     	         end-if ! end if de : $ind_county = 'N' 
							     	         ! Fin 005 - MV - 07/03/2011
                                          
							     	     ! Inicio 001 - MV - 04/02/2011
							     	     let  $Setid = Ltrim($Setid,' ')
							     	     let  $Cust_id = Ltrim($Cust_id,' ')
							     	     let  $Subcust_qual1 = Ltrim($Subcust_qual1,' ')
                                          
							     	     do Valida-Exite-Cliente
							     	     IF $EXISTE_CLIENTE = 'Y'
							     	      DO Valida-Existe-Zona
							     	         IF $EXISTE_ZONA = 'Y'
							     	         !do esZonaDeContactos($Setid, $Subcust_qual1, $zonaContactos)
							     	     	  !IF $zonaContactos = 'Y'
							     	     	   do Buscar_Miembro_Grupo
							     	     	   do Buscar_Miembro_ID
							     	     	   do Valida-Existe-contacto
							     	     	   IF $EXISTE_CONTACTO = 'N'
							     	     	      ! Crea el contacto a partir de la información del miembro de equipo
							     	     	      Do CrearContacto($Setid, $MemberId, $Subcust_qual1, $MiemGrupo, $oprid)
							     	     	      let $EXISTE_CONTACTO = 'Y'
							     	     	   END-IF
                                          
							     	     	   do Valida-Existe-cliente-contacto
							     	     	   IF $EXISTE_CONTACTO = 'Y'
							     	     	      !Do Inserta-CUST-TEAM
							     	     	      if $EXISTE_CONTACTO_CLIENTE = 'N'
							     	     		      Do Inserta-CLIENTE-CONTACTO
							     	     	      end-if 
							     	     	   ELSE
							     	     	      SHOW '**** EL CONTACTO NO EXISTE  **** '  $MemberId ' '  $NombreMem
							     	     	      let #Secuencia    = #Secuencia + 1
							     	     	      let #message_seq  = #message_seq + 1   
							     	     	      let #NbrSet       = 21000
							     	     	      let #Nbr          = 36
							     	     	      Do  Insertar_Mensaje
							     	     	   END-IF ! end if de:  $EXISTE_CONTACTO = 'Y'
                                          
							     	     	     !ELSE ! No es una zona de contactos, luego solo debe insertar la zona en el cliente
                                          
							     	     	   !Do Inserta-CUST-TEAM
                                          
							     	     	!END-IF			   								    
							     	         ELSE
							     	            SHOW '**** ZONA NO EXISTE ****' $Zona
							     	            let #Secuencia    = #Secuencia + 1
							     	            let #message_seq  = #message_seq + 1   
							     	            let #NbrSet       = 21000
							     	            let #Nbr          = 38
							     	            Do  Insertar_Mensaje								    
							     	         END-IF !end if de: $EXISTE_ZONA = 'Y'
							     	     ELSE ! else de  $EXISTE_CLIENTE = 'Y'
							     	            SHOW '**** CLIENTE NO EXISTE ****'  $Nit
							     	            let #Secuencia    = #Secuencia + 1
							     	            let #message_seq  = #message_seq + 1   
							     	            let #NbrSet       = 21000
							     	            let #Nbr          = 39
							     	            Do  Insertar_Mensaje
							     	     END-IF ! end if de IF $EXISTE_CLIENTE = 'Y'
							     	     ! Fin 001 - MV - 04/02/2011
                                     
							     	     ! Inicio 003 - MV - 07/02/2011
							     	     ! Inicio 006 - CER - 18/05/2011
							     	     ! do INSERTAR-GRUPO-CLIENTES
							     	     do INSERTAR-CUSTGROUPTYP
 
							     	     do INSERTAR-FECHA-OPTION
							     	     do INSERTAR-FECHA-SOLDTO
							     	     do INSERTAR-FECHA-SHIPTO
							     	     do INSERTAR-CUPO-CREDITO
							     	     do INSERTAR-SEQ-CONTACTOS
							     	     do INSERTAR-CONTACTOS 
							     	     do INSERTAR-IVA-CLIENTE
							     	     do INSETAR-PUNTOS
							     	     do execute-commit
							     	     !Inicio 026  
							     	     !do Buscar-Valor-CamLoc-Ck-Addrees-Geo
							     	     do Buscar-Valor-CamLoc-CK_ADDR_GEOREFE
							     	     !Fin 026 
                                          
							     	     if $Subcust_qual1 <> '' and $address_seq_num <> '' and $Ruta <> '' and $SecVisita <> ''
							     	     	do INSERTAR-RUTA-SECUENCIA
							     	     else
							     	     	let #Secuencia    = #Secuencia + 1
							     	     	let #message_seq  = #message_seq + 1   
							     	     	let #NbrSet       = 21000
							     	     	let #Nbr          = 35
							     	     	Do  Insertar_Mensaje
							     	     end-if ! End if de $Subcust_qual1 <> '' and $address_seq_num <> '' and $Ruta <> '' and $SecVisita <> ''
                                          
							     	     if isblank($Ind_Med_Com)
							     	     	SHOW ' NO BUSCA NADA PARA INSERTAR'
							     	     ELSE
							     	     	do BUSCAR-EXISTE-CLIENTE-TABLA-CK-TBCLDIALK                                     
							     	         if #Bus_Cli_Exi = 0
							     	         	do INSERTAR-CLIENTE-TABLA-CK-TBCLDIALK
							     	         else
							     	         	do ACTUALIZAR-CLIENTE-TABLA-CK-TBCLDIALK
							     	         end-if ! end  if de:  #Bus_Cli_Exi = 0
							     	     end-if  ! end if de isblank($Ind_Med_Com)
							         end-if ! end if de  ($find-address-general = 'Y'  And $permiteDuplicado = 'Y') or
							     end-if ! end if de  $find-address-general = 'Y'
						    end-if  ! end if de $Existe-Cart = 'N' 
						end-if ! end if de if $ind_zona   = 'N' or $ind_state  = 'N' or $ind_city = 'N'
					end-if ! END IF de  $INDCLI = 'Y' 

					
					Let $FechaActivacion  = RTrim($FechaActivacion,' ')
					Let $FechaActivacion  = LTrim($FechaActivacion,' ')
					Show '$FechaActivacion ' $FechaActivacion

                    !inicio 011
                    !If Not isblank($FechaActivacion)
					If Not isblank($FechaActivacion) or Not isblank($TarjetaN)
                    !fin 011
						Do Registra-Tarjeta-Institucional
					End-if ! end if de Not isblank($FechaActivacion) or Not isblank($TarjetaN)
				End-If  ! end if de  $ErrorClient <> 'Y' and $clinton <> 'Y' and $estadoValido = 'Y'
			end-if ! end if de  $setid = 'TOTAL'
		end-if ! end if de $Setid <> 'TOTAL'
	end-if !end if de if #end-file
end-while
 
 if #sw_descuadre = 1 
    let $estado_final = 'error'
 else
    let $estado_final = 'ok'       
 end-if
 
end-procedure   PROCESAR-ARCHIVO


!Inicio 038
!-------------------------------------------!
!Procedimiento Buscar-Existe-Cliente-Tercero!
!-------------------------------------------!
begin-procedure Buscar-Existe-Cliente-Tercero


let #Exi_Cli_Ter_Psl = 0
let $Setid_Pln       = ' '
let $Terce_Pln       = ' '
begin-select
VET.SETID, 
VET.LC_TERCERO

   let $Setid_Pln       = &VET.SETID
   let $Terce_Pln       = &VET.LC_TERCERO
   let #Exi_Cli_Ter_Psl = 1

FROM PS_CK_TERC_PSL_TBL VET
WHERE VET.SETID      = $setidTercero
  AND VET.LC_TERCERO = $Cust_id
  AND EFFDT = TO_DATE($fecha_out,'DD/MM/YYYY')
  
end-select

end-procedure  Buscar-Existe-Cliente-Tercero

!-------------------------------------------!
!Procedimiento Insertar-Cliente-Tercero!
!-------------------------------------------!
Begin-procedure Insertar-Cliente-Tercero
show 'Entro Insertar-Cliente-Tercero'
let $setidTercero       =   nvl( rtrim (ltrim ($setidTercero  	,' '),' '),' ')			
let $Cust_id	   	=   nvl( rtrim (ltrim ($Cust_id		,' '),' '),' ')		
let $Tipo_ident	   	=   nvl( rtrim (ltrim ($Tipo_ident	,' '),' '),' ')		
let $Cust_status	=   nvl( rtrim (ltrim ($Cust_status	,' '),' '),' ')		
let $fecha_out	        =   nvl( rtrim (ltrim ($fecha_out	,' '),' '),' ')		
let $Name1		=   nvl( rtrim (ltrim ($Name1		,' '),' '),' ')			
! Inicio 001 - CER - 20-05-2011	
let $ck_obliga_rut	=   nvl( rtrim (ltrim ($ck_obliga_rut	,' '),' '),' ')
! Fin 001 - CER - 20-05-2011
show $Cust_id


begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_TERC_PSL_TBL
VALUES
(
$setidTercero,
$Cust_id,
!CAGC INICIO 002
!TO_DATE($fecha_out,'YYYY-MM-DD'),
TO_DATE($fecha_out,'DD/MM/YYYY'),
!CAGC FIN 002
'A',
$Tipo_ident, 
$TipoPersona,
initcap($Name1),  
$address1,
$address2,            
$phone,           
$country,            
$state,
$city,
! Fin 001 - CER - 20-05-2011
$ck_obliga_rut,
!Inicio Modificación 007
'N'!Fin Modificación 007
)      
end-sql

Begin-SQL on-Error=SQL-ERROR
INSERT INTO PS_LC_TERCERO_ID
(
SETID, 
LC_TERCERO, 
EFFDT, 
TIPO_IDENTIFICAC, 
NIT_PROVEEDOR, 
LC_DIGITO_VERIF
)
Values
(
$setidTercero,
$Cust_id,
TO_DATE($fecha_out,'DD/MM/YYYY'),
$Tipo_ident, 
$IdTercero,
$DigitoVerificacion
)
END-SQL

show 'Salio Insertar-Cliente-Tercero'


end-procedure   Insertar-Cliente-Tercero

!-------------------------------------------!
!Procedimiento Actualizar-Indicar-Rut       !
!-------------------------------------------!

begin-procedure Actualizar-Indicar-Rut

let $Setid	        =   nvl( rtrim (ltrim ($Setid	   	,' '),' '),' ')			
let $Cust_id	   	=   nvl( rtrim (ltrim ($Cust_id		,' '),' '),' ')		
let $Tipo_ident	   	=   nvl( rtrim (ltrim ($Tipo_ident	,' '),' '),' ')		
let $Cust_status	=   nvl( rtrim (ltrim ($Cust_status	,' '),' '),' ')		
let $fecha_out	        =   nvl( rtrim (ltrim ($fecha_out	,' '),' '),' ')		
let $Name1		=   nvl( rtrim (ltrim ($Name1		,' '),' '),' ')			
! Inicio 001 - CER - 20-05-2011	
let $address1	   	=   nvl( rtrim (ltrim ($address1	,' '),' '),' ')		
let $address2	   	=   nvl( rtrim (ltrim ($address2	,' '),' '),' ')		
let $phone		=   nvl( rtrim (ltrim ($phone		,' '),' '),' ')	
let $country	        =   nvl( rtrim (ltrim ($country		,' '),' '),' ')		
let $state		=   nvl( rtrim (ltrim ($state		,' '),' '),' ')			
let $city		=   nvl( rtrim (ltrim ($city		,' '),' '),' ')			
let $ck_obliga_rut	=   nvl( rtrim (ltrim ($ck_obliga_rut	,' '),' '),' ')
! Fin 001 - CER - 20-05-2011

begin-SQL On-Error=SQL-Error
UPDATE PS_CK_TERC_PSL_TBL ACT
! Inicio 001 - CER - 20-05-2011
!SET ACT.CK_OBLIGA_RUT = 'N'
SET ACT.CK_OBLIGA_RUT = $ck_obliga_rut,
    ACT.ADDRESS1 = $Address1,
    ACT.ADDRESS2 = $Address2,
    ACT.PHONE = $phone,
    ACT.COUNTRY = $country,
    ACT.STATE = $state,
    ACT.CITY = $city,
    ACT.EFF_STATUS = 'A',
    !Inicio 039
	ACT.NOM_TERCERO = $Name1
    !Fin 039	    
WHERE ACT.SETID      = $Setid
  AND ACT.LC_TERCERO = $Cust_id
  AND ACT.EFFDT = (SELECT MAX(A_ED1.EFFDT) 
                     FROM PS_CK_TERC_PSL_TBL A_ED1
                    WHERE ACT.SETID       = A_ED1.SETID
                      AND ACT.LC_TERCERO  = A_ED1.LC_TERCERO
                      AND A_ED1.EFFDT <= SYSDATE)
end-sql

end-procedure   Actualizar-Indicar-Rut


!-------------------------------------------!
!Procedimiento existeNombreTercero          !
!-------------------------------------------!
Begin-Procedure existeNombreTercero($setidTercero, $lcTercero, $fecha_out, :$existe)

  ! Inicializaciòn de variables
  let $existe ='N'

BEGIN-SELECT ON-ERROR=SQL-ERROR
'Existe existeNombreTercero'
   
   let $existe ='Y'

FROM PS_CK_TERC_NAM_TBL
WHERE SETID = $setidTercero
  AND LC_TERCERO = $lcTercero
  AND EFFDT = TO_DATE($fecha_out,'DD/MM/YYYY')
END-SELECT

End-Procedure


!-------------------------------------------!
!Procedimiento ActualizarNombreTercero      !
!-------------------------------------------!
!Inicio 039
BEGIN-PROCEDURE ActualizarNombreTercero($setid, $lcTercero, $effDt, $nameTerc, $primerApellido, $segundoApellido, $primerNombre, $segundoNombre )
!Fin 039
BEGIN-SQL ON-ERROR=SQL-ERROR
UPDATE PS_CK_TERC_NAM_TBL
  SET NOM_TERCERO = NVL($nameTerc,' '), 
      LC_MMG_PRIM_NOMBRE = NVL($primerNombre,' '), 
      LC_MMG_SEGU_NOMBRE = NVL($segundoNombre,' '), 
      LC_MMG_PRI_APELLID = NVL($primerApellido,' '), 
      LC_MMG_SEG_APELLID = NVL($segundoApellido,' '),
      EFF_STATUS = 'A'
WHERE SETID = $setid
  AND LC_TERCERO = $lcTercero
  AND EFFDT = TO_DATE($effDt,'DD/MM/YYYY')
END-SQL

END-PROCEDURE


!-------------------------------------------!
!Procedimiento Insertar-Nombre-Tercero      !
!-------------------------------------------!
!Inicio 039
begin-procedure Insertar-Nombre-Tercero($setid, $lcTercero, $effDt, $nameTerc, $primerApellido, $segundoApellido, $primerNombre, $segundoNombre )
!Fin 039

BEGIN-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_TERC_NAM_TBL
(
SETID, 
LC_TERCERO, 
EFFDT, 
EFF_STATUS, 
NOM_TERCERO, 
LC_MMG_PRIM_NOMBRE, 
LC_MMG_SEGU_NOMBRE, 
LC_MMG_PRI_APELLID, 
LC_MMG_SEG_APELLID
)
VALUES
(
$setid,
$lcTercero,
TO_DATE($effDt,'DD/MM/YYYY'),
'A',
NVL($nameTerc,' '),
NVL($primerNombre,' '),
NVL($segundoNombre,' '),
NVL($primerApellido,' '),
NVL($segundoApellido,' ')
)
END-SQL


End-Procedure

!-------------------------------------------!
!Procedimiento existeDireccionTercero       !
!-------------------------------------------!
Begin-Procedure existeDireccionTercero($setidTercero, $lcTercero, $fecha_out, :$existe)

  ! Inicializaciòn de variables
  let $existe ='N'

BEGIN-SELECT ON-ERROR=SQL-ERROR
'Existe existeDireccionTercero'
   
   let $existe ='Y'

FROM PS_CK_TERC_DIR_TBL
WHERE SETID = $setidTercero
  AND LC_TERCERO = $lcTercero
  AND EFFDT = TO_DATE($fecha_out,'DD/MM/YYYY')
END-SELECT

End-Procedure

!-------------------------------------------!
!Procedimiento ActualizarDireccionTercero   !
!-------------------------------------------!
BEGIN-PROCEDURE ActualizarDireccionTercero( $setid, $lcTercero, $effDt, $address1, $address2, $phone, $country, $state, $city  )

BEGIN-SQL ON-ERROR=SQL-ERROR
UPDATE PS_CK_TERC_DIR_TBL
   SET ADDRESS1 = $address1, 
       ADDRESS2 = $address2, 
       PHONE = $phone, 
       COUNTRY = $country, 
       STATE = $state, 
       CITY = $city
WHERE SETID = $setid
  AND LC_TERCERO = $lcTercero
  AND EFFDT = TO_DATE($effDt,'DD/MM/YYYY')
END-SQL

END-PROCEDURE


!-------------------------------------------!
!Procedimiento InsertarDireccionTercero   !
!-------------------------------------------!
Begin-Procedure InsertarDireccionTercero($setid, $lcTercero, $effDt, $address1, $address2, $phone, $country, $state, $city )

BEGIN-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_TERC_DIR_TBL
(
SETID, 
LC_TERCERO, 
EFFDT, 
EFF_STATUS, 
ADDRESS1, 
ADDRESS2, 
PHONE, 
COUNTRY, 
STATE, 
CITY
)
VALUES
(
$setid, 
$lcTercero,
TO_DATE($effDt,'DD/MM/YYYY'),
'A',
$address1,
$address2,
$phone,
$country,
$state,
$city
)
END-SQL

End-Procedure


Begin-Procedure VERIFICAR-LISTA-CLINTON

!Se obtiene la ultima fecha efectiva para validar sobre la ultima lista clinton cargada
BEGIN-SELECT distinct ON-ERROR=SQL-ERROR
TO_CHAR(CLIN.EFFDT,'YYYY-MM-DD') &CLIN.EFFDT
	let $fechaClinton = &CLIN.EFFDT 
FROM SYSADM.PS_CK_SDNID_LINE CLIN
WHERE CLIN.EFFDT= (SELECT max (CLIN2.EFFDT) FROM  SYSADM.PS_CK_SDNID_LINE CLIN2)
END-SELECT

show '$fechaClinton ' $fechaClinton
!Se revisa si ese cliente existe para esa fecha en la tabla PS_CK_SDNID_LINE 
BEGIN-SELECT
'YES' 
	let $clinton = 'Y'
FROM SYSADM.PS_CK_SDNID_LINE CLIN3
WHERE CLIN3.ID_NUMBER = $cust_id
	AND CLIN3.EFFDT = TO_DATE( $fechaClinton ,'YYYY-MM-DD')
END-SELECT
End-Procedure VERIFICAR-LISTA-CLINTON

Begin-Procedure VERIFICAR-CIUDAD-DPTO

show '$State cc '$State
show '$City cc '$City
BEGIN-SELECT
'YC'
	let $estadoValido = 'Y'
FROM SYSADM.PS_CK_MUNI_VW CC1
WHERE CC1.STATE = $State
	AND CC1.MUNI_FLD_HO = $City
END-SELECT

show '$estadoValido cc '$estadoValido
End-Procedure VERIFICAR-CIUDAD-DPTO


Begin-Procedure Registra-Tarjeta-Institucional
	
	Show 'Registra tarjeta activa ' $Cust_id

	Let $ExisteTarjetaActivada = 'NO'

If Not IsBlank($FechaActivacion)

BEGIN-SELECT
'EXISTE TARJETA ACTIVADA'
	Let $ExisteTarjetaActivada = 'SI'
FROM PS_CK_TARJETA_INST
WHERE CUST_ID = $Cust_id
  AND EFFDT = TO_DATE($FechaActivacion,'YYYYMMDD')
  AND CK_ESTADO_TARJETA = 'A'
END-SELECT

Else

BEGIN-SELECT
'EXISTE TARJETA ACTIVADA'
	Let $ExisteTarjetaActivada = 'SI'
FROM PS_CK_TARJETA_INST
WHERE CUST_ID = $Cust_id
  AND EFFDT = TRUNC(sysdate)
  AND CK_ESTADO_TARJETA = 'A'
END-SELECT

End-If

	If $ExisteTarjetaActivada = 'NO'
	   If isblank($TarjetaN)   

BEGIN-SQL
INSERT INTO PS_CK_TARJETA_INST(CK_TARJETA, EFFDT, CUST_ID, CK_ESTADO_TARJETA, OPRID)
SELECT DISTINCT CK_TARJETA, TO_DATE($FechaActivacion,'YYYYMMDD'),CUST_ID, 'A', $oprid
FROM PS_CK_TARJETA_INST TARJ
WHERE TARJ.EFFDT = (SELECT MAX(TARC.EFFDT) FROM PS_CK_TARJETA_INST TARC WHERE TARC.CK_TARJETA=TARJ.CK_TARJETA AND TARC.EFFDT<=SYSDATE)
  AND TARJ.CUST_ID = $Cust_id
END-SQL

!inicio 011
           Else

!si no tiene tarjeta activa pero se indico el numero en la entrada sin fechaactivacion
              If IsBlank($FechaActivacion) 

BEGIN-SQL
INSERT INTO PS_CK_TARJETA_INST(CK_TARJETA, EFFDT, CUST_ID, CK_ESTADO_TARJETA, OPRID)
VALUES($TarjetaN, $AsOfToday, $Cust_Id, 'A', $oprid)
END-SQL

!si no tiene tarjeta activa pero se indico el numero en la entrada con fechaactivacion
              Else

BEGIN-SQL
INSERT INTO PS_CK_TARJETA_INST(CK_TARJETA, EFFDT, CUST_ID, CK_ESTADO_TARJETA, OPRID)
VALUES($TarjetaN, $AsOfToday, $Cust_Id, 'A', $oprid)
END-SQL

              End-If

           End-If

        Else

!si tiene tarjeta activa pero en la entrada se indico el numero de la tarjeta
           If Not IsBlank($TarjetaN)

              If Not IsBlank($FechaActivacion)


BEGIN-SQL
UPDATE PS_CK_TARJETA_INST TAUP
SET    TAUP.CK_TARJETA = $TarjetaN
WHERE TAUP.CUST_ID = $Cust_id
  AND TAUP.EFFDT = TO_DATE($FechaActivacion,'YYYYMMDD')
  AND TAUP.CK_ESTADO_TARJETA = 'A'
END-SQL

              Else

BEGIN-SQL
UPDATE PS_CK_TARJETA_INST TAUP
SET    TAUP.CK_TARJETA = $TarjetaN
WHERE TAUP.CUST_ID = $Cust_id
  AND TAUP.EFFDT = Trunc(sysdate)
  AND TAUP.CK_ESTADO_TARJETA = 'A'
END-SQL

              End-If

           End-If
!fin 011

	End-if
	
End-Procedure	


begin-procedure Eliminar-Registro-Cust-Addr-Cust-Addr-Seq-Cust-Cont-Sqr-Phn
begin-sql 
DELETE PS_CUST_ADDR_SEQ ERC 
WHERE ERC.SETID   = $setid 
  AND ERC.CUST_ID = $cust_id
  AND NOT EXISTS (SELECT B1.CUST_ID FROM PS_CUSTOMER B1
                   WHERE B1.SETID   = ERC.SETID
                     AND B1.CUST_ID = ERC.CUST_ID)
end-sql

begin-sql 
DELETE PS_CUST_CNTCT_SEQ ERC2
WHERE  ERC2.SETID   = $setid
  AND  ERC2.CUST_ID = $cust_id 
  AND NOT EXISTS (SELECT B2.CUST_ID FROM PS_CUSTOMER B2
                   WHERE B2.SETID   = ERC2.SETID
                     AND B2.CUST_ID = ERC2.CUST_ID)
end-sql

begin-sql 
DELETE PS_CUST_CNTCT_PHN ERC3
WHERE ERC3.SETID   = $setid
  AND ERC3.CUST_ID = $cust_id
  AND NOT EXISTS (SELECT B3.CUST_ID FROM PS_CUSTOMER B3
                   WHERE B3.SETID   = ERC3.SETID
                     AND B3.CUST_ID = ERC3.CUST_ID)
end-sql

begin-sql 
DELETE PS_CUST_CONTACT ERC4
WHERE ERC4.SETID   = $setid
  AND ERC4.CUST_ID = $cust_id
  AND NOT EXISTS (SELECT B4.CUST_ID FROM PS_CUSTOMER B4
                   WHERE B4.SETID   = ERC4.SETID
                     AND B4.CUST_ID = ERC4.CUST_ID)
end-sql

begin-sql
DELETE PS_CUST_ADDRESS ERC5
WHERE ERC5.SETID   = $setid
  AND ERC5.CUST_ID = $cust_id
  AND NOT EXISTS (SELECT B5.CUST_ID FROM PS_CUSTOMER B5
                   WHERE B5.SETID   = ERC5.SETID
                     AND B5.CUST_ID = ERC5.CUST_ID)
end-sql
end-procedure   Eliminar-Registro-Cust-Addr-Cust-Addr-Seq-Cust-Cont-Sqr-Phn
   
!Inicio 026  
!-----------------------------------------------------------------------
! Funcion: ObtenerInstanciaGeo
! Fecha: 2016-07-08
! Autor: César Cuncanchún
! Descripcion: Obtiene la instancia del proceso de georeferenciacion del job actual
!-----------------------------------------------------------------------       
begin-procedure ObtenerInstanciaGeo


BEGIN-SELECT ON-ERROR=SQL-ERROR
BGEO.PRCSINSTANCE
	LET #instanciaGeo = &BGEO.PRCSINSTANCE
FROM PSPRCSRQST AGEO, PSPRCSRQST BGEO 
WHERE AGEO.PRCSINSTANCE = #prcs_process_instance
 AND  AGEO.JOBINSTANCE= BGEO.JOBINSTANCE
 AND  BGEO.PRCSNAME='CK_GEOREF' 
END-SELECT
 show '#instanciaGeo : ' #instanciaGeo
end-procedure ObtenerInstanciaGeo
!Fin 026 
   
begin-procedure Buscar-Valor-CamLoc-Ck-Addrees-Geo
let $Ck_localidad = ' '
end-procedure   Buscar-Valor-CamLoc-Ck-Addrees-Geo

!Inicio 026  
!-----------------------------------------------------------------------
! Funcion: Buscar-Valor-CamLoc-CK_ADDR_GEOREFE
! Descripcion: Busca los datos en la tabla CK_ADDR_GEOREFE
! Autor: César Cuncanchún
! Fecha: 2016-06-16
!-----------------------------------------------------------------------       
begin-procedure Buscar-Valor-CamLoc-CK_ADDR_GEOREFE
let $Ck_localidad = ' '
begin-select
ELC.CUST_ID, 
ELC.CK_LOCALIDAD1

  let $Ck_localidad = &ELC.CK_LOCALIDAD1
  if  $Ck_localidad = 'Error'
      let #Secuencia    = #Secuencia + 1
      let #message_seq  = #message_seq + 1
      let #NbrSet       = 21000
      let #Nbr          = 28
      Do  Insertar_Mensaje
  	               
      let #ParamSecuencia = 1
      let $Parametro      = $Cust_id
      Do Insertar_Parametro_mensaje
   
      !let #sw_descuadre   = 1
  end-if

FROM PS_CK_ADDR_GEOREFE ELC
WHERE ELC.SETID   = $Setid
  AND ELC.CUST_ID = $Cust_id
  AND ELC.EFFDT   = (SELECT MAX(A_ED_ELC.EFFDT) FROM PS_CK_ADDR_GEOREFE A_ED_ELC
                    WHERE ELC.SETID           = A_ED_ELC.SETID
                      AND ELC.CUST_ID         = A_ED_ELC.CUST_ID
                      AND ELC.ADDRESS_SEQ_NUM = A_ED_ELC.ADDRESS_SEQ_NUM
                      AND A_ED_ELC.EFFDT     <= SYSDATE)
end-select
end-procedure   Buscar-Valor-CamLoc-CK_ADDR_GEOREFE
!Fin 026

begin-procedure Valida-Municipio-Existe
let $CITY_GEO = ' '
let #find-geocity = 0
begin-select
VME.CK_CODIGO_GEOREF 

  let #find-geocity = 1
  let $CITY_GEO = &VME.CK_CODIGO_GEOREF

FROM PS_MUNI_TBL_HO VME 
WHERE VME.MUNI_FLD_HO = $City
AND VME.CK_CODIGO_GEOREF <> ' '
end-select
end-procedure   Valida-Municipio-Existe 


begin-procedure Insertar-Registro-Tabla-Ck-Address-Geo

show  ' Entro Insertar-Registro-Tabla-Ck-Address-Geo '
let   $Address1 = ltrim ($Address1,' ')
let   $City     = ltrim ($City,' ')
show ' $Setid           ' $Setid
show ' $Cust_id         ' $Cust_id
SHOW ' $City            ' $City
show ' $Address1        ' $Address1 
show ' $fecha_out       ' $fecha_out
show ' $Canal           ' $Canal
show ' $address_seq_num ' $address_seq_num
show '#Seq_Dir_Cli '#Seq_Dir_Cli

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_ADDRESS_GEO
(SETID,                  
CUST_ID,                
ADDRESS_SEQ_NUM,        
EFFDT,                  
ADDRESS1,               
ADDRESS2,               
CITY,                   
CUSTOMER_TYPE,          
CK_ADDRESS1GEO,         
CK_ADDRESS2GEO, 
CK_DIRECCION_ALTER,
PHONE_NUM,
CK_FUENTE,
CK_BARRIO,              
CK_CX,                  
CK_CY,                  
CK_LOCALIDAD,           
CK_ESTADO_GEO,          
CK_FECHA_GEO)
VALUES
($Setid,
 $Cust_id,
 #Seq_Dir_Cli,
 TO_DATE($fecha_out,'DD-MM-YYYY'), 
 REPLACE($Address1,'|'),
 ' ',
 $City,
 $Canal,
 ' ',
 ' ',
 ' ',
 ' ',
 ' ',
 ' ',
 0,
 0,
 ' ',
 ' ',
 '')
end-sql
show  ' Salio Insertar-Registro-Tabla-Ck-Address-Geo '
end-procedure   Insertar-Registro-Tabla-Ck-Address-Geo

!Inicio 026
!-----------------------------------------------------------------------
! Funcion: Insertar-Registro-Tabla-CK_ADDR_GEOREFE
! Descripcion: Inserta registro nuevo en la tabla CK_ADDR_GEOREFE
! Autor: César Cuncanchún
! Fecha: 2016-06-16
!-----------------------------------------------------------------------     
begin-procedure Insertar-Registro-Tabla-CK_ADDR_GEOREFE 

show  ' Entro Insertar-Registro-Tabla-CK_ADDR_GEOREFE '
let   $Address1 = ltrim ($Address1,' ')
let   $City     = ltrim ($City,' ')
show ' $Setid           ' $Setid
show ' $Cust_id         ' $Cust_id
SHOW ' $City            ' $City
show ' $Address1        ' $Address1 
show ' $fecha_out       ' $fecha_out
show ' $Canal           ' $Canal
show ' $address_seq_num ' $address_seq_num
show '#Seq_Dir_Cli '#Seq_Dir_Cli

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_ADDR_GEOREFE (SETID,CUST_ID,ADDRESS_SEQ_NUM,EFFDT,CITY,ADDRESS1, ADDRESS2,CK_DIRECTRAD,CK_VALIDACION,CK_VALIDA_PLACA,CK_ESAMBIGUA,CK_FUENTE2	,CK_DIRALTERNA	,CK_BARRIOTRADUCIDO,CK_CODIGODIRECCION,CK_CODDIRPLACA,CK_NIVSOCIO,		CK_MANZANA,			CK_BARRIO1,CK_CODBAR,CK_LOCALIDAD1,CK_CX2,CK_CY2,CK_BARRIO_PEOPLE,CK_ESTADO3,CK_MENSAJE1, CK_POSTAL, CK_LOCATION_ID)
SELECT SETID,CUST_ID,ADDRESS_SEQ_NUM,EFFDT,CITY, ADDRESS1, ADDRESS2, CK_DIRECTRAD,CK_VALIDACION,CK_VALIDA_PLACA,CK_ESAMBIGUA,CK_FUENTE2	,CK_DIRALTERNA	,CK_BARRIOTRADUCIDO,CK_CODIGODIRECCION,CK_CODDIRPLACA,CK_NIVSOCIO,		CK_MANZANA,			CK_BARRIO1,CK_CODBAR,CK_LOCALIDAD1,CK_CX2,CK_CY2,CK_BARRIO_PEOPLE,CK_ESTADO3,CK_MENSAJE1 , CK_POSTAL, ' '
FROM PS_CK_ADDR_GEO_TMP CCTMP
WHERE CCTMP.SETID = $Setid
AND CCTMP.CUST_ID = $Cust_id
AND CCTMP.ADDRESS_SEQ_NUM = $address_seq_num
AND CCTMP.EFFDT = TO_DATE($fecha_out,'DD-MM-YYYY')
end-sql
show  ' Salio Insertar-Registro-Tabla-CK_ADDR_GEOREFE '
end-procedure   Insertar-Registro-Tabla-CK_ADDR_GEOREFE

begin-procedure Buscar-Campos-Tabla-Ck-Address-Geo
let $Ck_Estado_Geo = ' '
let $Ck_Addre1_Geo = ' '
let $Ck_Addre2_Geo = ' '
let $Ck_Barrio_Geo = ' ' 
begin-select
BAD.CK_ESTADO_GEO,
BAD.CK_ADDRESS1GEO,
BAD.CK_ADDRESS2GEO,
BAD.CK_BARRIO 

  let $Ck_Estado_Geo = &BAD.CK_ESTADO_GEO
  let $Ck_Addre1_Geo = &BAD.CK_ADDRESS1GEO
  let $Ck_Addre2_Geo = &BAD.CK_ADDRESS2GEO
  let $Ck_Barrio_Geo = &BAD.CK_BARRIO
  
  show ' encontro algo en esta tabla ** ** '
  show ' $Ck_Estado_Geo ' $Ck_Estado_Geo
  
  	show '--------RESULTADO GEOREFERENCIACION INICIO----------'
    show '$Setid ' $Setid
    show '$Cust_id ' $Cust_id 
    show '#Seq_Dir_Cli ' #Seq_Dir_Cli
    show '$fecha_out ' $fecha_out
    show '$Ck_Estado_Geo ' $Ck_Estado_Geo
    show '$Ck_Addre1_Geo ' $Ck_Addre1_Geo
    show '$Ck_Addre2_Geo ' $Ck_Addre2_Geo
    show '$Ck_Barrio_Geo ' $Ck_Barrio_Geo
    show '--------RESULTADO GEOREFERENCIACION FIN----------'


FROM PS_CK_ADDRESS_GEO BAD
where BAD.SETID           = $Setid 
  and BAD.CUST_ID         = $Cust_id 
  and BAD.ADDRESS_SEQ_NUM = #Seq_Dir_Cli 
  and BAD.EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
end-select
end-procedure   Buscar-Campos-Tabla-Ck-Address-Geo


!Inicio 026
!-----------------------------------------------------------------------
! Funcion: Buscar-Campos-Tabla-CK_ADDR_GEOREFE
! Descripcion: Busca datos basicos de direccion en la tabla CK_ADDR_GEOREFE
! Autor: César Cuncanchún
! Fecha: 2016-06-16
!-----------------------------------------------------------------------     
begin-procedure Buscar-Campos-Tabla-CK_ADDR_GEOREFE
show 'Entra Buscar-Campos-Tabla-CK_ADDR_GEOREFE'
let $Ck_Estado_Geo = ' '
let $Ck_Addre1_Geo = ' '
let $Ck_Addre2_Geo = ' '
let $Ck_Barrio_Geo = ' ' 
begin-select
BAD.CK_ESTADO3,
BAD.CK_DIRECTRAD,
BAD.CK_DIRALTERNA,
BAD.CK_CODBAR

  let $Ck_Estado_Geo = &BAD.CK_ESTADO3
  let $Ck_Addre1_Geo = &BAD.CK_DIRECTRAD
  let $Ck_Addre2_Geo = &BAD.CK_DIRALTERNA
  let $Ck_Barrio_Geo = &BAD.CK_CODBAR
  
  show ' encontro algo en esta tabla ** ** '
  show ' $Ck_Estado_Geo ' $Ck_Estado_Geo
  
  	show '--------RESULTADO GEOREFERENCIACION INICIO----------'
    show '$Setid ' $Setid
    show '$Cust_id ' $Cust_id 
    show '#Seq_Dir_Cli ' #Seq_Dir_Cli
    show '$fecha_out ' $fecha_out
    show '$Ck_Estado_Geo ' $Ck_Estado_Geo
    show '$Ck_Addre1_Geo ' $Ck_Addre1_Geo
    show '$Ck_Addre2_Geo ' $Ck_Addre2_Geo
    show '$Ck_Barrio_Geo ' $Ck_Barrio_Geo
    show '--------RESULTADO GEOREFERENCIACION FIN----------'


FROM PS_CK_ADDR_GEOREFE BAD
where BAD.SETID           = $Setid 
  and BAD.CUST_ID         = $Cust_id 
  and BAD.ADDRESS_SEQ_NUM = #Seq_Dir_Cli 
  and BAD.EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
end-select
show 'Sale Buscar-Campos-Tabla-CK_ADDR_GEOREFE'
end-procedure   Buscar-Campos-Tabla-CK_ADDR_GEOREFE
!Fin 026

!Inicio 026
!-----------------------------------------------------------------------
! Funcion: Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP
! Fecha: 2016-06-16
! Autor: César Cuncanchún
! Descripcion: Busca datos basicos de direccion en la tabla CK_ADDR_GEOREFE
!-----------------------------------------------------------------------     
begin-procedure Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP
show 'Entra Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP'
let $Ck_Estado_Geo = ' '
let $Ck_Addre1_Geo = ' '
let $Ck_Addre2_Geo = ' '
let $Ck_Barrio_Geo = ' ' 
begin-select
BAD1.CK_ESTADO3,
BAD1.CK_DIRECTRAD,
BAD1.CK_DIRALTERNA,
BAD1.CK_CODBAR 

  let $Ck_Estado_Geo = &BAD1.CK_ESTADO3
  let $Ck_Addre1_Geo = &BAD1.CK_DIRECTRAD
  let $Ck_Addre2_Geo = &BAD1.CK_DIRALTERNA
  let $Ck_Barrio_Geo = &BAD1.CK_CODBAR
  
  show ' encontro algo en esta tabla ** ** '
  show ' $Ck_Estado_Geo ' $Ck_Estado_Geo
  
  	show '--------RESULTADO GEOREFERENCIACION INICIO----------'
    show '$Setid ' $Setid
    show '$Cust_id ' $Cust_id 
    show '#Seq_Dir_Cli ' #Seq_Dir_Cli
	show '$address_seq_num ' $address_seq_num
    show '$fecha_out ' $fecha_out
    show '$Ck_Estado_Geo ' $Ck_Estado_Geo
    show '$Ck_Addre1_Geo ' $Ck_Addre1_Geo
    show '$Ck_Addre2_Geo ' $Ck_Addre2_Geo
    show '$Ck_Barrio_Geo ' $Ck_Barrio_Geo
    show '--------RESULTADO GEOREFERENCIACION FIN----------'


FROM PS_CK_ADDR_GEO_TMP BAD1
where BAD1.SETID           = $Setid 
  and BAD1.CUST_ID         = $Cust_id 
  and BAD1.ADDRESS_SEQ_NUM = $address_seq_num   
  and BAD1.EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
  and BAD1.PROCESS_INSTANCE = #instanciaGeo
end-select
show 'Sale Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP'
end-procedure   Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP 
!Fin 026

begin-procedure Buscar-Existe-Direcc-Ck-Address-Geo
SHOW ' Buscar-Existe-Direcc-Ck-Address-Geo ' 
end-procedure   Buscar-Existe-Direcc-Ck-Address-Geo

!Inicio 026
!-----------------------------------------------------------------------
! Funcion: Buscar-Existe-Direcc-CK_ADDR_GEOREFE
! Descripcion: Busca si existe la dirección en la tabla CK_ADDR_GEOREFE
! Autor: César Cuncanchún
! Fecha: 2016-06-16
!-----------------------------------------------------------------------     
begin-procedure Buscar-Existe-Direcc-CK_ADDR_GEOREFE
SHOW ' Buscar-Existe-Direcc-CK_ADDR_GEOREFE ' 
SHOW ' $setid       ' $setid
SHOW ' $cust_id     ' $cust_id
SHOW ' #Seq_Dir_Cli ' #Seq_Dir_Cli
SHOW ' $fecha_out   ' $fecha_out

Let $Enc_Cli_Geo = ' '
let #Exi_Dic_Geo = 0

begin-select
BEDG.CUST_ID 

  Let $Enc_Cli_Geo = &BEDG.CUST_ID
  let #Exi_Dic_Geo = 1

FROM PS_CK_ADDR_GEOREFE BEDG
where BEDG.SETID           = $setid
  and BEDG.CUST_ID         = $cust_id
  and BEDG.ADDRESS_SEQ_NUM = #Seq_Dir_Cli 
  and BEDG.EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
end-select
end-procedure   Buscar-Existe-Direcc-CK_ADDR_GEOREFE
!Fin 026


begin-procedure Update-Registro-Tabla-Ck-Address-Geo
begin-sql ON-ERROR=SQL-ERROR
update PS_CK_ADDRESS_GEO 
SET ADDRESS1 = REPLACE($Address1,'|'),
    ADDRESS2 = REPLACE($Address2,'|'), 
    CITY     = $City,
    CUSTOMER_TYPE = $Canal    
where SETID           = $setid
  and CUST_ID         = $cust_id
  and ADDRESS_SEQ_NUM = #Seq_Dir_Cli
  and EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
end-sql
end-procedure   Update-Registro-Tabla-Ck-Address-Geo

!Inicio 026
!-----------------------------------------------------------------------
! Funcion: Update-Registro-Tabla-CK_ADDR_GEOREFE
! Descripcion: Actualiza la dirección en la tabla CK_ADDR_GEOREFE
! Autor: César Cuncanchún
! Fecha: 2016-06-16
!-----------------------------------------------------------------------  
begin-procedure Update-Registro-Tabla-CK_ADDR_GEOREFE
begin-select
TMPG.CK_DIRECTRAD,
TMPG.CK_DIRALTERNA, 
TMPG.CK_CX2,
TMPG.CK_CY2,
TMPG.CK_ESTADO3	
	LET $CK_DIRECTRAD_TMPG = &TMPG.CK_DIRECTRAD
	LET $CK_DIRALTERNA_TMPG = &TMPG.CK_DIRALTERNA
	LET $CK_CX2_TMPG = &TMPG.CK_CX2
	LET $CK_CY2_TMPG = &TMPG.CK_CY2
	LET $CK_ESTADO3_TMPG = &TMPG.CK_ESTADO3		
FROM PS_CK_ADDR_GEO_TMP TMPG
WHERE TMPG.SETID           = $setid
  and TMPG.CUST_ID         = $cust_id
  and TMPG.ADDRESS_SEQ_NUM = #Seq_Dir_Cli
  and TMPG.EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
end-select

begin-sql ON-ERROR=SQL-ERROR
update PS_CK_ADDR_GEOREFE 
SET CK_DIRECTRAD = $CK_DIRECTRAD_TMPG ,
	CK_DIRALTERNA = $CK_DIRALTERNA_TMPG ,
	CK_CX2 =  $CK_CX2_TMPG ,
	CK_CY2 = $CK_CY2_TMPG ,
	CK_ESTADO3 =  $CK_ESTADO3_TMPG  
where SETID           = $setid
  and CUST_ID         = $cust_id
  and ADDRESS_SEQ_NUM = #Seq_Dir_Cli
  and EFFDT           = TO_DATE($fecha_out,'DD-MM-YYYY')
end-sql
end-procedure   Update-Registro-Tabla-CK_ADDR_GEOREFE

!Fin 026

begin-procedure BUSCAR-EXISTE-CLIENTE-TABLA-CK-TBCLDIALK
let #Bus_Cli_Exi = 0
let $Cod_Cli_Tot = ' '
begin-select
BETCT.CUST_ID

  let $Cod_Cli_Tot = &BETCT.CUST_ID
  let #Bus_Cli_Exi = 1

FROM PS_CK_TBCLDIALK BETCT
WHERE BETCT.SETID   = $Setid
  AND BETCT.CUST_ID = $Cust_id
end-select
end-procedure   BUSCAR-EXISTE-CLIENTE-TABLA-CK-TBCLDIALK

begin-procedure INSERTAR-CLIENTE-TABLA-CK-TBCLDIALK
show 'entra INSERTAR-CLIENTE-TABLA-CK-TBCLDIALK'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_TBCLDIALK
(SETID,
CUST_ID,
CK_CLDIAL,
CK_MEDIO_CONOCIO,
CK_NO_SOLICITUD_CR,
OPRID,
DATE_LAST_MAINT)
VALUES
($Setid,	         
 $Cust_id,             
 'N',
 $Ind_Med_Com,
 ' ',
 $Oprid,
 $fecha_out)
end-sql
show 'sale INSERTAR-CLIENTE-TABLA-CK-TBCLDIALK'
end-procedure   INSERTAR-CLIENTE-TABLA-CK-TBCLDIALK

begin-procedure ACTUALIZAR-CLIENTE-TABLA-CK-TBCLDIALK
show 'inicia ACTUALIZAR-CLIENTE-TABLA-CK-TBCLDIALK'
begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CK_TBCLDIALK 
SET CK_MEDIO_CONOCIO  = $Ind_Med_Com
where SETID           = $Setid
  and CUST_ID         = $Cust_id
end-sql
show 'sale ACTUALIZAR-CLIENTE-TABLA-CK-TBCLDIALK'
end-procedure   ACTUALIZAR-CLIENTE-TABLA-CK-TBCLDIALK
                   
Begin-procedure VERIFICAR-EXIST-CLIENTE
display 'VERIFICAR-EXIST-CLIENTE'
let $INDCLI = 'N'
let $cust_id = ltrim ($Cust_id,' ')
let $cust-ant = $cust_id
display $cust-ant 
if $Tipo_ident = '1' OR $Tipo_ident = '2' OR $Tipo_ident = '3' OR
   $Tipo_ident = '4' OR $Tipo_ident = '5' OR $Tipo_ident = '6' OR
   $Tipo_ident = '7' OR $Tipo_ident = '8' OR $Tipo_ident = '9' OR
   $Tipo_ident = '0'
   let $Cust_id = $Cust_id || $Tipo_ident
end-if
begin-select
customer.setid,
customer.cust_id

 LET $INDCLI           = 'Y'
 LET $CUSTOMER.SETID   = &CUSTOMER.SETID
 LET $CUSTOMER.CUST_ID = &CUSTOMER.CUST_ID

from ps_customer customer
where customer.setid = $setid
and   customer.cust_id = $cust_id
end-select

display $setid
display $cust_id

display 'cliente existe ' noline
display $INDCLI

let $cust_id = $cust-ant

end-procedure VERIFICAR-EXIST-CLIENTE


!***********************************************************************
! Procedure: VERIFICAR-ERRORES-CLIENTE                                 !
! Descr:     Se valida si el cliente tiene problemas para generar error!
!***********************************************************************
! Created by:  #004 - JCC - CK_CS_AR_JCC_5953						   !
!***********************************************************************
Begin-procedure VERIFICAR-ERRORES-CLIENTE
display 'VERIFICAR-ERRORES-CLIENTE'

Let $ErrorClient = 'N'
Let $TipoError = ' '

if $INDCLI = 'Y'

	!Procesar error por tipo de Identificación Diferente
	Do Buscar_Tipo_Identificacion
	If (NOT isblank($Tipo_Ident_Cliente)) and  $Tipo_ident <> $Tipo_Ident_Cliente
		Let $ErrorClient = 'Y'
		Let $TipoError = '01'
		Do CrearError
	End-If
	
	display $setid
	display $cust_id

End-If

display 'cliente en ERROR ' noline
display $ErrorClient
end-procedure VERIFICAR-ERRORES-CLIENTE


!***********************************************************************
! Procedure: Buscar_Tipo_Identificacion                                !
! Descr:     Se busca el tipo de identificación del cliente            !
!***********************************************************************
! Created by:  #004 - JCC - CK_CS_AR_JCC_5953						   !
!***********************************************************************
Begin-procedure Buscar_Tipo_Identificacion
display 'Buscar_Tipo_Identificacion'

LET $Tipo_Ident_Cliente   = ' '

begin-select
lc_customer.setid,
lc_customer.cust_id,
lc_customer.tipo_identificac

	LET $Tipo_Ident_Cliente   = &lc_customer.tipo_identificac

from PS_LC_CUSTOMER_ID lc_customer
where lc_customer.setid = $setid
and   lc_customer.cust_id = $cust_id
end-select

Show '$Tipo_Ident_Cliente ' $Tipo_Ident_Cliente
end-procedure Buscar_Tipo_Identificacion


!***********************************************************************
! Procedure: CrearError					                               !
! Descr:     Se valida si el cliente tiene problemas para generar error!
!***********************************************************************
! Created by:  #004 - JCC - CK_CS_AR_JCC_5953						   !
!***********************************************************************
Begin-procedure CrearError
display 'CrearError'

Let $FieldNameError = ' '
Let $ActionError	= ' '
Let $OldValue		= ' '
Let $NewValue		= ' '
Let $ObservacionErr = ' '

Evaluate $TipoError

	When = '01'
		Let $FieldNameError = 'TIPO_IDENTIFICAC'
		Let $ActionError	= 'A'
		Let $OldValue		= $Tipo_Ident_Cliente
		Let $NewValue		= $Tipo_ident
		Let $ObservacionErr = 'Error Tipo de Identificación Cliente'
		display $ObservacionErr
		Break
	
End-Evaluate

Begin-SQL
INSERT INTO PS_CK_ERR_INTF_CUS 
(
PROCESS_INSTANCE,
SETID,
CUST_ID,
LINE_SEQ,
CK_ERR_INTF_CUST,
FIELDNAME,
ACTION_CD,
OLDVALUE,
NEWVALUE,
CK_OBSERVACIONES,
FILE_NAME,
PROCESS_DATE,
PROCESS_DTTM,
OPRID,
CONTROL_FLAG
)
VALUES 
(
#prcs_process_instance,
$setid,
$cust_id,
#RowFile,
$TipoError,
$FieldNameError,
$ActionError,
$OldValue,
$NewValue,
$ObservacionErr,
$file_name,
SYSDATE,
SYSDATE,
$oprid,
'N'
)

End-SQL

display 'CREATE ERROR [OK]'
end-procedure CrearError

!*** Inicio 010
!************************************************************************************!
! Rutina para grabar el respectivo log de errores
!************************************************************************************!
begin-procedure Escribir_Plano
  let $Sep_Cam_Pla = ';'
  let $RowFile = to_char(#RowFile)
  let $DescrRowFile = 'Linea ' || $RowFile 
  show ' Escribir_Plano archivo de errores'
  show $Ck_Observaciones
  
  !Inicio 040 SE REALIZA UN ROLLBACK DEL CLIENTE POR TENER ERROR
  If $NoGraba = 'Y'
   begin-sql ON-ERROR=SQL-ERROR
   ROLLBACK
   end-sql
   show 'HIZO ROLLBACK PARA EL CLIENTE ' $cust_id
  End-If 
 !Fin 040
  
  
  write  2  from   $setid
                   $Sep_Cam_Pla
                   $cust_id
                   $Sep_Cam_Pla
                   $DescrRowFile
                   $Sep_Cam_Pla
                   $Ck_Observaciones 
end-procedure Escribir_Plano
!*** Fin 010

begin-procedure VERIFICAR-DATOS-CLIENTES
! Se coloca nueva validacion del numero de identificacion del clientes por tipo de documento
 display 'VALIDAR-CODIGO-CLIENTE'
 do VALIDAR-CODIGO-CLIENTE


 do VERIFICAR-ZONA
 do VERIFICAR-STATE
 do VERIFICAR-CITY
end-procedure   VERIFICAR-DATOS-CLIENTES

!Inicio 032
!*************************************************************************
! Procedure: VALIDAR-CODIGO-CLIENTE                                      !
! Descr:     Se valida el codigo del cliente referenciado por el tipo de !
!            documento!
!***********************************************************************
! Created by:  #032 - GMR - CK_CS_CR_13676_GMR						   !
!***********************************************************************
begin-procedure VALIDAR-CODIGO-CLIENTE  
display 'VALIDAR-CODIGO-CLIENTE'
Let $ErrorClient = 'N'
let $Val_Descripcion = ''

!Inicio 039
begin-select
'X' &defect

	   let #LAddress1 = length($Address1)
    if  #LAddress1 < 9
   		Let $ErrorClient = 'Y'
   		let $Existe-Cart = 'Y'
		let #Secuencia    = #Secuencia + 1
		let #message_seq  = #message_seq + 1   
		let #NbrSet       = 21000
		let #Nbr          = 43
		Let $Val_Descripcion = 'ERROR: EL CAMPO DIRECCION DEBE TENER MAS DE 8 CARACTERES'
		Do  Insertar_Mensaje
 
		let #ParamSecuencia = 1
		let $Parametro      = $cust_id
		Do Insertar_Parametro_mensaje
		let #sw_descuadre   = 1

		let #cnt_error = #cnt_error + 1
		let $Ck_Observaciones = $Val_Descripcion
		!Inicio 040 Se envia  para que no grabe 
        Let $NoGraba = 'Y'
		!Fin 040
		do Escribir_Plano
	else 
		Let $Existe-Cart = 'N'		
    end-if

   !Inicio 040 SE VALIDA EL PRIMER NOMBRE  
   let #LPrimerNombre = length($PrimerNombre)
   if  #LPrimerNombre < 3 AND $TipoPersona <> 'J'
   		Let $ErrorClient = 'Y'
   		let $Existe-Cart = 'Y'
		let #Secuencia    = #Secuencia + 1
		let #message_seq  = #message_seq + 1   
		let #NbrSet       = 21000
		let #Nbr          = 43
		Let $Val_Descripcion = 'ERROR: NO SE PUEDE DEJAR EL PRIMER NOMBRE EN BLANCO'
		Do  Insertar_Mensaje
 
		let #ParamSecuencia = 1
		let $Parametro      = $cust_id
		Do Insertar_Parametro_mensaje
		let #sw_descuadre   = 1

		let #cnt_error = #cnt_error + 1
		let $Ck_Observaciones = $Val_Descripcion
		!Inicio 040 Se envia  para que no grabe 
        Let $NoGraba = 'Y'
		!Fin 040
		do Escribir_Plano
	else 
		Let $Existe-Cart = 'N'		
    end-if

FROM DUAL
end-select

!if $INDCLI = 'N'
begin-select
Validar_CustId.Logica_Validacion($Cust_id,$Tipo_ident) &Validacion,
!040 Trae el Digito Validador del Cust_id 
CK_CALCULA_DIGITO(Substr($cust_id,1,length($cust_id)-1)) &DigitoValidado
!040 Fin 

   let $Val_Descripcion = &Validacion 
   let #Val_Digito      = &DigitoValidado 

	If $Val_Descripcion <> ''
   		Let $ErrorClient = 'Y'
		let $Existe-Cart = 'Y'
		let #Secuencia    = #Secuencia + 1
		let #message_seq  = #message_seq + 1   
		let #NbrSet       = 21000
		let #Nbr          = 43
		Do  Insertar_Mensaje
 
		let #ParamSecuencia = 1
		let $Parametro      = $cust_id
		Do Insertar_Parametro_mensaje
		let #sw_descuadre   = 1

		let #cnt_error = #cnt_error + 1
		let $Ck_Observaciones = $Val_Descripcion
		!Inicio 040 Se envia  para que no grabe 
        Let $NoGraba = 'Y'
  	   !Fin 040
		do Escribir_Plano
	else 
		Let $Existe-Cart = 'N'
	End-if 

   !Inicio 040 SE VALIDA DIGITO DE VERIFICACION      
   if $RequiereDigito = 'Y' 
      if $DigitoVerificacion  <> to_char(#Val_Digito)
   		Let $ErrorClient = 'Y'
   		let $Existe-Cart = 'Y'
		let #Secuencia    = #Secuencia + 1
		let #message_seq  = #message_seq + 1   
		let #NbrSet       = 21000
		let #Nbr          = 43
		Let $Val_Descripcion = 'ERROR: DIGITO DE VERIFICACION ES INCORRECTO'
		Do  Insertar_Mensaje
 
		let #ParamSecuencia = 1
		let $Parametro      = $cust_id
		Do Insertar_Parametro_mensaje
		let #sw_descuadre   = 1

		let #cnt_error = #cnt_error + 1
		let $Ck_Observaciones = $Val_Descripcion
		!Inicio 040 Se envia  para que no grabe 
        Let $NoGraba = 'Y'
		!Fin 040
		do Escribir_Plano
	  else 
		Let $Existe-Cart = 'N'		
      end-if
   end-if

  !Fin 040

FROM DUAL
end-select	

Show  'Cliente ' $cust_id
Show  'Digito validado ' #Val_Digito
Show  'DigitoVerificacion: ' $DigitoVerificacion

!end-if

!Fin 039

end-procedure   VALIDAR-CODIGO-CLIENTE  
!Fin 032

!Inicio 014
!*************************************************************
! Procedimiento: VERIFICAR-NIT-CARAC-ESPE
! Descripció: Identifica si el NIT tiene caracteres especiales
!*************************************************************
begin-procedure VERIFICAR-NIT-CARAC-ESPE

Let $Existe-Cart = 'Y'
!Buscar si el NIT tiene caracteres especiales
find  ' '  in  $Cust_id  0  #ascii0
find  ','  in  $Cust_id  0  #ascii1
find  '#'  in  $Cust_id  0  #ascii2
find  '$'  in  $Cust_id  0  #ascii3
find  '%'  in  $Cust_id  0  #ascii4
find  '&'  in  $Cust_id  0  #ascii5
find  '''' in  $Cust_id  0  #ascii6
find  '('  in  $Cust_id  0  #ascii7
find  ')'  in  $Cust_id  0  #ascii8
find  '*'  in  $Cust_id  0  #ascii9
find  '+'  in  $Cust_id  0  #ascii10
find  ','  in  $Cust_id  0  #ascii11
find  '-'  in  $Cust_id  0  #ascii12
find  '.'  in  $Cust_id  0  #ascii13
find  '/'  in  $Cust_id  0  #ascii14
find  ':'  in  $Cust_id  0  #ascii15
find  ';'  in  $Cust_id  0  #ascii16
find  '<'  in  $Cust_id  0  #ascii17
find  '='  in  $Cust_id  0  #ascii18
find  '>'  in  $Cust_id  0  #ascii19
find  '?'  in  $Cust_id  0  #ascii20
find  '@'  in  $Cust_id  0  #ascii21
find  '['  in  $Cust_id  0  #ascii22
find  '\'  in  $Cust_id  0  #ascii23
find  ']'  in  $Cust_id  0  #ascii24
find  '^'  in  $Cust_id  0  #ascii25
find  '_'  in  $Cust_id  0  #ascii26
find  '`'  in  $Cust_id  0  #ascii27
find  '{'  in  $Cust_id  0  #ascii28
find  '|'  in  $Cust_id  0  #ascii29
find  '}'  in  $Cust_id  0  #ascii30
find  '~'  in  $Cust_id  0  #ascii31
find  'A'  in  $Cust_id  0  #ascii32
find  'B'  in  $Cust_id  0  #ascii33
find  'C'  in  $Cust_id  0  #ascii34
find  'D'  in  $Cust_id  0  #ascii35
find  'E'  in  $Cust_id  0  #ascii36
find  'F'  in  $Cust_id  0  #ascii37
find  'G'  in  $Cust_id  0  #ascii38
find  'H'  in  $Cust_id  0  #ascii39
find  'I'  in  $Cust_id  0  #ascii40
find  'J'  in  $Cust_id  0  #ascii41
find  'K'  in  $Cust_id  0  #ascii42
find  'L'  in  $Cust_id  0  #ascii43
find  'M'  in  $Cust_id  0  #ascii44
find  'N'  in  $Cust_id  0  #ascii45
find  'O'  in  $Cust_id  0  #ascii46
find  'P'  in  $Cust_id  0  #ascii47
find  'Q'  in  $Cust_id  0  #ascii48
find  'R'  in  $Cust_id  0  #ascii49
find  'S'  in  $Cust_id  0  #ascii50
find  'T'  in  $Cust_id  0  #ascii51
find  'U'  in  $Cust_id  0  #ascii52
find  'V'  in  $Cust_id  0  #ascii53
find  'W'  in  $Cust_id  0  #ascii54
find  'X'  in  $Cust_id  0  #ascii55
find  'Y'  in  $Cust_id  0  #ascii56
find  'Z'  in  $Cust_id  0  #ascii57
find  'a'  in  $Cust_id  0  #ascii58
find  'b'  in  $Cust_id  0  #ascii59
find  'c'  in  $Cust_id  0  #ascii60
find  'd'  in  $Cust_id  0  #ascii61
find  'e'  in  $Cust_id  0  #ascii62
find  'f'  in  $Cust_id  0  #ascii63
find  'g'  in  $Cust_id  0  #ascii64
find  'h'  in  $Cust_id  0  #ascii65
find  'i'  in  $Cust_id  0  #ascii66
find  'j'  in  $Cust_id  0  #ascii67
find  'k'  in  $Cust_id  0  #ascii68
find  'l'  in  $Cust_id  0  #ascii69
find  'm'  in  $Cust_id  0  #ascii70
find  'n'  in  $Cust_id  0  #ascii71
find  'o'  in  $Cust_id  0  #ascii72
find  'p'  in  $Cust_id  0  #ascii73
find  'q'  in  $Cust_id  0  #ascii74
find  'r'  in  $Cust_id  0  #ascii75
find  's'  in  $Cust_id  0  #ascii76
find  't'  in  $Cust_id  0  #ascii77
find  'u'  in  $Cust_id  0  #ascii78
find  'v'  in  $Cust_id  0  #ascii79
find  'w'  in  $Cust_id  0  #ascii80
find  'x'  in  $Cust_id  0  #ascii81
find  'y'  in  $Cust_id  0  #ascii82
find  'z'  in  $Cust_id  0  #ascii83
find  ''  in  $Cust_id  0  #ascii84
find  ''  in  $Cust_id  0  #ascii85
find  ''  in  $Cust_id  0  #ascii86
find  ''  in  $Cust_id  0  #ascii87
find  ''  in  $Cust_id  0  #ascii88
find  ''  in  $Cust_id  0  #ascii89
find  ''  in  $Cust_id  0  #ascii90
find  ''  in  $Cust_id  0  #ascii91
find  ''  in  $Cust_id  0  #ascii92
find  ''  in  $Cust_id  0  #ascii93
find  ''  in  $Cust_id  0  #ascii94
find  ''  in  $Cust_id  0  #ascii95
find  ''  in  $Cust_id  0  #ascii96
find  ''  in  $Cust_id  0  #ascii97
find  ''  in  $Cust_id  0  #ascii98
find  ''  in  $Cust_id  0  #ascii99
find  ''  in  $Cust_id  0  #ascii100
find  ''  in  $Cust_id  0  #ascii101
find  ''  in  $Cust_id  0  #ascii102
find  ''  in  $Cust_id  0  #ascii103
find  ''  in  $Cust_id  0  #ascii104
find  ''  in  $Cust_id  0  #ascii105
find  ''  in  $Cust_id  0  #ascii106
find  ''  in  $Cust_id  0  #ascii107
find  ''  in  $Cust_id  0  #ascii108
find  ''  in  $Cust_id  0  #ascii109
find  ''  in  $Cust_id  0  #ascii110
find  '¡'  in  $Cust_id  0  #ascii111
find  '¢'  in  $Cust_id  0  #ascii112
find  '£'  in  $Cust_id  0  #ascii113
find  '¤'  in  $Cust_id  0  #ascii114
find  '¥'  in  $Cust_id  0  #ascii115
find  '¦'  in  $Cust_id  0  #ascii116
find  '§'  in  $Cust_id  0  #ascii117
find  '¨'  in  $Cust_id  0  #ascii118
find  '©'  in  $Cust_id  0  #ascii119
find  'ª'  in  $Cust_id  0  #ascii120
find  '«'  in  $Cust_id  0  #ascii121
find  '¬'  in  $Cust_id  0  #ascii122
find  '®'  in  $Cust_id  0  #ascii123
find  '¯'  in  $Cust_id  0  #ascii124
find  '°'  in  $Cust_id  0  #ascii125
find  '±'  in  $Cust_id  0  #ascii126
find  '²'  in  $Cust_id  0  #ascii127
find  '³'  in  $Cust_id  0  #ascii128
find  '´'  in  $Cust_id  0  #ascii129
find  'µ'  in  $Cust_id  0  #ascii130
find  '¶'  in  $Cust_id  0  #ascii131
find  '·'  in  $Cust_id  0  #ascii132
find  '¸'  in  $Cust_id  0  #ascii133
find  '¹'  in  $Cust_id  0  #ascii134
find  'º'  in  $Cust_id  0  #ascii135
find  '»'  in  $Cust_id  0  #ascii136
find  '¼'  in  $Cust_id  0  #ascii137
find  '½'  in  $Cust_id  0  #ascii138
find  '¾'  in  $Cust_id  0  #ascii139
find  '¿'  in  $Cust_id  0  #ascii140
find  'À'  in  $Cust_id  0  #ascii141
find  'Á'  in  $Cust_id  0  #ascii142
find  'Â'  in  $Cust_id  0  #ascii143
find  'Ã'  in  $Cust_id  0  #ascii144
find  'Ä'  in  $Cust_id  0  #ascii145
find  'Å'  in  $Cust_id  0  #ascii146
find  'Æ'  in  $Cust_id  0  #ascii147
find  'Ç'  in  $Cust_id  0  #ascii148
find  'È'  in  $Cust_id  0  #ascii149
find  'É'  in  $Cust_id  0  #ascii150
find  'Ê'  in  $Cust_id  0  #ascii151
find  'Ë'  in  $Cust_id  0  #ascii152
find  'Ì'  in  $Cust_id  0  #ascii153
find  'Í'  in  $Cust_id  0  #ascii154
find  'Î'  in  $Cust_id  0  #ascii155
find  'Ï'  in  $Cust_id  0  #ascii156
find  'Ð'  in  $Cust_id  0  #ascii157
find  'Ñ'  in  $Cust_id  0  #ascii158
find  'Ò'  in  $Cust_id  0  #ascii159
find  'Ó'  in  $Cust_id  0  #ascii160
find  'Ô'  in  $Cust_id  0  #ascii161
find  'Õ'  in  $Cust_id  0  #ascii162
find  'Ö'  in  $Cust_id  0  #ascii163
find  '×'  in  $Cust_id  0  #ascii164
find  'Ø'  in  $Cust_id  0  #ascii165
find  'Ù'  in  $Cust_id  0  #ascii166
find  'Ú'  in  $Cust_id  0  #ascii167
find  'Û'  in  $Cust_id  0  #ascii168
find  'Ü'  in  $Cust_id  0  #ascii169
find  'Ý'  in  $Cust_id  0  #ascii170
find  'Þ'  in  $Cust_id  0  #ascii171
find  'ß'  in  $Cust_id  0  #ascii172
find  'à'  in  $Cust_id  0  #ascii173
find  'á'  in  $Cust_id  0  #ascii174
find  'â'  in  $Cust_id  0  #ascii175
find  'ã'  in  $Cust_id  0  #ascii176
find  'ä'  in  $Cust_id  0  #ascii177
find  'å'  in  $Cust_id  0  #ascii178
find  'æ'  in  $Cust_id  0  #ascii179
find  'ç'  in  $Cust_id  0  #ascii180
find  'è'  in  $Cust_id  0  #ascii181
find  'é'  in  $Cust_id  0  #ascii182
find  'ê'  in  $Cust_id  0  #ascii183
find  'ë'  in  $Cust_id  0  #ascii184
find  'ì'  in  $Cust_id  0  #ascii185
find  'í'  in  $Cust_id  0  #ascii186
find  'î'  in  $Cust_id  0  #ascii187
find  'ï'  in  $Cust_id  0  #ascii188
find  'ð'  in  $Cust_id  0  #ascii189
find  'ñ'  in  $Cust_id  0  #ascii190
find  'ò'  in  $Cust_id  0  #ascii191
find  'ó'  in  $Cust_id  0  #ascii192
find  'ô'  in  $Cust_id  0  #ascii193
find  'õ'  in  $Cust_id  0  #ascii194
find  'ö'  in  $Cust_id  0  #ascii195
find  '÷'  in  $Cust_id  0  #ascii196
find  'ø'  in  $Cust_id  0  #ascii197
find  'ù'  in  $Cust_id  0  #ascii198
find  'ú'  in  $Cust_id  0  #ascii199
find  'û'  in  $Cust_id  0  #ascii200
find  'ü'  in  $Cust_id  0  #ascii201
find  'ý'  in  $Cust_id  0  #ascii202
find  'þ'  in  $Cust_id  0  #ascii203
find  'ÿ'  in  $Cust_id  0  #ascii204




IF #ascii0 = -1
	AND #ascii1 = -1
	AND #ascii2 = -1
	AND #ascii3 = -1
	AND #ascii4 = -1
	AND #ascii5 = -1
	AND #ascii6 = -1
	AND #ascii7 = -1
	AND #ascii8 = -1
	AND #ascii9 = -1
	AND #ascii10 = -1
	AND #ascii11 = -1
	AND #ascii12 = -1
	AND #ascii13 = -1
	AND #ascii14 = -1
	AND #ascii15 = -1
	AND #ascii16 = -1
	AND #ascii17 = -1
	AND #ascii18 = -1
	AND #ascii19 = -1
	AND #ascii20 = -1
	AND #ascii21 = -1
	AND #ascii22 = -1
	AND #ascii23 = -1
	AND #ascii24 = -1
	AND #ascii25 = -1
	AND #ascii26 = -1
	AND #ascii27 = -1
	AND #ascii28 = -1
	AND #ascii29 = -1
	AND #ascii30 = -1
	AND #ascii31 = -1
	AND #ascii32 = -1
	AND #ascii33 = -1
	AND #ascii34 = -1
	AND #ascii35 = -1
	AND #ascii36 = -1
	AND #ascii37 = -1
	AND #ascii38 = -1
	AND #ascii39 = -1
	AND #ascii40 = -1
	AND #ascii41 = -1
	AND #ascii42 = -1
	AND #ascii43 = -1
	AND #ascii44 = -1
	AND #ascii45 = -1
	AND #ascii46 = -1
	AND #ascii47 = -1
	AND #ascii48 = -1
	AND #ascii49 = -1
	AND #ascii50 = -1
	AND #ascii51 = -1
	AND #ascii52 = -1
	AND #ascii53 = -1
	AND #ascii54 = -1
	AND #ascii55 = -1
	AND #ascii56 = -1
	AND #ascii57 = -1
	AND #ascii58 = -1
	AND #ascii59 = -1
	AND #ascii60 = -1
	AND #ascii61 = -1
	AND #ascii62 = -1
	AND #ascii63 = -1
	AND #ascii64 = -1
	AND #ascii65 = -1
	AND #ascii66 = -1
	AND #ascii67 = -1
	AND #ascii68 = -1
	AND #ascii69 = -1
	AND #ascii70 = -1
	AND #ascii71 = -1
	AND #ascii72 = -1
	AND #ascii73 = -1
	AND #ascii74 = -1
	AND #ascii75 = -1
	AND #ascii76 = -1
	AND #ascii77 = -1
	AND #ascii78 = -1
	AND #ascii79 = -1
	AND #ascii80 = -1
	AND #ascii81 = -1
	AND #ascii82 = -1
	AND #ascii83 = -1
	AND #ascii84 = -1
	AND #ascii85 = -1
	AND #ascii86 = -1
	AND #ascii87 = -1
	AND #ascii88 = -1
	AND #ascii89 = -1
	AND #ascii90 = -1
	AND #ascii91 = -1
	AND #ascii92 = -1
	AND #ascii93 = -1

IF #ascii94 = -1
	AND #ascii95 = -1
	AND #ascii96 = -1
	AND #ascii97 = -1
	AND #ascii98 = -1
	AND #ascii99 = -1
	AND #ascii100 = -1
	AND #ascii101 = -1
	AND #ascii102 = -1
	AND #ascii103 = -1
	AND #ascii104 = -1
	AND #ascii105 = -1
	AND #ascii106 = -1
	AND #ascii107 = -1
	AND #ascii108 = -1
	AND #ascii109 = -1
	AND #ascii110 = -1
	AND #ascii111 = -1
	AND #ascii112 = -1
	AND #ascii113 = -1
	AND #ascii114 = -1
	AND #ascii115 = -1
	AND #ascii116 = -1
	AND #ascii117 = -1
	AND #ascii118 = -1
	AND #ascii119 = -1
	AND #ascii120 = -1
	AND #ascii121 = -1
	AND #ascii122 = -1
	AND #ascii123 = -1
	AND #ascii124 = -1
	AND #ascii125 = -1
	AND #ascii126 = -1
	AND #ascii127 = -1
	AND #ascii128 = -1
	AND #ascii129 = -1
	AND #ascii130 = -1
	AND #ascii131 = -1
	AND #ascii132 = -1
	AND #ascii133 = -1
	AND #ascii134 = -1
	AND #ascii135 = -1
	AND #ascii136 = -1
	AND #ascii137 = -1
	AND #ascii138 = -1
	AND #ascii139 = -1
	AND #ascii140 = -1
	AND #ascii141 = -1
	AND #ascii142 = -1
	AND #ascii143 = -1
	AND #ascii144 = -1
	AND #ascii145 = -1
	AND #ascii146 = -1
	AND #ascii147 = -1
	AND #ascii148 = -1
	AND #ascii149 = -1
	AND #ascii150 = -1
	AND #ascii151 = -1
	AND #ascii152 = -1
	AND #ascii153 = -1
	AND #ascii154 = -1
	AND #ascii155 = -1
	AND #ascii156 = -1
	AND #ascii157 = -1
	AND #ascii158 = -1
	AND #ascii159 = -1
	AND #ascii160 = -1
	AND #ascii161 = -1
	AND #ascii162 = -1
	AND #ascii163 = -1
	AND #ascii164 = -1
	AND #ascii165 = -1
	AND #ascii166 = -1
	AND #ascii167 = -1
	AND #ascii168 = -1
	AND #ascii169 = -1
	AND #ascii170 = -1
	AND #ascii171 = -1
	AND #ascii172 = -1
	AND #ascii173 = -1
	AND #ascii174 = -1
	AND #ascii175 = -1
	AND #ascii176 = -1
	AND #ascii177 = -1
	AND #ascii178 = -1
	AND #ascii179 = -1
	AND #ascii180 = -1
	AND #ascii181 = -1
	AND #ascii182 = -1
	AND #ascii183 = -1
	AND #ascii184 = -1
	AND #ascii185 = -1
	AND #ascii186 = -1
	AND #ascii187 = -1
	AND #ascii188 = -1
	AND #ascii189 = -1
	AND #ascii190 = -1
	AND #ascii191 = -1
	AND #ascii192 = -1
	AND #ascii193 = -1
	AND #ascii194 = -1
	AND #ascii195 = -1
	AND #ascii196 = -1
	AND #ascii197 = -1
	AND #ascii198 = -1
	AND #ascii199 = -1
	AND #ascii200 = -1
	AND #ascii201 = -1
	AND #ascii202 = -1
	AND #ascii203 = -1
        AND #ascii204 = -1
		
 Let $Existe-Cart = 'N'

END-IF


END-IF



If $Existe-Cart = 'Y'
 let #Secuencia    = #Secuencia + 1
 let #message_seq  = #message_seq + 1   
 let #NbrSet       = 21000
 let #Nbr          = 43
 Do  Insertar_Mensaje
 
 let #ParamSecuencia = 1
 let $Parametro      = $cust_id
 Do Insertar_Parametro_mensaje
 let #sw_descuadre   = 1

 show '* * Cliente no se creo porque el NIT tiene caracteres especiales: * *' $Cust_id
 let #cnt_error = #cnt_error + 1
 let $Ck_Observaciones = 'El NIT del cliente tiene caracteres especiales'
 	!Inicio 040 Se envia  para que no grabe 
        Let $NoGraba = 'Y'
	!Fin 040
 do Escribir_Plano

End-if

end-procedure 
!Fin 014
!*************************************************************

begin-procedure VERIFICAR-ZONA
let $ind_zona = 'N'
begin-select
'X'
  let $ind_zona = 'Y'

from ps_ck_team_ac_vw ckteam
where ckteam.setid = $setid
  and ckteam.support_team_cd = $Subcust_qual1
end-select
If $ind_zona = 'N'
  
   let #Secuencia    = #Secuencia + 1
   let #message_seq  = #message_seq + 1   
   let #NbrSet       = 21000
   let #Nbr          = 10
   Do  Insertar_Mensaje
              
   let #ParamSecuencia = 1
   let $Parametro      = $Subcust_qual1
   Do Insertar_Parametro_mensaje
   
   let #ParamSecuencia = 2
   let $Parametro      = $cust_id
   Do Insertar_Parametro_mensaje
             
  let #sw_descuadre   = 1
end-if 
end-procedure VERIFICAR-ZONA

begin-procedure VERIFICAR-STATE
show ' entro  VERIFICAR-STATE '
show ' $state ' $state
let $ind_state = 'N'
begin-select
'Y' 
  let $ind_state = 'Y'

from ps_state_tbl state
where state.country = 'COL'
  and state.state   = $state
end-select
show ' salio  VERIFICAR-STATE '
show ' $ind_state ' $ind_state
If $ind_state = 'N'
  
   let #Secuencia    = #Secuencia + 1
   let #message_seq  = #message_seq + 1   
   let #NbrSet       = 21000
   let #Nbr          = 11
   Do  Insertar_Mensaje
              
   let #ParamSecuencia = 1
   let $Parametro      = $state
   Do Insertar_Parametro_mensaje
   
   let #ParamSecuencia = 2
   let $Parametro      = $cust_id
   Do Insertar_Parametro_mensaje
             
  let #sw_descuadre   = 1
end-if   
end-procedure VERIFICAR-STATE

begin-procedure VERIFICAR-CITY
let $ind_city = 'N'
show ' $city ' $city

begin-select
'Z'
 let $ind_city = 'Y'

from ps_muni_tbl_ho  muni
where muni.muni_fld_ho = $city
end-select
If $ind_city = 'N'
  
   let #Secuencia    = #Secuencia + 1
   let #message_seq  = #message_seq + 1   
   let #NbrSet       = 21000
   let #Nbr          = 12
   Do  Insertar_Mensaje
              
   let #ParamSecuencia = 1
   let $Parametro      = $city
   Do Insertar_Parametro_mensaje
   
   let #ParamSecuencia = 2
   let $Parametro      = $cust_id
   Do Insertar_Parametro_mensaje
             
  let #sw_descuadre   = 1
end-if   
end-procedure VERIFICAR-CITY

! Inicio 005 - MV - 04/03/2011
begin-procedure VERIFICAR-COUNTY
SHOW ' ENTRO VERIFICAR-COUNTY '
let $ind_county = 'N'
let $ind_barrio = 'N'
show ' $city   ' $city
show ' $barrio ' $barrio
begin-select 
barrio.ck_barrio

  let $ind_county = 'Y'
  let $ind_barrio = 'Y'
  !let $barrio = &barrio.ck_barrio

from ps_ck_barrio_tbl barrio
where barrio.muni_fld_ho = $city
  and barrio.ck_barrio   = $barrio
  and eff_status         = 'A'
end-select

SHOW ' $ind_county ' $ind_county
SHOW ' $ind_county ' $ind_barrio
SHOW ' SALIO VERIFICAR-COUNTY '
end-procedure VERIFICAR-COUNTY
! Fin 005 - MV - 04/03/2011

begin-procedure VERIFICAR-BARRIO99
display $barrio
let $ind_barrio = 'N'
begin-select ON-ERROR = SQL-error 
bar.ck_barrio

   let $ind_barrio = 'Y'
   
from ps_ck_barrio_tbl bar
where bar.muni_fld_ho = $city
and bar.ck_barrio   = $barrio
end-select	
end-procedure VERIFICAR-BARRIO99

!-------------------------------------------------------------------
! Actualizacion del Barrio
!-------------------------------------------------------------------
begin-procedure Actualizar_barrio   !Modif JJRC abril 28/04    

begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CK_BARRIO_TBL

SET ck_barrio = $barrio

where muni_fld_ho = $city
  and ck_barrio   = $barrio
end-sql
end-procedure 

!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CUSTOMER
!-----------------------------------------------------------------------
Begin-procedure INSERTAR-DATOS-CLIENTES
display 'INSERTAR-DATOS-CLIENTES'
let $Vlr_Num_Seq        = ' '
let $Setid	        = ltrim ($Setid,' ')			
let $Cust_id	   	= ltrim ($Cust_id,' ')		
let $Tipo_ident	   	= ltrim ($Tipo_ident,' ')		
let $Cust_status	= ltrim ($Cust_status,' ')		
let $fecha_out	        = ltrim ($fecha_out,' ')		
let $Name1		= ltrim ($Name1,' ')			
let $Name_Short	        = ltrim ($Name_Short,' ')		
let $Subcust_qual1	= ltrim ($Subcust_qual1,' ')	
let $address_seq_num    = ltrim ($address_seq_num,' ')        
let $State		= ltrim ($State,' ')			
let $City		= ltrim ($City,' ')			
let $County		= ltrim ($County,' ')			
let $Address1    	= ltrim ($Address1,' ')		
let $Phone		= ltrim ($Phone,' ')			
let $Fax		= ltrim ($Fax,' ')	
If $Tipo_ident = '1' OR $Tipo_ident = '2' OR $Tipo_ident = '3' OR
   $Tipo_ident = '4' OR $Tipo_ident = '5' OR $Tipo_ident = '6' OR
   $Tipo_ident = '7' OR $Tipo_ident = '8' OR $Tipo_ident = '9' OR
   $Tipo_ident = '0'
   Let $Cust_id = $Cust_id || $Tipo_ident
   Let $Tipo_ident = 'N'
End-If
If $Address2 = ''
   Let $Address2 = ' '
End-If
do BUSCAR-DATOS-ZONA

if $Ind_Dir_Des = 'Y'
   let $Vlr_Num_Seq = $address_seq_num
else
   let $Vlr_Num_Seq = '1'
end-if
SHOW ' $Cust_id     ' $Cust_id
SHOW ' $Vlr_Num_Seq ' $Vlr_Num_Seq
SHOW '$fecha_out' $fecha_out
show '$Setid:' $Setid
Show '$Name1: ' $Name1
Show '$Cust_status: ' $Cust_status
Show '$Canal: ' $Canal
Show '$Name_Short: '  $Name_Short 
Show '$address_seq_num: ' $address_seq_num
Show '$Subcust_qual1: ' $Subcust_qual1
Show '$City: ' $City
Show '$Vlr_Num_Seq: ' $Vlr_Num_Seq
Show '$oprid:' $oprid

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUSTOMER
(SETID,                          
CUST_ID,                        
NAME1,                          
CNTCT_SEQ_NUM,                  
CUST_STATUS,                    
CUST_STATUS_DT,                 
NAMESHORT,                      
CUSTOMER_TYPE,                  
SINCE_DT,                       
ADD_DT,                         
NAME2,                          
NAME3,                          
NAME1_AC,                       
NAME2_AC,                       
NAME3_AC,                       
ADDRESS_SEQ_NUM,                
CORPORATE_SETID,                
CORPORATE_CUST_ID,              
REMIT_FROM_SETID,               
REMIT_FROM_CUST_ID,             
CRSPD_SETID,                    
CRSPD_CUST_ID,                  
CONSOL_BUS_UNIT,                
VENDOR_SETID,                   
VENDOR_ID,                      
REFER_TO_SETID,                 
REFER_TO_CUST_ID,               
REVIEW_DAYS,                    
FORMER_NAME_1,                  
FORMER_NAME_2,                  
SUBCUST_USE,                    
SUBCUST_QUAL1,                  
SUBCUST_QUAL2,                  
CUR_RT_TYPE,                   
CURRENCY_CD,                    
SHIP_TO_FLG,                    
BILL_TO_FLG,                    
SOLD_TO_FLG,                    
BROKER_FLG,                     
INDIRECT_CUST_FLG,              
CUST_LEVEL,                     
ADDRESS_SEQ_SOLD,               
CNTCT_SEQ_SOLD,                 
ADDRESS_SEQ_SHIP,               
CNTCT_SEQ_SHIP,                 
ADDRESS_SEQ_BRK,                
ADDRESS_SEQ_IND,                
HOLD_UPDATE_SW,                 
ROLEUSER,                       
TAXPAYER_ID,                    
WEB_URL,                        
STOCK_SYMBOL,                   
REPORTS_TO_SPONSOR,             
SPNSR_LEVEL,                    
SPNSR_TYPE,                     
SPNSR_PROGRAM,                  
COST_LIV_INCR_PCT,              
CFDA_NBR,                       
FOREIGN_FLAG,                   
GM_FEDERAL_FLAG,                
US_FLAG_CARRIER,                
LOC_INDICATOR,                  
GM_LOC_SPONSOR_ID,              
FA_SPNSR_BASE_ID,               
GM_DEL_LOC_REFS_SW,             
GRANTS_SPONSOR_FLG,             
FEDERAL_INDICATOR,              
TRADING_PARTNER,                
IPAC_INTERFACE,                 
CNTCT_SEQ_IPAC,                 
CUSTOMER_ALC,                   
CUST_FIELD_C1_A,                
CUST_FIELD_C1_B,                
CUST_FIELD_C1_C,                
CUST_FIELD_C1_D,                
CUST_FIELD_C2,                  
CUST_FIELD_C4,                  
CUST_FIELD_C6,                  
CUST_FIELD_C8,                  
CUST_FIELD_C10_A,               
CUST_FIELD_C10_B,               
CUST_FIELD_C10_C,               
CUST_FIELD_C10_D,               
CUST_FIELD_C30_A,               
CUST_FIELD_C30_B,               
CUST_FIELD_C30_C,               
CUST_FIELD_C30_D,               
CUST_FIELD_N12_A,               
CUST_FIELD_N12_B,               
CUST_FIELD_N12_C,               
CUST_FIELD_N12_D,               
CUST_FIELD_N15_A,               
CUST_FIELD_N15_B,               
CUST_FIELD_N15_C,               
CUST_FIELD_N15_D,               
LAST_MAINT_OPRID,               
DATE_LAST_MAINT,
STCUST_DAYS,                    
EXPIRATION_DATE,                
TEMPLATE_ADDR,                  
SPNSR_SALARY_CAP)
VALUES
($Setid,            
$Cust_id,
initcap($Name1),
1,
$Cust_status, 
TO_DATE($fecha_out,'DD-MM-YYYY'),
INITCAP($Name_Short),  
$Canal,
TO_DATE($fecha_out,'DD-MM-YYYY'),         
TO_DATE($fecha_out,'DD-MM-YYYY'),            
' ',
' ',            
' ',            
' ',           
' ',            
$address_seq_num, !ADDRESS_SEQ_NUM
$Setid,
$Cust_id,
$Setid,
$Cust_id,
$Setid,
$Cust_id,  
' ',
' ',
' ',
' ',
' ',
0,
' ',    
' ',
'Y',   !**   Este Campo de ir en Y
$Subcust_qual1,    
$City, 
'TRM',
'COP',
'Y',
'Y',
'Y',
'N',
'N',
'N',       
1,
0,    
$Vlr_Num_Seq,! ANTES HABIA EL NUMERO * * 1 * *
0,
0,
0,
'N',    
' ',        
' ',       
nvl($CorreoN, ' '),
' ',
' ',
' ',
' ',
' ',
0,
0,
'N',
'N',
'N',
'N',
' ',
' ',
' ',
' ',
'N',
' ',
'N',
0,
' ',
' ',
' ',
' ',
' ',
' ',
' ',
$busUnit,
' ',
' ',
' ',
' ',
' ',
' ',
' ',
' ',
' ',
0,
0,
0,
0,
0,
0,
0,
0,
$oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
0,  
NULL, 
0,            !'N'  ANTES TENIA ESTO
0)        !0    ANTES TENIA ESTO
end-sql

if $Setid = 'DISTR'
	do FLAG-CLIENTE-INTERNET
end-if
end-procedure INSERTAR-DATOS-CLIENTES

!Inicio 035
!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CK_LC_CUST_TAX2
!-----------------------------------------------------------------------
Begin-procedure INSERTAR-REGIMEN-CLIENTE
begin-sql
INSERT INTO PS_CK_LC_CUST_TAX2
(SETID,
CUST_ID,
EFFDT,
CK_CODIGO) 
VALUES 
($Setid,            
$Cust_id,
TO_DATE($fecha_out,'DD-MM-YYYY'),
$Str_Regimen)
end-sql
end-procedure INSERTAR-REGIMEN-CLIENTE

!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CK_LC_CUST_TAXT
!-----------------------------------------------------------------------
Begin-procedure INSERTAR-RESPONSABILIDAD-CLIENTE
begin-sql
INSERT INTO PS_CK_LC_CUST_TAXT
(SETID,
CUST_ID,
EFFDT,
CK_CODIGO) 
VALUES 
($Setid,            
$Cust_id,
TO_DATE($fecha_out,'DD-MM-YYYY'),
$Str_ResponsabilidadLn)
end-sql
end-procedure INSERTAR-RESPONSABILIDAD-CLIENTE

!Inicio 036
!-----------------------------------------------------------------------
! Valida información ingresada del cliente para facturación electrónica
!-----------------------------------------------------------------------
Begin-procedure VALIDA-INFO-FACT-ELEC

Let #Len_Email = length($Str_Emailid)
find  '@'  in  $Str_Emailid  2  #Pos_Email
let $thisEmail = substr($Str_Emailid, #Pos_Email + 1, #Len_Email)
find  '.'  in  $thisEmail  2  #Pos_thisEmail
	If #Pos_Email >= 1 And #Pos_thisEmail >= 1
		!Email OK
	else
		Show 'El valor enviado para Email '  $Str_Emailid ' de facturación electrónica no es correcto, se asigna marcación como N/A '
		let $Str_Emailid = ''
		let $Str_Custo_Fact_Elect = 'N/A'
	End-If
	
    If $Str_Custo_Fact_Elect <> 'ECE' and $Str_Custo_Fact_Elect <> 'RES' and $Str_Custo_Fact_Elect <> 'N/A'
        let $Str_Custo_Fact_Elect = 'N/A'
        Show 'El valor enviado para la marcación de facturación electrónica no es el correcto, se asigna ' $Str_Custo_Fact_Elect
        let $Ck_Observaciones = 'El valor enviado para la marcación de facturación electrónica no es el correcto, se asigna: ' || $Str_Custo_Fact_Elect
        do Escribir_Plano
    else
        If $Str_Emailid = ''
            let $Str_Custo_Fact_Elect = 'N/A'
            Show 'Se asigna el valor por defecto ' $Str_Custo_Fact_Elect ' de Marcación FE, debido a que no envía Email de FE'
            let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_Custo_Fact_Elect || ' de Marcación FE, debido a que no envía Email de FE'
            do Escribir_Plano
		else
			If  $Str_Custo_Fact_Elect = 'N/A'
				let $Str_Custo_Fact_Elect = 'ECE'
				Show 'Se asigna el valor ECE de Marcación FE, debido a que envía Email de FE'
				let $Ck_Observaciones = 'Se asigna el valor ECE de Marcación FE, debido a que envía Email de FE'
				do Escribir_Plano
			End-If
        End-If
    End-If
  
    If $Str_Custo_Fact_Elect = ''
        let $Str_Custo_Fact_Elect = 'N/A'
        If $TipoPersona = 'J'
            Show 'Se asigna el valor por defecto ' $Str_Custo_Fact_Elect ' de Marcación FE'
            let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_Custo_Fact_Elect || ' de Marcación FE'
            do Escribir_Plano
        End-If
    End-If

    If $Str_Regimen = ''
        do CONSULTA-REGIMEN
        If $TipoPersona = 'J'
            let $Str_Regimen = $REGJUR
            Show 'Se asigna el valor por defecto ' $Str_Regimen ' de Régimen'
            let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_Regimen || ' de Régimen'
            do Escribir_Plano
        else
            let $Str_Regimen = $REGNAC
        End-If
        do INSERTAR-REGIMEN-CLIENTE
    Else
    Show 'Régimen enviado ' $Str_Regimen
        do VALIDA-REGIMEN
        If isblank($Str_Regimen_Exist)
            Show 'El valor de Régimen enviado ' $Str_Regimen ' No es un valor valido'
            let $Ck_Observaciones = 'El valor de Régimen enviado ' || $Str_Regimen || ' No es un valor valido'
            do Escribir_Plano
            do CONSULTA-REGIMEN
            If $TipoPersona = 'J'
                let $Str_Regimen = $REGJUR
                Show 'Se asigna el valor por defecto ' $Str_Regimen ' de Régimen'
                let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_Regimen || ' de Régimen'
                do Escribir_Plano
            else
                let $Str_Regimen = $REGNAC
            End-If
        End-If
        do INSERTAR-REGIMEN-CLIENTE
    End-If

    do CONSULTA-RESPONSABILIDAD

    If $TipoPersona = 'J'
        let $Str_ResponsabilidadJur = $RESJUR
    else
        let $Str_ResponsabilidadNac = $RESNAC
    End-If

    If $Str_Responsabilidad = ''
        If $TipoPersona = 'J'
            let $Str_ResponsabilidadLn = $Str_ResponsabilidadJur
            Show 'Se asigna el valor por defecto ' $Str_ResponsabilidadLn ' como responsabilidad'
            let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_ResponsabilidadLn || ' como responsabilidad'
            do Escribir_Plano
        else
            let $Str_ResponsabilidadLn = $Str_ResponsabilidadNac
        End-If
        do INSERTAR-RESPONSABILIDAD-CLIENTE
    Else
        let #start_pos = 1
        Let $Str_ExisteRes = ' '
        Let $Str_InsertaVlorDfto = 'N'
        Let #cantidad = length($Str_Responsabilidad)
        while   #start_pos < length($Str_Responsabilidad)
                find  ';'  in  $Str_Responsabilidad  #start_pos  #pos_sep
                If #pos_sep = -1 
                    let #pos_sep = 0
                End-If
                If #pos_sep = 0 
                    If #start_pos = 1
                    let $valor_campo = substr($Str_Responsabilidad, #start_pos, length($Str_Responsabilidad))
                    Else
                        let $valor_campo = substr($Str_Responsabilidad, #start_pos + 1, length($Str_Responsabilidad))
                    End-If
                    let $Str_ResponsabilidadLn = $valor_campo
                    show '$Str_ResponsabilidadLn1 ' $Str_ResponsabilidadLn
                    let $Str_ResponsabilidadLn_Exis = ''
                    do VALIDA-RESPONSABILIDAD
                        If IsBlank($Str_ResponsabilidadLn_Exis)
                            Show 'El valor de Responsabilidad enviado ' $Str_ResponsabilidadLn ' No es un valor valido'
                            let $Ck_Observaciones = 'El valor de Responsabilidad enviado ' || $Str_ResponsabilidadLn || ' No es un valor valido'
                            do Escribir_Plano
                            Let $Str_InsertaVlorDfto = 'Y'
                        Else
                            If $TipoPersona = 'J'
                                If $Str_ResponsabilidadLn = $Str_ResponsabilidadJur
                                    Let $Str_InsertaVlorDfto = 'Y'
                                Else
                                    do INSERTAR-RESPONSABILIDAD-CLIENTE
                                End-if
                            else
                                If $Str_ResponsabilidadLn = $Str_ResponsabilidadNac
                                    Let $Str_InsertaVlorDfto = 'Y'
                                Else
                                    do INSERTAR-RESPONSABILIDAD-CLIENTE
                                End-if
                            End-If
                        End-If
                    let #start_pos = length($Str_Responsabilidad)
                Else
                    let #cant = #pos_sep - #start_pos
                    If #start_pos = 1
                        let $valor_campo = substr($Str_Responsabilidad, #start_pos, #pos_sep)
                    Else
                        let $valor_campo = substr($Str_Responsabilidad, #start_pos + 1, #cant)
                    End-If
                    let $Str_ResponsabilidadLn = $valor_campo
                    let $Str_ResponsabilidadLn_Exis = ''
                    do VALIDA-RESPONSABILIDAD
                    Show 'El valor de Responsabilidad enviado es ' $Str_ResponsabilidadLn
                    If IsBlank($Str_ResponsabilidadLn_Exis)
                        Show 'El valor de Responsabilidad enviado ' $Str_ResponsabilidadLn ' No es un valor valido'
                        let $Ck_Observaciones = 'El valor de Responsabilidad enviado ' || $Str_ResponsabilidadLn || ' No es un valor valido'
                        do Escribir_Plano
                    Else
                        If $TipoPersona = 'J'
                            If $Str_ResponsabilidadLn = $Str_ResponsabilidadJur
                                Let $Str_InsertaVlorDfto = 'Y'
                            Else
                                do INSERTAR-RESPONSABILIDAD-CLIENTE
                            End-if
                        else
                            If $Str_ResponsabilidadLn = $Str_ResponsabilidadNac
                                Let $Str_InsertaVlorDfto = 'Y'
                            Else
                                do INSERTAR-RESPONSABILIDAD-CLIENTE
                            End-if
                        End-If
                    End-If
                    let #start_pos = #pos_sep + 1
                End-If
        end-while
        If $Str_InsertaVlorDfto = 'Y'
            If $TipoPersona = 'J'
                let $Str_ResponsabilidadLn = $Str_ResponsabilidadJur
                Show 'Se asigna el valor por defecto ' $Str_ResponsabilidadLn ' como responsabilidad'
                let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_ResponsabilidadLn || ' como responsabilidad'
                do Escribir_Plano
            else
                let $Str_ResponsabilidadLn = $Str_ResponsabilidadNac
            End-If
            do INSERTAR-RESPONSABILIDAD-CLIENTE
        End-If
    End-If

    If $Str_Contact_Name = ''
        If $TipoPersona = 'J'
            let $Str_Contact_Name = $Name1
            Show 'Se asigna el valor por defecto ' $Str_Contact_Name ' de Contacto para FE'
            let $Ck_Observaciones = 'Se asigna el valor por defecto ' || $Str_Contact_Name || ' de Contacto para FE'
            do Escribir_Plano
        Else
            let $Str_Contact_Name = $PrimerNombre || ' ' || $SegundoNombre || ' ' || $PrimerApellido || ' ' || $SegundoApellido
        End-If
    End-If

end-procedure VALIDA-INFO-FACT-ELEC


Begin-procedure CONSULTA-REGIMEN

begin-select 
REGN.CK_CODIGO

    let $REGNAC = &REGN.CK_CODIGO

  FROM PS_CK_LNFE_RGC_TBL REGN
 WHERE REGN.FLAG = 'Y'
   AND REGN.EFFDT = (SELECT MAX(X.EFFDT)
                    FROM PS_CK_LNFE_RGC_TBL X
                   WHERE X.CK_CODIGO = REGN.CK_CODIGO
                     AND X.EFFDT <= SYSDATE)
   AND REGN.EFF_STATUS = 'A'
end-select

begin-select 
REGJ.CK_CODIGO

    let $REGJUR = &REGJ.CK_CODIGO

  FROM PS_CK_LNFE_RGC_TBL REGJ
 WHERE REGJ.FLAG1 = 'Y'
   AND REGJ.EFFDT = (SELECT MAX(X.EFFDT)
                    FROM PS_CK_LNFE_RGC_TBL X
                   WHERE X.CK_CODIGO = REGJ.CK_CODIGO
                     AND X.EFFDT <= SYSDATE)
   AND REGJ.EFF_STATUS = 'A'
end-select

end-procedure CONSULTA-REGIMEN

Begin-procedure CONSULTA-RESPONSABILIDAD

begin-select 
RESN.CK_CODIGO

    let $RESNAC = &RESN.CK_CODIGO

     FROM PS_CK_LNFE_RSC_TBL RESN
    WHERE RESN.FLAG = 'Y'
      AND RESN.EFFDT = (SELECT MAX(X.EFFDT)
                       FROM PS_CK_LNFE_RSC_TBL X
                      WHERE X.CK_CODIGO = RESN.CK_CODIGO
                        AND X.EFFDT <= SYSDATE)
      AND RESN.EFF_STATUS = 'A'
end-select

begin-select 
RESJ.CK_CODIGO

    let $RESJUR = &RESJ.CK_CODIGO

     FROM PS_CK_LNFE_RSC_TBL RESJ
    WHERE RESJ.FLAG1 = 'Y'
      AND RESJ.EFFDT = (SELECT MAX(X.EFFDT)
                       FROM PS_CK_LNFE_RSC_TBL X
                      WHERE X.CK_CODIGO = RESJ.CK_CODIGO
                        AND X.EFFDT <= SYSDATE)
      AND RESJ.EFF_STATUS = 'A'
end-select

end-procedure CONSULTA-RESPONSABILIDAD

Begin-procedure VALIDA-REGIMEN
begin-select 
RGCLI.CK_CODIGO

    let $Str_Regimen_Exist = &RGCLI.CK_CODIGO

  FROM PS_CK_LNFE_RGC_TBL RGCLI
 WHERE RGCLI.CK_CODIGO = $Str_Regimen
end-select
end-procedure VALIDA-REGIMEN

Begin-procedure VALIDA-RESPONSABILIDAD
begin-select 
RSCLI.CK_CODIGO

    let $Str_ResponsabilidadLn_Exis = &RSCLI.CK_CODIGO

  FROM PS_CK_RSCLI_PN1_VW RSCLI
 WHERE RSCLI.CK_CODIGO = $Str_ResponsabilidadLn
end-select
end-procedure VALIDA-RESPONSABILIDAD

Begin-procedure INSERTA-INFO-FACT-ELEC
begin-sql
INSERT INTO PS_CK_CUST_OPT_FE
    (SETID,
    CUST_ID,
    EFFDT,
    CK_CUSTO_FACT_ELEC,
    FLAG,
    NAME1,
    OPRID_ENTERED_BY,
    ENTERED_DTTM,
    OPRID_MODIFIED_BY,
    LAST_UPDATE_DTTM,
    FLAG2,
    EMAIL_ADDR) 
VALUES 
    ($Setid,            
    $Cust_id,
    TO_DATE($fecha_out,'DD-MM-YYYY'),
    $Str_Custo_Fact_Elect,
    'N',
    $Str_Contact_Name,
    $Oprid,
    TO_DATE($fecha_out,'DD-MM-YYYY'),
    $Oprid,
    TO_DATE($fecha_out,'DD-MM-YYYY'),
    'N',
    ' ')
end-sql
end-procedure INSERTA-INFO-FACT-ELEC

Begin-procedure INSERTA-EMAIL-FACT-ELEC
begin-sql
INSERT INTO PS_CK_CUSTO_FAELEC
    (SETID,
    CUST_ID,
    ADDRESS_SEQ_NUM,
    EFFDT,
    EMAILID,
    LAST_UPDATE_DTTM) 
VALUES 
    ($Setid,            
    $Cust_id,
    $address_seq_num,
    TO_DATE($fecha_out,'DD-MM-YYYY'),
    $Str_Emailid,
    TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql
end-procedure INSERTA-EMAIL-FACT-ELEC

! Inicio 030
!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CK_CUST_INT. Flag cliente internet
!-----------------------------------------------------------------------
begin-procedure FLAG-CLIENTE-INTERNET
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_CUST_INT
(SETID,                          
CUST_ID,
CK_FLAG_CUSTINT)
VALUES
($Setid,
$Cust_id,
'Y')
end-sql
Show 'Activa Flag Cliente Internet'
end-procedure FLAG-CLIENTE-INTERNET
! Fin 030

!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CUST_ADDR_SEQ. Datos Direccion
!-----------------------------------------------------------------------
begin-procedure INSERTAR-DATOS-DIRECCION
display 'INSERTAR-DATOS-DIRECCION'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_ADDR_SEQ
(SETID,                  
CUST_ID,                
ADDRESS_SEQ_NUM,        
DESCR,                  
BILL_TO_ADDR,           
SHIP_TO_ADDR,           
SOLD_TO_ADDR,           
CRSPD_TO_ADDR,          
BROKER_ADDR,            
INDIRECT_ADDR,          
LAST_MAINT_OPRID,       
DATE_LAST_MAINT,        
RFID_ENABLED)
VALUES
($Setid,
$Cust_id,
$address_seq_num,
'PRINCIPAL',
'Y',
'Y',
'Y',
'Y',
' ',
' ',
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
' ')
end-sql
end-procedure INSERTAR-DATOS-DIRECCION


!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CUST_ADDRESS. Datos de la direccion.
!-----------------------------------------------------------------------
begin-procedure INSERTAR-DIRECCION-CLIENTE
show ' ENTRO INSERTAR-DIRECCION-CLIENTE'


Do Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP

if isblank($Ck_Addre1_Geo)
  show ' Valor en blanco $Ck_Addre1_Geo:ccg ' $Ck_Addre1_Geo
  else
  	let $Address1 = $Ck_Addre1_Geo
end-if  										 

if isblank($Ck_Addre2_Geo)
  	show ' Valor en blanco $Ck_Addre2_Geo:ccg ' $Ck_Addre2_Geo									                
  else 
   let $Address2 = $Ck_Addre2_Geo              
end-if 

if isblank($Ck_Barrio_Geo)
  	show ' Valor en blanco $Ck_Addre1_Geo:ccg ' $Ck_Addre1_Geo								
  else
  	let $barrio   = $Ck_Barrio_Geo  
end-if  


let  #Num_Max_Cam = 35
show ' $City          ' $City 
show ' $County        ' $County
show ' $barrio        ' $barrio
show ' $State         ' $State
show ' $Phone         ' $Phone
show ' $Fax           ' $Fax
show ' $Oprid         ' $Oprid
SHOW ' $Address1      ' $Address1    
show ' $Address2      ' $Address2
let  $Address1 = substr($Address1, 1, #Num_Max_Cam)
let  $Address2 = substr($Address2, 1, #Num_Max_Cam)

if   isblank($Address1)
     let $Address1 = ' '
end-if
if   isblank($Address2)
     let $Address2 = ' '
end-if

! Inicio 027
if $Address2 = 'NO CAMBIO' 
	Let $Address2 = ' '
end-if
! Fin 027

let  $City          = ltrim($City,' ')

if isblank($County)
 let $County = ' '
end-if

if isblank($barrio)
 let $barrio = '88888' 
end-if

if isblank($Phone) or isnull($Phone)
 let $Phone = ' '
end-if

if isblank($Fax)
 let $Fax = ' '
end-if
    
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_ADDRESS
VALUES 
($Setid,	         
$Cust_id,             
$address_seq_num,
TO_DATE($fecha_out,'DD-MM-YYYY'),                 
$Cust_status,             
' ',
' ',
$lenguaje,
' ',
'COL',
$Address1,
$Address2,
' ',
' ',
$City,                 
' ',
' ',
' ',
' ', !CAMPO NUEVO ADDR_FIELD1                            
' ', !CAMPO NUEVO ADDR_FIELD2                            
' ', !CAMPO NUEVO ADDR_FIELD3                            
$barrio, !$County, 
$State,  !CAMPO DE                 
' ',
' ',
' ',
'57',
$Phone,
' ',
$Fax,
' ', !CAMPO NUEVO PHYSICAL_NATURE.    PREGUNTA QUE MANEJA 'G' (Y/o) 'S'
' ', !CAMPO NUEVO VAT_SVC_PERFRM_FLG. PREGUNTA QUE MANEJA 1,2,3,4
'',  !CAMPO NUEVO LAST_EXP_CHK_DTTM   PREGUNTA QUE MANEJA
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
' ') !CAMPO NUEVO URL_LONG            PREGUNTA QUE MANEJA)
end-sql

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_ADDR_GEOREFE (SETID,CUST_ID,ADDRESS_SEQ_NUM,EFFDT,CITY, ADDRESS1, ADDRESS2, CK_DIRECTRAD,CK_VALIDACION,CK_VALIDA_PLACA,CK_ESAMBIGUA,CK_FUENTE2	,CK_DIRALTERNA	,CK_BARRIOTRADUCIDO,CK_CODIGODIRECCION,CK_CODDIRPLACA,CK_NIVSOCIO,		CK_MANZANA,			CK_BARRIO1,CK_CODBAR,CK_LOCALIDAD1,CK_CX2,CK_CY2,CK_BARRIO_PEOPLE,CK_ESTADO3,CK_MENSAJE1, CK_POSTAL, CK_LOCATION_ID)
SELECT SETID,CUST_ID,ADDRESS_SEQ_NUM,EFFDT,CITY, ADDRESS1, ADDRESS2,CK_DIRECTRAD,CK_VALIDACION,CK_VALIDA_PLACA,CK_ESAMBIGUA,CK_FUENTE2	,CK_DIRALTERNA	,CK_BARRIOTRADUCIDO,CK_CODIGODIRECCION,CK_CODDIRPLACA,CK_NIVSOCIO,		CK_MANZANA,			CK_BARRIO1,CK_CODBAR,CK_LOCALIDAD1,CK_CX2,CK_CY2,CK_BARRIO_PEOPLE,CK_ESTADO3,CK_MENSAJE1, CK_POSTAL, ' ' 
FROM PS_CK_ADDR_GEO_TMP CCTMP
WHERE CCTMP.SETID = $Setid
AND CCTMP.CUST_ID = $Cust_id
AND CCTMP.ADDRESS_SEQ_NUM = $address_seq_num
AND CCTMP.EFFDT = TO_DATE($fecha_out,'DD-MM-YYYY')
end-sql
! Fin 026

show ' SALIO INSERTAR-DIRECCION-CLIENTE'
end-procedure INSERTAR-DIRECCION-CLIENTE

!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CK_CUST_ADDR_AR - Nueva para Cartera.
!-----------------------------------------------------------------------
! Se adiciona nueva rutina para insertar en la nueva estructura de Dirección de Cartera
! Inicio 008
begin-procedure INSERTAR-DIRECCION-CARTERA
show ' ENTRO INSERTAR-DIRECCION-CARTERA'
let  #Num_Max_Cam = 35
show ' $City          ' $City 
show ' $County        ' $County
show ' $State         ' $State
show ' $Phone         ' $Phone
SHOW ' $Address1      ' $Address1   
show ' $Address2      ' $Address2



let  $Address1 = substr($Address1, 1, #Num_Max_Cam)
let  $Address2 = substr($Address2, 1, #Num_Max_Cam)
if   isblank($Address1)
     let $Address1 = ' '
end-if
if   isblank($Address2)
     let $Address2 = ' '
end-if
let  $City          = ltrim($City,' ')

! Inicio 027
if $Address2 = 'NO CAMBIO' 
	Let $Address2 = ' '
end-if
! Fin 027
 
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_CUST_ADDR_AR
VALUES 
($Setid,	         
$Cust_id,             
$address_seq_num,
TO_DATE($fecha_out,'DD-MM-YYYY'),                 
$Cust_status,             
'PRINCIPAL',
'COL',
$Address1,
$Address2,
$State,
$City, 
$barrio, !$County, 
'57',
$Phone,
' ',
' ',
'',
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
' ') 
end-sql
show ' SALIO INSERTAR-DIRECCION-CARTERA'
end-procedure INSERTAR-DIRECCION-CARTERA

! Inicio 028
begin-procedure Insertar-Flag-DirCartera
show ' Entró Insertar-Flag-DirCartera'
 
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_ADDR_CAR_TBL
VALUES 
($Setid,	         
$Cust_id,             
$address_seq_num,
'Y') 
end-sql
show ' Salió Insertar-Flag-DirCartera'
end-procedure Insertar-Flag-DirCartera


!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CK_CUST_ADDRESS. Datos de la ruta.
!-----------------------------------------------------------------------
begin-procedure INSERTAR-RUTA
display 'INSERTAR-RUTA'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_CUST_ADDRESS
VALUES 
($Setid,	         
$Cust_id,             
$address_seq_num,
TO_DATE($fecha_out,'DD-MM-YYYY'),                 
$Ruta)
end-sql
end-procedure INSERTAR-RUTA

!-----------------------------------------------------------------------
! Insert en la tabla PS_LC_CUSTOMER_ID. Identificador de tipo de cliente.
!-----------------------------------------------------------------------
begin-procedure INSERTAR-IDENTIF-CLIENTE
display 'INSERTAR-IDENTIF-CLIENTE'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_LC_CUSTOMER_ID
(
SETID,
CUST_ID,
TIPO_IDENTIFICAC,
NIT_PROVEEDOR,
LC_DIGITO_VERIF
)
VALUES(
$Setid,
$Cust_id, 
$Tipo_ident,
$IdTercero,
$DigitoVerificacion)
end-sql
end-procedure INSERTAR-IDENTIF-CLIENTE

!*******************************************************************!
!-----------------------------------------------------------------------
! Insert en la tabla PS_CUST_REGN_TYPE. Tipo de region del cliente.
!-----------------------------------------------------------------------
begin-procedure INSERTAR-REGION-CLIENTE
display 'INSERTAR-REGION-CLIENTE'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_REGN_TYPE
VALUES
($Setid,
$Cust_id,
'RPT',
$State,
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql
show '$state2     ' $state
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_REGN_TYPE
VALUES
($Setid,
$Cust_id,
'PRC',
$State,
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql
end-procedure INSERTAR-REGION-CLIENTE


!-----------------------------------------------------------------------
! Insert en la tabla PS_CUST_TEAM. Zona correspondiente al cliente
!-----------------------------------------------------------------------
begin-procedure INSERTAR-ZONA-CLIENTE1
display 'INSERTAR-ZONA-CLIENTE1'

show $Setid                  
show $Cust_id                
show $Subcust_qual1        
show $oprid
show $fecha_out


begin-sql ON-ERROR=SQL-Error
INSERT INTO PS_CUST_TEAM
VALUES
($Setid,                  
$Cust_id,                
$Subcust_qual1,        
'Y',           
$oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))        
end-sql
end-procedure INSERTAR-ZONA-CLIENTE1


begin-procedure BUSCAR-DATOS-ZONA
display 'BUSCAR-DATOS-ZONA'
display $subcust_qual1
display $setid
begin-select
TEAM.SUPPORT_TEAM_MBR

  let $vend_cobra = &TEAM.SUPPORT_TEAM_MBR

from
   PS_TEAM_MEMBERS TEAM

WHERE TEAM.SETID = $setid
and   TEAM.SUPPORT_TEAM_CD = $subcust_qual1
and   TEAM.EFFDT           = (select MAX(TEAM1.EFFDT)
                              from PS_TEAM_MEMBERS TEAM1
                              where TEAM1.SETID = TEAM.SETID
                              and   TEAM1.SUPPORT_TEAM_CD = TEAM.SUPPORT_TEAM_CD
                              and   TEAM1.EFFDT <= sysdate)
and   TEAM.MANAGER         <> 'Y'
end-select
Show 'Termino Buscar-Datos-Zona'
end-procedure BUSCAR-DATOS-ZONA


begin-procedure INSERTAR-ZONA-CLIENTE2
display 'INSERTAR-ZONA-CLIENTE2'
begin-sql ON-ERROR=SQL-Error
INSERT INTO PS_CUST_TEAM
VALUES(
$Setid,                  
$Cust_id,                
$Subcust_qual2,        
'N',           
$oprid,	
TO_DATE($fecha_out,'DD-MM-YYYY'))        
end-sql
end-procedure INSERTAR-ZONA-CLIENTE2


begin-procedure INSERTAR-ZONA-CLIENTE3
display 'INSERTAR-ZONA-CLIENTE3'
begin-sql ON-ERROR=SQL-Error
INSERT INTO PS_CUST_TEAM
VALUES(
$Setid,                  
$Cust_id,                
$Subcust_qual3,        
'N',           
$oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))        
end-sql
end-procedure INSERTAR-ZONA-CLIENTE3


begin-procedure INSERTAR-ZONA-CLIENTE4
display 'INSERTAR-ZONA-CLIENTE4'
begin-sql ON-ERROR=SQL-Error
INSERT INTO PS_CUST_TEAM
VALUES(
$Setid,                  
$Cust_id,                
$Subcust_qual4,        
'N',           
$oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))        
end-sql
end-procedure INSERTAR-ZONA-CLIENTE4
!**********************************************************************
!-----------------------------------------------------------------------
! Busca Agente retendor de ICA 
!-----------------------------------------------------------------------
begin-procedure DATOS-ICA-CLIENTE
Show  'Busca Actividad Ica'
show ' $oprid ' $oprid
  Let $Nro_Res  = ' '
  Let $Agen_Ret = 'N'
Begin-SELECT 
ICA.LC_RES_RET_ICA
  Let $Nro_Res = &ICA.LC_RES_RET_ICA
  Let $Agen_Ret = 'Y'
   
     Do  Buscar-Existe-Cliente
     if  #Cli_Exi = 0
        SHOW ' Cliente No Existe ,' noline  !Lo Inserta
        SHOW $Cod_Cli
        do INSERTA_ICA
     else
         Do  ACTUALIZA_ICA  !Lo Actualiza
     end-if

  FROM PS_BUS_UNIT_TC_HO ICA
  WHERE ICA.SETID  = $oprid
         AND ICA.EFFDT = (SELECT MAX(A_EC.EFFDT)
         FROM PS_BUS_UNIT_TC_HO A_EC
         WHERE ICA.SETID = A_EC.SETID
               AND A_EC.EFFDT <= SYSDATE)
End-SELECT
Show 'Actividad de ICA  '    $Nro_Res
end-procedure DATOS-ICA-CLIENTE
!-----------------------------------------------------------------------
! Busca Agente retendor de ICA 
!-----------------------------------------------------------------------

begin-procedure Buscar-Existe-Cliente
Show  'Buscar Cliente en LC_CUSTTXTYP_CH '
let  $Setid         = Ltrim($Setid,' ')
let  $Cust_id       = Ltrim($Cust_id,' ')
let  $City          = Ltrim($City,' ')

SHOW ' $Setid     ' $Setid
SHOW ' $Cust_id   ' $Cust_id
show ' $City      ' $City
show ' $fecha_out ' $fecha_out
let #Cli_Exi = 0
begin-select
A.CUST_ID

     let #Cli_Exi = 1

FROM PS_LC_CUSTTXTYP_CH A
  WHERE A.SETID = $Setid
     AND A.CUST_ID = $Cust_id
     AND A.MUNI_FLD_HO = $City
     AND A.EFFDT       = $fecha_out
end-select
SHOW ' #Cli_Exi ' #Cli_Exi
show ' $fecha_out ' $fecha_out
end-procedure   Buscar-Existe-Cliente


 !-----------------------------------------------------------------------
 ! Inserta ICA                      !
 !-----------------------------------------------------------------------
  begin-procedure INSERTA_ICA


SHOW ' ENTRO INSERTA_ICA '
SHOW  $Setid	         
SHOW  $Cust_id             
SHOW  $fecha_out
SHOW  $City 
SHOW  $Nro_Res  
SHOW  $Agen_Ret  

 begin-sql ON-ERROR=SQL-ERROR
  INSERT INTO PS_LC_CUSTTXTYP_CH
  VALUES (
    $Setid,	         
    $Cust_id,             
    TO_DATE($fecha_out,'DD-MM-YYYY'),
    $City, 
    $Nro_Res,  
    $Agen_Ret,   
    ' ',  
    'N')
  end-sql
  SHOW ' SALIO INSERTA_ICA '
  end-procedure INSERTA_ICA
!-----------------------------------------------------------------------
! Inserta ICA                     
!-----------------------------------------------------------------------  
   begin-procedure ACTUALIZA_ICA
   show ' entra ACTUALIZA_ICA '
   show ' $Setid   ' $Setid
   show ' $Cust_id ' $Cust_id
   begin-sql ON-ERROR=SQL-ERROR
    UPDATE PS_LC_CUSTTXTYP_CH AR
    SET  AR.LC_RES_RET_ICA    = $Nro_Res,
         AR.LC_AGENTE_RET_ICA = $Agen_Ret,
         AR.MUNI_FLD_HO       = $City
   WHERE AR.SETID        = $Setid
     AND AR.CUST_ID      = $Cust_id
     AND AR.MUNI_FLD_HO  = $City
     AND AR.EFFDT        = $fecha_out
    end-sql
    show ' salio ACTUALIZA_ICA '
  end-procedure ACTUALIZA_ICA
  
  !-----------------------------------------------------------------------
  ! Termina Actualiza ICA					!
  !----------------------------------------------------------------------- 

!**********************************************************************
!-----------------------------------------------------------------------
! Insert enla tabla PS_LC_CUST_TAXTYP.Cliente NATURAL o JURIDICO
!-----------------------------------------------------------------------
begin-procedure DATOS-JURIDICOS-CLIENTE
display 'DATOS-JURIDICOS-CLIENTE'

IF $Tipo_ident    = 'N'

   LET $Tipo_Per  = 'J'
   LET $Res_Reten = '12345'
   let $agente    = 'Y'
   let $cbt_type_ho  = 'REC'
ELSE

   IF $Tipo_ident    = 'O'
	LET $Tipo_Per  = 'J'
	LET $Res_Reten = ' '
	let $agente    = 'N'
        let $cbt_type_ho  = 'REC'

   ELSE
   LET $Tipo_Per  = 'N'
   LET $Res_Reten = ' '
   Let $agente    = 'N'
   let $cbt_type_ho  = 'RES'
END-IF
END-IF


begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_LC_CUST_TAXTYPE
VALUES(
$Setid,                           
$Cust_id,            		  
TO_DATE($fecha_out,'DD-MM-YYYY'),                	  
$cust_status,                 	  
$cbt_type_ho,				  
$Tipo_Per,            		  
' ',            	   
' ',		           
$agente,			   
' ',
$Res_Reten,         	   
' ',       !Aqui se coloca la Resolucion   =   		         	
'N',	   !Aqui Coloca Y 	
 ' ',         	
 ' ',       	
 ' ',         	
 ' ',        	
 'N',           
 ' ',           
'N',           	
 ' ',            	
 'N',            	
 ' ',           	   
 'N',            	   
 ' ')           	   
end-sql
end-procedure DATOS-JURIDICOS-CLIENTE

!-------------------------------------------------------------------
! Actualiza tablas que  People llena por debajo!
!-------------------------------------------------------------------
begin-procedure INSERTAR-DATOS-INTERNOS
display 'INSERTAR-DATOS-INTERNOS'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_BILLTO
VALUES(
$setid,
$Cust_id,            		  
$Cust_id,
1,
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_SHIPTO
VALUES(
$setid,
$Cust_id,            		  
$Cust_id,
1,
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql
end-procedure INSERTAR-DATOS-INTERNOS

begin-procedure INSERTAR-FECHA-OPTION
DISPLAY 'INSERTAR-FECHA-OPTION'

show '$pymt_terms_cd ' $pymt_terms_cd
show '$payment_method ' $payment_method

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_OPTION
(SETID,                           
 CUST_ID,                         
 EFFDT,                           
 EFF_STATUS,                      
 PYMNT_TERMS_CD,                  
 PYMNT_TERMS_AMT,                 
 GRACE_DUE_DAYS,                  
 GRACE_DISC_DAYS,                 
 RETENTION_DAYS,                  
 PP_HOLD,                         
 PP_METHOD,                       
 REF_QUALIFIER_CODE,              
 PARTIAL_PY_SW,                   
 PO_REQUIRED,                     
 BILL_BY_ID,                      
 FREIGHT_BILL_TYPE,               
 BILL_CYCLE_ID,                   
 BILL_INQUIRY_PHONE,              
 BILL_TYPE_ID,                    
 BILLING_SPECIALIST,              
 BILLING_AUTHORITY,               
 COLLECTOR,                       
 CR_ANALYST,                      
 INVOICE_FORM_ID,                 
 DST_ID_AR,                       
 DRAFT_APPROVAL,                  
 DRAFT_DOC,                       
 DRAFT_TYPE,                      
 DD_PROFILE_ID,                   
 DD_GROUP,                        
 PAYMENT_METHOD,                  
 DIRECT_INVOICING,                
 CUSTOMER_PO,                     
 START_DATE,                     
 END_DATE,                        
 MICR_ID,                         
 CONSOL_SETID,                    
 CONSOL_CUST_ID,                  
 CONSOL_KEY,                      
 INTERUNIT_FLG,                   
 BUSINESS_UNIT_GL,                
 AR_SPECIALIST,                   
 MAX_WRITE_OFF_AMT,               
 MAX_WRITE_OFF_DAYS,              
 MAX_WRITE_OFF_PCT,               
 HOL_PROC_OPT,                    
 HOL_PROC_DAYS,                   
 HOL_PROC_OVERFL,                 
 REBATE_METHOD,                   
 BI_PROMPT_CURR,                  
 LAST_MAINT_OPRID,                
 DATE_LAST_MAINT,                 
 IMMEDIATE_PAYMENT,               
 DEPOSIT_PCT,                     
 DISPLAY_PRICES)             
VALUES
($setid,                  
$Cust_id,
$fecha_out,
'A',
$pymt_terms_cd,
' ',
0,
0,       
0,     
' ',     
' ',     
' ',     
'N',
' ',
' ',     
' ',     
' ',
' ',     
' ',
$Bill_specialist,
$Bill_specialist,
'GENERAL',
$Cr_analyst,
' ',
' ',     
' ',     
' ',     
' ',     
' ',     
' ',
$payment_method,
'Y',
' ',
'',          
'',          
' ',          
' ',        
' ',
' ',
' ',       
' ', !'PTM', !CAMPO PAYMENT_TYPE QUE
$Bill_specialist,
2000,   !*** ESTABA EN  0   Y SE COLOCO  2000   PORQUE  NO PERMITIA  CRUCES DE VALORES PEQUEÑOS ***!!!
0,
0,
' ',
0,
' ',
' ',
' ',
$oprid, 
$fecha_out,
' ',
0,
' ')
end-sql
SHOW 'SALIO INSERTAR-FECHA-OPTION'
end-procedure INSERTAR-FECHA-OPTION

begin-procedure INSERTAR-FECHA-SOLDTO
display 'INSERTAR-FECHA-SOLDTO'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_SOLDTO_OPT
VALUES 
($setid,      
$Cust_id,    
TO_DATE($fecha_out,'DD-MM-YYYY'),  
'A',         
' ',
' ',
0,       
' ',       
' ',       
$oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
' ',         
'S',         
'N',        
' ',
'N',
' ',
' ',
' ',
' ')
end-sql
end-procedure INSERTAR-FECHA-SOLDTO

begin-procedure INSERTAR-FECHA-SHIPTO
display 'INSERTAR-FECHA-SHIPTO'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_SHIPTO_OPT
VALUES 
($setid,                         
$Cust_id,                    
TO_DATE($fecha_out,'DD-MM-YYYY'),                    
'A',             	     
' ',    		     
' ',    		     
'N',    		     
'Y',    		     
'Y',    		     
$lenguaje,        	     
' ',     		     
' ',
$oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
' ',    		     
' ',    		     
0,    			     
0,    			     
'Y',    		     
' ',    		     
'N',    		     
'N',    		     
'N',    		     
'N',    		     
' ',
' ',
' ',
' ',
' ',    		     
' ',    		     
' ',    		     
' ',
' ',    		     
' ',    		     
' ',
0,
0,
' ',
0,
' ',
' ',
' ',
' ',
0,
' ',
' ',
' ',
' ',
' ',
' ')        	             
end-sql
end-procedure   INSERTAR-FECHA-SHIPTO

!-------------------------------------------------------------------
! Cupo de credito manejado por el cliente.				
!-------------------------------------------------------------------
begin-procedure INSERTAR-CUPO-CREDITO
display 'INSERTAR-CUPO-CREDITO'
show '$cupo ' $cupo


    let #limite = 0
    let #Tolerancia = 0


begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_CREDIT
VALUES (
$setid,                  
$Cust_id,                
TO_DATE($fecha_out,'DD-MM-YYYY'),                 
'A',  
$cupo, 
#limite,
TO_DATE($fecha_out,'DD-MM-YYYY'),            
0,          
0,      
'',       
'',        
' ',         
'',             
0,         
' ',      
'',          
'M',              
'A',           
'Y',           
0,          
#Tolerancia,
0,         
'COP',            
'TRM',                
$oprid,       
TO_DATE($fecha_out,'DD-MM-YYYY'),        
' ',         
' ',               
0,
' ',
' ',
0,
' ')           
end-sql
end-procedure   INSERTAR-CUPO-CREDITO

!------------------------------------------------------------------------
! Actualiza la secuencia de contactos del cliente que esta actualizando.		
!------------------------------------------------------------------------
begin-procedure INSERTAR-SEQ-CONTACTOS
display 'INSERTAR-SEQ-CONTACTOS'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_CNTCT_SEQ
VALUES 
($Setid,                     
$Cust_id,                   
1,       	         
$oprid,
$AsOfToday)
end-sql
end-procedure INSERTAR-SEQ-CONTACTOS


!-------------------------------------------------------------------
! Actualiza los contactos del cliente que esta actualizando.		
!-------------------------------------------------------------------
begin-procedure INSERTAR-CONTACTOS
display 'INSERTAR-CONTACTOS'
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_CONTACT
VALUES (
$Setid,                     
$Cust_id,                   
1,       	         
TO_DATE($fecha_out,'DD-MM-YYYY'),                 
$Cust_status,               
$Name1,                     
' ',                     
$address_seq_num,           
$lenguaje,               
' ',                     
'C',                     
' ',          	         
' ',                     
$oprid,		         
TO_DATE($fecha_out,'DD-MM-YYYY'),              
' ')		         
end-sql

begin-sql on-error=sql-error
INSERT INTO PS_CUST_CNTCT_PHN
VALUES (
$Setid,                  
$Cust_id,                
$address_seq_num,      
TO_DATE($fecha_out,'DD-MM-YYYY'),                  
'HOME', 
'57',
$Phone,                
' ',              
$oprid,       
TO_DATE($fecha_out,'DD-MM-YYYY'))        
end-sql
end-procedure   INSERTAR-CONTACTOS


!-------------------------------------------------------------------
! Actualizacion de la segunda direccion en las tablas respectivas.
!-------------------------------------------------------------------
begin-procedure INSERTAR-IVA-CLIENTE
display 'INSERTAR-IVA-CLIENTE'
begin-sql  ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_VAT_REG
VALUES(
$Setid,                 
$Cust_id,                
'COL',
' ',          
'CO',          
'Y',
$oprid,       
$AsofToday)        
end-sql
end-procedure   INSERTAR-IVA-CLIENTE

!-------------------------------------------------------------------
! Actualizacion Tabla utilizada para Corbepuntos
!-------------------------------------------------------------------
begin-procedure INSETAR-PUNTOS
SHOW 'INSETAR-PUNTOS ENTRO POR ESTE LADO'
SHOW ' $Setid '$Setid
SHOW ' $Cust_id '$Cust_id 
show '$Canal'  $Canal
begin-sql on-error=sql-error
INSERT INTO PS_CK_CLIPUNTOS
(SETID,          
CUST_ID,        
NAME1,          
CUSTOMER_TYPE,  
SUBCUST_QUAL1,  
CK_PUNFAC,      
CK_PUNDEV,      
CK_PUNENT,      
CK_PTMORA,      
CK_PTADIC,      
CK_PUNTNC,      
CK_PUNRED,      
CK_PUNTOT)
VALUES(
$Setid,
$Cust_id,
$name1,
$Canal,
$Subcust_qual1,
0,
0,
0,
0,
0,
0,
0,
0)
end-sql
SHOW 'SALIO INSETAR-PUNTOS ENTRO POR ESTE LADO'
end-procedure INSERTAR-PUNTOS


Begin-procedure get-defaults-bu-ar
display 'get-defaults-bu-ar'
!Se obtienen los valores por defecto para la unidad de negocios de AR
begin-select ON-ERROR=SQL-ERROR
A.GRACE_DISC_DAYS
A.GRACE_DUE_DAYS
A.BILLING_SPECIALIST
A.CR_ANALYST

  let $GRACE_DISC_DAYS    = &A.GRACE_DISC_DAYS
  let $GRACE_DUE_DAYS     = &A.GRACE_DUE_DAYS
  let $BILLING_SPECIALIST = &A.BILLING_SPECIALIST
  let $CR_ANALYST         = &A.CR_ANALYST

  FROM PS_CK_CAPTU_DISTRI A
  WHERE A.BUSINESS_UNIT = &run_cntl_in.business_unit
end-select
end-procedure !get-defaults-bu-ar

!-------------------------------------------------------------------
! Actualizacion de la segunda direccion en las tablas respectivas.
!-------------------------------------------------------------------
begin-procedure CONTROL-DIRECCION
   
   	display 'CONTROL-DIRECCION'
   	do VERIFICAR-DATOS-CLIENTES-EXISTEN
   	show ' $ind_state ' $ind_state
   	show ' $ind_city  ' $ind_city
   	show ' $ind_county' $ind_county
   	show ' $ind_barrio' $ind_barrio
   	
   	if $ind_state  = 'N' or $ind_city   = 'N' or $ind_county = 'N' or $ind_barrio = 'N'  or $Val_Descripcion <> ''
      		show '* * Cliente No fue Creado en Ps * *' $Cust_id
			
			!Inicio 039
			if $ind_zona   = 'N' 
			 show 'La zona no corresponde al setid'
			end-if
		   
			if $ind_state   = 'N' 
			 show 'Departamento no corresponde a país'
			end-if
		   
			if $ind_city   = 'N' 
			 show 'Municipio no existe'
			end-if
		   
			!Fin 039
			
      		let #cnt_error = #cnt_error + 1
   	else
        	let $encontro_barrio = 'N'
        	Do Valida-Municipio-Existe
        	
        	if #find-geocity = 1 and $Canal <> '0'       
           		Do Buscar-Existe-Direcc-Ck-Address-Geo
           		if #Exi_Dic_Geo = 0
              			Do Insertar-Registro-Tabla-Ck-Address-Geo
           		else
              			Do Update-Registro-Tabla-Ck-Address-Geo
           		end-if
           		
           		Do Buscar-Campos-Tabla-Ck-Address-Geo
           		if $Ck_Estado_Geo = 'E' or $Ck_Estado_Geo = 'F' or $Ck_Estado_Geo = ' '  
           			show '* * Dirección ingresada no pudo ser geo-refenciada * *' $Cust_id
           		else
              			
              			if isblank($Ck_Addre1_Geo)
                		 	show ' Valor en blanco $Ck_Addre1_Geo ' $Ck_Addre1_Geo
              			else
                		 	let $Address1 = $Ck_Addre1_Geo
              			end-if   
              		
              			if isblank($Ck_Addre2_Geo)
                		 	!show ' Valor en blanco $Ck_Addre1_Geo ' $Ck_Addre1_Geo
                		 	show ' Valor en blanco $Ck_Addre2_Geo ' $Ck_Addre2_Geo
              			else
                		 	let $Address2 = $Ck_Addre2_Geo              
              			end-if
              		
              			if isblank($Ck_Barrio_Geo)
                		 	!show ' Valor en blanco $Ck_Addre1_Geo ' $Ck_Addre1_Geo
                		 	show ' Valor en blanco $Ck_Barrio_Geo ' $Ck_Barrio_Geo
              			else
              				let $encontro_barrio = 'Y'
                		 	let $barrio = $Ck_Barrio_Geo  
                		 	!let $county = $Ck_Barrio_Geo  Modificacion EAS 08/05/2009 Variable errada
              			end-if   
           		end-if
	        end-if 
        
	    	do find-address
    	if $find-address = 'N'
        	do BUSCAR-ULTIMA-SEQ
        	do INSERTAR-DATOS-DIRECCION2
        	do INSERTAR-DIRECCION-CLIENTE2
        	do CAMBIAR-VALORES1        
        	
        	SHOW ' $Ind_Dir_Des ' $Ind_Dir_Des 
        	if $Ind_Dir_Des = 'Y'
           	!	Do Actualizar-Address-Seq-Ship-Customer     
           		do CAMBIAR-VALORES
           	end-if
     		
		else
        		Do find-City-Conty
		
			If $find-City-Conty = 'N'
			
				Do BUSCAR-ULTIMA-SEQ-DIRECCION
				Do VERIFICAR-DIRECCION-PROTEGIDA
				
				If $DireccionProtegida = 'N'
					Do CORRECCION-DIRECCION-CLIENTE
				Else
					do BUSCAR-ULTIMA-SEQ
			       	do INSERTAR-DATOS-DIRECCION2
	        		do INSERTAR-DIRECCION-CLIENTE2
	        	End-If
				
			End-If
        	end-if
     	    ! ACTUALIZA LA DIRECCION DE ENVIO MODIFICACION
	    SHOW ' $Ind_Dir_Des ' $Ind_Dir_Des ! <#005 JCC>
	    if $Ind_Dir_Des = 'Y' AND #SecuenciaDireccionActual <> 0 
			Do Actualizar-Address-Seq-Ship-Customer
		End-If
	     	
     	do CAMBIAR-NOMBRE
     	
   	end-if
   
end-procedure   CONTROL-DIRECCION

!*******************************************************************************
! Procedure: Actualizar-Address-Seq-Ship-Customer
!*******************************************************************************
begin-procedure Actualizar-Address-Seq-Ship-Customer   
	
	show ' entro Actualizar-Address-Seq-Ship-Customer '
	show ' $Setid  ' $Setid
	show ' $Cust_id' $Cust_id
	
begin-sql ON-ERROR=SQL-ERROR                
UPDATE PS_CUSTOMER A
SET A.ADDRESS_SEQ_SHIP = #SecuenciaDireccionActual
WHERE A.SETID   = $Setid
  AND A.CUST_ID = $Cust_id
end-sql

BEGIN-SQL ON-ERROR=SQL-ERROR
UPDATE PS_CUST_ADDR_SEQ
   SET ship_to_addr = 'Y'
 WHERE setid = $setid
   AND cust_id = $cust_id
   AND address_seq_num = #SecuenciaDireccionActual !<#005 JCC> #ultseq 
END-SQL
	
end-procedure   Actualizar-Address-Seq-Ship-Customer     

!*******************************************************************************
! Procedure: Actualizar-Barrio-Cliente
!*******************************************************************************
begin-procedure Actualizar-Barrio-Cliente
display 'Actualizar-Barrio-Cliente'
display $Setid
display $Cust_id
display $Address1

begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CUST_ADDRESS AB1
SET AB1.COUNTY     = $barrio
WHERE AB1.SETID    = $Setid
  AND AB1.CUST_ID  = $Cust_id
  AND AB1.ADDRESS1 = $Address1
  AND AB1.EFFDT    =
     (SELECT MAX(A_ED1.EFFDT) FROM PS_CUST_ADDRESS A_ED1
      WHERE AB1.SETID           = A_ED1.SETID
        AND AB1.CUST_ID         = A_ED1.CUST_ID
        AND AB1.ADDRESS_SEQ_NUM = A_ED1.ADDRESS_SEQ_NUM
        AND A_ED1.EFFDT         <= SYSDATE)
end-sql
end-procedure   Actualizar-Barrio-Cliente

!*******************************************************************************
! Procedure: find-address
!*******************************************************************************
begin-procedure find-address
	let $find-address = 'N'
	let $address-to-find = rtrim($Address1,' ')
	Let #SecuenciaDireccionActual = 0
	
begin-select ON-ERROR=SQL-ERROR
A.FAX      &find-address
A.ADDRESS_SEQ_NUM	&SecuenciaDireccionActual

	Let #SecuenciaDireccionActual = &SecuenciaDireccionActual
   	show '*** Dirección ya existe ***'
   	let  $find-address = 'Y'

FROM PS_CUST_ADDRESS A
WHERE A.SETID    = $setid
  AND A.CUST_ID  = $Cust_id
  AND RTRIM(A.ADDRESS1) = $address-to-find
  AND A.EFFDT    = (SELECT MAX(A_ED.EFFDT) FROM PS_CUST_ADDRESS A_ED
                     WHERE A.SETID           = A_ED.SETID
                       AND A.CUST_ID         = A_ED.CUST_ID
                       AND A.ADDRESS_SEQ_NUM = A_ED.ADDRESS_SEQ_NUM
                       AND A_ED.EFFDT       <= SYSDATE)
end-select
	
show ' $find-address ' $find-address
	
end-procedure find-address


!*******************************************************************************
! Procedure: find-address-general
!*******************************************************************************
begin-procedure find-address-general
SHOW ' entró find-address-general '
show '$setid: ' $setid

let $find-address-general = 'N'

!Inicio #022
if $setid ='DISTR'
!Fin  #022

let $address-to-find-general = rtrim($Address1,' ')
show '$address-to-find-general: ' $address-to-find-general
Let #SecuenciaDireccionActual1 = 0
	
begin-select ON-ERROR=SQL-ERROR
A.FAX      &find-address-general
A.ADDRESS_SEQ_NUM	&SecuenciaDireccionActual1
A.CUST_ID			&custIdExistente

	Let #SecuenciaDireccionActual1 = &SecuenciaDireccionActual1
	Let $custIdExistente = &custIdExistente
   	show '*** Dirección ya existe ***'
   	let  $find-address-general = 'Y'

FROM PS_CUST_ADDRESS A
WHERE A.SETID = $setid
  AND RTRIM(A.ADDRESS1) = $address-to-find-general
  AND A.EFFDT    = (SELECT MAX(A_ED.EFFDT) FROM PS_CUST_ADDRESS A_ED
                     WHERE A.SETID           = A_ED.SETID
                       AND A.CUST_ID         = A_ED.CUST_ID
                       AND A.ADDRESS_SEQ_NUM = A_ED.ADDRESS_SEQ_NUM
                       AND A_ED.EFFDT       <= SYSDATE)
end-select

!Inicio #022
end-if
!Fin  #022
	
show ' salió $find-address-general ' $find-address-general
	
end-procedure find-address-general

begin-procedure VERIFICAR-DATOS-CLIENTES-EXISTEN
 display 'VERIFICAR-DATOS-CLIENTES-EXISTEN'
 do VERIFICAR-STATE
 do VERIFICAR-CITY
 if $ind_city = 'Y'
     Do Actualizar_barrio   !Modif JJRC abril 28/04 Petición Jaime_Henry abril 28/04
 end-if
 do VERIFICAR-COUNTY
end-procedure   VERIFICAR-DATOS-CLIENTES-EXISTEN


begin-procedure BUSCAR-ULTIMA-SEQ
let #actseq = 0
let #ultseq = 0
begin-select
MAX(ult.address_seq_num) &ultseq

  let #ultseq = &ultseq

from ps_cust_addr_seq ult
where ult.setid = $setid
  and ult.cust_id = $cust_id
end-select

let #actseq = #ultseq + 1

Let #SecuenciaDireccionActual = #actseq
end-procedure   BUSCAR-ULTIMA-SEQ


!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CUST_ADDR_SEQ. Datos Direccion2
!-----------------------------------------------------------------------
begin-procedure INSERTAR-DATOS-DIRECCION2
display 'INSERTAR-DATOS-DIRECCION2'
SHOW '#actseq' #actseq
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_ADDR_SEQ
(SETID,                  
CUST_ID,                
ADDRESS_SEQ_NUM,        
DESCR,                 
BILL_TO_ADDR,           
SHIP_TO_ADDR,           
SOLD_TO_ADDR,           
CRSPD_TO_ADDR,          
BROKER_ADDR,            
INDIRECT_ADDR,          
RFID_ENABLED,           
LAST_MAINT_OPRID,       
DATE_LAST_MAINT)
VALUES(
$Setid,
$Cust_id,
#actseq,
'PRINCIPAL',
'Y',
'N',
'Y',
'Y',
' ',
' ',
' ',
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql
end-procedure INSERTAR-DATOS-DIRECCION2


!-----------------------------------------------------------------------
! Insert de datos en la tabla PS_CUST_ADDRESS. Datos de la direccion de
! envio de mercancia.
!-----------------------------------------------------------------------
begin-procedure INSERTAR-DIRECCION-CLIENTE2
display 'INSERTAR-DIRECCION-CLIENTE2'

! Inicio 026
Do Buscar-Campos-Tabla-CK_ADDR_GEOREFE_TMP

if isblank($Ck_Addre1_Geo)
  show ' Valor en blanco $Ck_Addre1_Geo:ccg ' $Ck_Addre1_Geo
  else
  	let $Address1 = $Ck_Addre1_Geo
end-if  										 

if isblank($Ck_Addre2_Geo)
  	show ' Valor en blanco $Ck_Addre2_Geo:ccg ' $Ck_Addre2_Geo									                
  else 
   let $Address2 = $Ck_Addre2_Geo              
end-if 

if isblank($Ck_Barrio_Geo)
  	show ' Valor en blanco $Ck_Addre1_Geo:ccg ' $Ck_Addre1_Geo								
  else
  	let $barrio   = $Ck_Barrio_Geo  
end-if  
! Fin 026


let  #Num_Max_Cam    = 35
let  $Ck_Address1geo = ltrim($Ck_Address1geo,' ')
let  $Ck_Address2geo = ltrim($Ck_Address2geo,' ')
let  $Address1 = substr($Address1,1,#Num_Max_Cam)
let  $Address2 = substr($Address2,1,#Num_Max_Cam)
if   isblank($Address2)
     let $Address2 = ' '
end-if
let  $City           = ltrim($City,' ')
let  $Ck_Barrio      = ltrim($Ck_Barrio,' ') 
show ' $Address1 ' $Address1
show ' $Address2 ' $Address2
show ' $barrio   ' $barrio
show ' $county ' $county

if isblank($County)
 let $County = ' '
end-if

if isblank($Phone) or isnull($Phone)
 let $Phone = ' '
end-if

if isblank($Fax)
 let $Fax = ' '
end-if

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_ADDRESS
VALUES 
($Setid,
$Cust_id,             
#actseq,
TO_DATE($fecha_out,'DD-MM-YYYY'),                 
$Cust_status,             
' ',
' ',
$lenguaje,
' ',
'COL',
$Address1,
$Address2,
' ',
' ',
$City,                 
' ',
' ',
' ',
' ',
' ',
' ',
$barrio,
$State,                  
' ',
' ',
' ',
'57',
$Phone,
' ',
$Fax,
' ',
' ',
'',
$Oprid,
TO_DATE($fecha_out,'DD-MM-YYYY'),
' ')
end-sql


! insert en la PS_CK_ADDR_GEOREFE
begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_ADDR_GEOREFE (SETID,CUST_ID,ADDRESS_SEQ_NUM,EFFDT,CITY, ADDRESS1, ADDRESS2, CK_DIRECTRAD,CK_VALIDACION,CK_VALIDA_PLACA,CK_ESAMBIGUA,CK_FUENTE2	,CK_DIRALTERNA	,CK_BARRIOTRADUCIDO,CK_CODIGODIRECCION,CK_CODDIRPLACA,CK_NIVSOCIO,		CK_MANZANA,			CK_BARRIO1,CK_CODBAR,CK_LOCALIDAD1,CK_CX2,CK_CY2,CK_BARRIO_PEOPLE,CK_ESTADO3,CK_MENSAJE1, CK_POSTAL, CK_LOCATION_ID)
SELECT SETID,CUST_ID,#actseq,EFFDT,CITY, ADDRESS1, ADDRESS2,CK_DIRECTRAD,CK_VALIDACION,CK_VALIDA_PLACA,CK_ESAMBIGUA,CK_FUENTE2	,CK_DIRALTERNA	,CK_BARRIOTRADUCIDO,CK_CODIGODIRECCION,CK_CODDIRPLACA,CK_NIVSOCIO,		CK_MANZANA,			CK_BARRIO1,CK_CODBAR,CK_LOCALIDAD1,CK_CX2,CK_CY2,CK_BARRIO_PEOPLE,CK_ESTADO3,CK_MENSAJE1, CK_POSTAL, ' ' 
FROM PS_CK_ADDR_GEO_TMP CCTMP
WHERE CCTMP.SETID = $Setid
AND CCTMP.CUST_ID = $Cust_id
AND CCTMP.ADDRESS_SEQ_NUM = $address_seq_num
AND CCTMP.EFFDT = TO_DATE($fecha_out,'DD-MM-YYYY')
end-sql

end-procedure INSERTAR-DIRECCION-CLIENTE2

!-------------------------------------------------------------------
! Actualizacion de flag de envio en la tabla CUST_ADDR_SEQ
!-------------------------------------------------------------------
begin-procedure CAMBIAR-VALORES
display 'CAMBIAR-VALORES'
begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CUST_ADDR_SEQ
SET ps_cust_addr_seq.ship_to_addr = 'N'
where ps_cust_addr_seq.setid = $setid
and   ps_cust_addr_seq.cust_id = $cust_id
and   ps_cust_addr_seq.address_seq_num = #ultseq 
end-sql
end-procedure   CAMBIAR-VALORES

!*******************************************************************
! Rutina Anterior que estaba actualizando el campo de despacho y que 
! estaba colocando el valor de la dirección y si el cliente tenia la
! anterior dirección como despacho le colocaba la otra.
!-------------------------------------------------------------------
! Actualizacion del campo en el que se almacena el flag de direccion
! principal de envio.
!-------------------------------------------------------------------
begin-procedure CAMBIAR-VALORES1
display 'CAMBIAR-VALORES1'
begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CUSTOMER
SET ps_customer.SUBCUST_QUAL2     = $city,
    ps_customer.NAMESHORT         = INITCAP($name_short),
    ps_customer.NAME1             = INITCAP($name1)
where ps_customer.setid           = $setid
and   ps_customer.cust_id         = $cust_id
and   ps_customer.address_seq_num = #ultseq
end-sql
end-procedure   CAMBIAR-VALORES1


!*******************************************************************
!------------------------------------------------------------------!
! Procedure: find-City-Conty									   !
! Descr:     Se verifica si cambio la ciudad o el barrio. 		   !
!------------------------------------------------------------------!
! Creación: #001 - JCC 05Nov09 									   !
!------------------------------------------------------------------!
begin-procedure find-City-Conty
let $find-City-Conty = 'N'

begin-select distinct ON-ERROR=SQL-ERROR
A1.FAX      &find-City-Conty
A1.ADDRESS_SEQ_NUM

	show '*** Ciudad y Barrio son iguales ***'
   	let  $find-City-Conty = 'Y'
   	Let #SecuenciaDireccionActual = &A1.ADDRESS_SEQ_NUM

FROM PS_CUST_ADDRESS A1
WHERE A1.SETID    = $setid
  AND A1.CUST_ID  = $Cust_id
  AND A1.ADDRESS1 = $address-to-find
  AND A1.COUNTY   = $barrio
  AND A1.CITY	 = $City
  AND A1.EFFDT    = (SELECT MAX(A_ED.EFFDT) FROM PS_CUST_ADDRESS A_ED
                     WHERE A1.SETID           = A_ED.SETID
                       AND A1.CUST_ID         = A_ED.CUST_ID
                       AND A1.ADDRESS_SEQ_NUM = A_ED.ADDRESS_SEQ_NUM
                       AND A_ED.EFFDT       <= SYSDATE)
end-select
show ' $find-City-Conty ' $find-City-Conty
end-procedure find-City-Conty


!*******************************************************************
!------------------------------------------------------------------!
! Procedure: BUSCAR-ULTIMA-SEQ-DIRECCION						   !
! Descr:     Busca la ultima secuencia para esa dirección. 		   !
!------------------------------------------------------------------!
! Creación: #001 - JCC 05Nov09 									   !
!------------------------------------------------------------------!
begin-procedure BUSCAR-ULTIMA-SEQ-DIRECCION
	
	let #ultseqDir = 0

begin-select
MAX(ult.address_seq_num) &ultseqDir

	Let #ultseqDir = &ultseqDir
	Let #SecuenciaDireccionActual = &ultseqDir
	
from PS_CUST_ADDRESS ult
where ult.setid    = $setid
  and ult.cust_id  = $cust_id
  and ult.address1 = $address-to-find 
end-select

end-procedure   BUSCAR-ULTIMA-SEQ-DIRECCION

!*******************************************************************
!------------------------------------------------------------------!
! Procedure: VERIFICAR-DIRECCION-PROTEGIDA						   !
! Descr:     Busca la ultima secuencia para esa dirección. 		   !
!------------------------------------------------------------------!
! Creación:  EAS 26/05/2010
!------------------------------------------------------------------!
BEGIN-PROCEDURE VERIFICAR-DIRECCION-PROTEGIDA

	Let $DireccionProtegida = 'N'

BEGIN-SELECT
'PROTEGIDA' &PROTEGIDA
	Let $DireccionProtegida = 'Y'
FROM PS_CK_ADDR_AKDIS
WHERE CUST_ID = $cust_id
AND SETID = $setid
AND ADDRESS_SEQ_NUM = #ultseqDir
AND CK_FLAG_ACTUALIZA = 'Y'
END-SELECT

END-PROCEDURE


!*******************************************************************
!------------------------------------------------------------------!
! Procedure: CORRECCION-DIRECCION-CLIENTE						   !
! Descr:     Se corrige la dirección, El procedimiento crea una    !
!			 nueva fecha efectiva.								   !
!------------------------------------------------------------------!
! Creación: #001 - JCC 05Nov09 									   !
!------------------------------------------------------------------!
begin-procedure CORRECCION-DIRECCION-CLIENTE
display 'CORRECCION-DIRECCION-CLIENTE'
let  #Num_Max_Cam    = 35
let  $City           = ltrim($City,' ')
let  $barrio      	 = ltrim($barrio,' ') 
let  $ExisteDir		 = 'N'
show ' $City      ' $City
show ' $barrio    ' $barrio
show ' #ultseqDir ' #ultseqDir

Begin-select ON-ERROR=SQL-ERROR
EXS_CA.CUST_ID
	let  $ExisteDir		 = 'Y'
FROM PS_CUST_ADDRESS EXS_CA
WHERE EXS_CA.SETID 		= $setid
  AND EXS_CA.CUST_ID  	= $Cust_id
  AND EXS_CA.ADDRESS_SEQ_NUM = #ultseqDir
  AND EXS_CA.EFFDT    	= TO_DATE($fecha_out,'DD-MM-YYYY')
End-Select

if $ExisteDir = 'N' 

Show ' Inserta nueva Fecha Efectiva ' 

if isblank($County)
 let $County = ' '
end-if

if isblank($Phone) or isnull($Phone)
 let $Phone = ' '
end-if

if isblank($Fax)
 let $Fax = ' '
end-if
do Maneja-telefono

Else

Show ' Se corrige la ultima fecha efectiva '

begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CUST_ADDRESS ACA
  SET ACA.COUNTY   = $barrio, 
	  ACA.CITY	   = $City
WHERE ACA.SETID    = $Setid
  AND ACA.CUST_ID  = $Cust_id
  AND ACA.ADDRESS_SEQ_NUM = #ultseqDir
  AND ACA.EFFDT    = TO_DATE($fecha_out,'DD-MM-YYYY')
end-sql

End-If
end-procedure CORRECCION-DIRECCION-CLIENTE


!inicio 009
!*******************************************************************
!------------------------------------------------------------------!
! Procedure: Maneja-telefono				           !
! Descr:     Añade datos de telefono         .                     !
!------------------------------------------------------------------!
begin-procedure Maneja-telefono
display 'Maneja-telefono'

let $ExisteTel = 'N'

let $ContieneTel = 'N'

Begin-select ON-ERROR=SQL-ERROR
CUSADDR.CUST_ID
   let $ExisteTel = 'Y'
FROM PS_CUST_ADDRESS CUSADDR, PS_CK_BU_PHONE_TBL CBPHO
WHERE CUSADDR.SETID = $setid
  AND   CUSADDR.CUST_ID = $Cust_id
  AND   CUSADDR.ADDRESS_SEQ_NUM = #ultseqDir
  AND   CBPHO.SETID = CUSADDR.SETID
  AND   CBPHO.CUST_ID = CUSADDR.CUST_ID
  AND   CBPHO.ADDRESS_SEQ_NUM = CUSADDR.ADDRESS_SEQ_NUM
  AND   CUSADDR.EFFDT = (SELECT MAX(A_DR.EFFDT) FROM PS_CUST_ADDRESS A_DR
                          WHERE CUSADDR.SETID           = A_DR.SETID
                            AND CUSADDR.CUST_ID         = A_DR.CUST_ID
                            AND CUSADDR.ADDRESS_SEQ_NUM = A_DR.ADDRESS_SEQ_NUM
                            AND A_DR.EFFDT       < TO_DATE($fecha_out,'DD-MM-YYYY'))
END-SELECT


If $ExisteTel = 'Y'

Begin-select ON-ERROR=SQL-ERROR
CBPHO_1.CUST_ID
   let $ContieneTel = 'Y'
FROM PS_CK_BU_PHONE_TBL CBPHO_1
WHERE CBPHO_1.SETID = $setid
  AND   CBPHO_1.CUST_ID = $Cust_id
  AND   CBPHO_1.ADDRESS_SEQ_NUM = #ultseqDir
  AND   CBPHO_1.EFFDT = TO_DATE($fecha_out,'DD-MM-YYYY')
END-SELECT
      
If $ContieneTel = 'N'

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CK_BU_PHONE_TBL
SELECT CBPHO_2.SETID,
CBPHO_2.CUST_ID,
CBPHO_2.ADDRESS_SEQ_NUM,
TO_DATE($fecha_out,'DD-MM-YYYY'),
CBPHO_2.FAX,
CBPHO_2.CK_CELULAR_FLD
FROM PS_CK_BU_PHONE_TBL CBPHO_2
WHERE CBPHO_2.SETID = $setid
  AND   CBPHO_2.CUST_ID = $Cust_id
  AND   CBPHO_2.ADDRESS_SEQ_NUM = #ultseqDir
  AND   CBPHO_2.EFFDT = (SELECT MAX(CB_DR.EFFDT) FROM PS_CK_BU_PHONE_TBL CB_DR
                          WHERE CBPHO_2.SETID           = CB_DR.SETID
                            AND CBPHO_2.CUST_ID         = CB_DR.CUST_ID
                            AND CBPHO_2.ADDRESS_SEQ_NUM = CB_DR.ADDRESS_SEQ_NUM
                            AND CB_DR.EFFDT       < TO_DATE($fecha_out,'DD-MM-YYYY'))
end-sql

End-If

End-If
end-procedure Maneja-telefono
!fin 009

!*******************************************************************
!------------------------------------------------------------------!
! Procedure: INACTIVAR-DIRECCION-CLIENTE-SEQ-ADDRESS			   !
! Descr:     Se inactiva las secuencias anteriores				   !
!------------------------------------------------------------------!
! Creación: #001 - JCC 05Nov09 									   !
!------------------------------------------------------------------!
begin-procedure INACTIVAR-DIRECCION-CLIENTE-SEQ-ADDRESS
display 'INACTIVAR-DIRECCION-CLIENTE-SEQ-ADDRESS'

begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CUST_ADDRESS ICUA
SET ICUA.EFF_STATUS = 'I'
WHERE ICUA.SETID    = $Setid
  AND ICUA.CUST_ID  = $Cust_id
  AND ICUA.ADDRESS_SEQ_NUM = #ultseqDir
  AND ICUA.EFFDT    <> TO_DATE($fecha_out,'DD-MM-YYYY')
  AND ICUA.EFFDT 	<>
     (SELECT MAX(A_ED1.EFFDT) FROM PS_CUST_ADDRESS A_ED1
      WHERE ICUA.SETID           = A_ED1.SETID
        AND ICUA.CUST_ID         = A_ED1.CUST_ID
        AND ICUA.ADDRESS_SEQ_NUM = A_ED1.ADDRESS_SEQ_NUM
        AND A_ED1.EFFDT         <= SYSDATE)
end-sql

end-procedure INACTIVAR-DIRECCION-CLIENTE-SEQ-ADDRESS


!*******************************************************************
!------------------------------------------------------------------!
! Procedure: INSERTAR-RUTA-SECUENCIA
! Descr:     Inserta la ruta y la secuencia en la tabla PS_CK_RUTA_VIS_DTL
!------------------------------------------------------------------!
begin-procedure INSERTAR-RUTA-SECUENCIA

begin-sql ON-ERROR=SQL-ERROR                
INSERT INTO PS_CK_RUTA_VIS_DTL
(
SETID,
SUPPORT_TEAM_CD,
ROUTE_CD,
ADDRESS_SEQ_NUM,
CUST_ID,
SEQ_NBR,
SALES_QUOTA,
BOOKINGS_QUOTA,
LAST_MAINT_OPRID,
LAST_MAINT_DTTM
)
VALUES
(
$Setid,
$Subcust_qual1,
$Ruta,
$address_seq_num,
$Cust_id,
$SecVisita,
0,
0,
$oprid,
SYSDATE)
end-sql

end-procedure INSERTAR-RUTA-SECUENCIA


!*******************************************************************
!------------------------------------------------------------------!
! Procedure: Actualizar-Address-Seq-Ship-Customer-Correccion-Dir   !
! Descr:     Se inactiva las secuencias anteriores				   !
!------------------------------------------------------------------!
! Creación: #003 - JCC 01Dic09 									   !
!------------------------------------------------------------------!
begin-procedure Actualizar-Address-Seq-Ship-Customer-Correccion-Dir   
show ' entro Actualizar-Address-Seq-Ship-Customer-Correccion-Dir '
show ' #ultseqDir ' #ultseqDir
show ' $Setid  ' $Setid
show ' $Cust_id' $Cust_id
begin-sql ON-ERROR=SQL-ERROR                
UPDATE PS_CUSTOMER A
SET A.ADDRESS_SEQ_SHIP = #ultseqDir
WHERE A.SETID   = $Setid
  AND A.CUST_ID = $Cust_id
end-sql
show ' salio Actualizar-Address-Seq-Ship-Customer-Correccion-Dir '
end-procedure   Actualizar-Address-Seq-Ship-Customer-Correccion-Dir     


! Inicio 001 - MV - 04/02/2011 

!----------------------------------------------------------------------
! Procedure: valida-exite-cliente
! Descr: Valida existe el cliente en la customer
!----------------------------------------------------------------------

begin-procedure Valida-Exite-Cliente
LET $EXISTE_CLIENTE = 'N'

Begin-Select ON-ERROR=SQL-ERROR
CUST.CUST_ID

	LET $EXISTE_CLIENTE = 'Y'

FROM PS_CUSTOMER CUST
WHERE CUST.SETID=$Setid
AND CUST.CUST_ID=$Cust_id
End-Select

end-procedure Valida-Exite-Cliente   


!----------------------------------------------------------------------
! Procedure: Valida-Existe-Zona
! Descr: Valida existe la zona en la team_code_tbl
!----------------------------------------------------------------------
begin-procedure Valida-Existe-Zona
LET $EXISTE_ZONA = 'N'

Begin-Select ON-ERROR=SQL-ERROR
TEAM_CODE.SUPPORT_TEAM_CD

	LET $EXISTE_ZONA = 'Y'

FROM PS_TEAM_CODE_TBL TEAM_CODE
WHERE TEAM_CODE.SETID=$Setid
AND TEAM_CODE.SUPPORT_TEAM_CD=$Subcust_qual1
End-Select

end-procedure Valida-Existe-Zona   


!----------------------------------------------------------------------
! Procedure: Imprime-Archivo-Error
! Descr: Imprime los errores en un archivo
!----------------------------------------------------------------------


Begin-Procedure esZonaDeContactos($Setid, $Subcust_qual1, :$zonaContactos)

  let $zonaContactos = 'N'

BEGIN-SELECT ON-ERROR=SQL-ERROR
'ENTRO'

   let $zonaContactos = 'Y'

FROM PS_CK_ZONACONTACTO 
WHERE SETID= $Setid
  AND SUPPORT_TEAM_CD= $Subcust_qual1 
  AND FLAG='Y'
END-SELECT  

End-Procedure


!----------------------------------------------------------------------
! Procedure: Buscar_Miembro_Grupo
! Descr: Busqueda de Miembro de Grupo
! MLBO 18-06-2009
!----------------------------------------------------------------------
begin-procedure Buscar_Miembro_Grupo

#IFNDEF DEBUGD 

   Display 'Buscar_Miembro_Grupo'
   Show 'Parametros:' $Setid ' ' $Subcust_qual1

#END-IF

Begin-Select ON-ERROR=SQL-ERROR
team_members.SUPPORT_TEAM_MBR
	
	let $MiemGrupo = &team_members.SUPPORT_TEAM_MBR

FROM PS_TEAM_MEMBERS team_members
WHERE team_members.EFFDT = (SELECT MAX(team_members_ED.EFFDT) 
                 FROM PS_TEAM_MEMBERS team_members_ED WHERE team_members.SETID = team_members_ED.SETID 
                 AND team_members.SUPPORT_TEAM_CD = team_members_ED.SUPPORT_TEAM_CD 
                 AND team_members_ED.EFFDT <= SYSDATE)
AND team_members.SETID =$Setid                  
AND team_members.SUPPORT_TEAM_CD =$Subcust_qual1 
AND team_members.MANAGER = 'N'
End-Select

#IFNDEF DEBUGD 

   Display 'Buscar_Miembro_Grupo'
   Show 'Salidas:' $MiemGrupo

#END-IF

end-procedure Buscar_Miembro_Grupo 


!----------------------------------------------------------------------
! Procedure: Buscar_Miembro_ID
! Descr: Busqueda de Miembro id
! MLBO 18-06-2009
!----------------------------------------------------------------------
begin-procedure Buscar_Miembro_ID

#IFNDEF DEBUGD 

   Display 'Buscar_Miembro_ID'
   Show 'Parametros:' $Setid ' ' $MiemGrupo

#END-IF

Begin-Select ON-ERROR=SQL-ERROR
member_id.EMPLID
member_id.NAME1
	
	let $MemberId =  &member_id.EMPLID
	let $NombreMem =  &member_id.NAME1

FROM PS_MEMBER_PERSON member_id
WHERE member_id.SETID = $Setid
AND member_id.SUPPORT_TEAM_MBR = $MiemGrupo
End-Select

end-procedure Buscar_Miembro_ID 


!----------------------------------------------------------------------
! Procedure: Valida-Existe-contacto
! Descr: Valida existe el cliente en la Contacto
! MLBO 18-06-2009
!----------------------------------------------------------------------
begin-procedure Valida-Existe-contacto
LET $EXISTE_CONTACTO = 'N'

Begin-Select ON-ERROR=SQL-ERROR
CONT.CONTACT_ID

	LET $EXISTE_CONTACTO = 'Y'

FROM PS_CONTACT CONT
WHERE CONT.SETID = $Setid
AND CONT.CONTACT_ID = $MemberId
End-Select

end-procedure Valida-Existe-contacto  


!----------------------------------------------------------------------
! Procedure: CrearContacto
! Descr: Crea el contacto del cliente
!----------------------------------------------------------------------
Begin-Procedure CrearContacto($Setid, $emplId, $supportTeamCd, $supportTeamMember, $opridId)

  let $nombre = ' '
  let $email = ' '
  let $cellPhone = '364-9777'
  
! Encuentra la máxima fecha efectiva para las zonas
BEGIN-SELECT ON-ERROR=SQL-ERROR
TO_CHAR(MAX(EFFDT),'YYYY-MM-DD') &MAX_EFFDT

  let $FechaMaxima = &MAX_EFFDT

FROM PS_TEAM_CODE_TBL A
WHERE A.SETID = $Setid
  AND A.SUPPORT_TEAM_CD = $supportTeamCd
  AND A.EFFDT <= SYSDATE
END-SELECT

BEGIN-SELECT ON-ERROR=SQL-ERROR
OPRDEFNDESC 

  let $nombre = &OPRDEFNDESC

FROM PSOPRDEFN 
WHERE OPRID=$emplId
END-SELECT

BEGIN-SELECT ON-ERROR=SQL-ERROR
EMAILID 

  let $email = &EMAILID

FROM PSUSEREMAIL 
WHERE OPRID=$emplId
AND PRIMARY_EMAIL='Y'
END-SELECT

! Encuentra el número de celular del vendedor

BEGIN-SELECT 
PHONE 

   let $cellPhone = &PHONE

FROM PS_MEMBER_PHONE 
WHERE SETID = $Setid
  AND SUPPORT_TEAM_MBR= $supportTeamMember
  AND PHONE_TYPE='CELL'
END-SELECT

BEGIN-SQL 
INSERT INTO PS_CONTACT
(SETID, 
CONTACT_ID, 
EFFDT, 
EFF_STATUS, 
CONTACT_FLAG, 
NAME1, 
TITLE, 
EMAILID, 
COMM_METHOD, 
SALUTATION_CD, 
SALUTATION, 
CREATE_CUSTOMER, 
LAST_MAINT_OPRID, 
DATE_LAST_MAINT, 
AUTHORIZATION_ID, 
PERSON_ID, 
LANGUAGE_PREF, 
AUTO_PLAN_DAYS, 
AUTO_PLAN_HOLD, 
CALL_TIME, 
BIRTHDAY, 
ORDER_EVENT_GROUP, 
PREF_FIRST_NAME, 
AUTO_PLAN_OPRID) 
VALUES (
$Setid, 
$emplId, 
TO_DATE($FechaMaxima,'YYYY-MM-DD'), 
'A', 
'E', 
$nombre, 
' ', 
$email, 
'C', 
' ', 
' ', 
'N', 
$opridId, 
sysdate, 
'A', 
' ', 
'ESP', 
0, 
' ', 
' ', 
' ', 
' ', 
' ', 
' '
)
END-SQL

BEGIN-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_CONTACT_LANG
(
SETID,
CONTACT_ID, 
EFFDT, 
LANGUAGE_CD,
NAME1,
TITLE,
SALUTATION
)
VALUES
(
$Setid, 
$emplId, 
TO_DATE($FechaMaxima,'YYYY-MM-DD'), 
'ESP',
$nombre, 
' ',
' ' 
)
END-SQL

BEGIN-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_CONTACT_PHN
(SETID, 
CONTACT_ID, 
EFFDT, 
PHONE_TYPE, 
COUNTRY_CODE, 
PHONE, 
EXTENSION, 
LAST_MAINT_OPRID, 
DATE_LAST_MAINT, 
PRIMARY_PHONE) 
VALUES
(
$Setid, 
$emplId, 
TO_DATE($FechaMaxima,'YYYY-MM-DD'), 
'CELL', 
'057', 
$cellPhone, 
' ', 
$opridId, 
sysdate, 
'N')
END-SQL

End-Procedure


!----------------------------------------------------------------------
! Procedure: Valida-Existe-cliente-contacto
! Descr: Valida existe el cliente en el Contacto
! MLBO 18-06-2009
!----------------------------------------------------------------------
begin-procedure Valida-Existe-cliente-contacto

#IFNDEF DEBUGD 

   Display 'Valida-Existe-cliente-contacto'
   Show 'Parametros:' $Setid ' ' $MemberId ' ' $Cust_id

#END-IF

LET $EXISTE_CONTACTO_CLIENTE = 'N'

Begin-Select ON-ERROR=SQL-ERROR
CONTACTO_CLIE.CONTACT_ID

	LET $EXISTE_CONTACTO_CLIENTE = 'Y'

FROM PS_CONTACT_CUST CONTACTO_CLIE
WHERE CONTACTO_CLIE.SETID = $Setid
AND CONTACTO_CLIE.CONTACT_ID = $MemberId
AND CONTACTO_CLIE.CUST_ID = $Cust_id
End-Select

#IFNDEF DEBUGD 

   Display 'Valida-Existe-cliente-contacto'
   Show 'Salidas:' $EXISTE_CONTACTO_CLIENTE

#END-IF

end-procedure Valida-Existe-cliente-contacto 


!----------------------------------------------------------------------
! Procedure: Inserta-CUST-TEAM
! Descr: Inserta las zonas al cliente
!----------------------------------------------------------------------
Begin-procedure Inserta-CUST-TEAM 

let #items-ins = #items-ins + 1

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_TEAM 
(SETID,
CUST_ID,
SUPPORT_TEAM_CD,
DEFAULT_FLAG,
LAST_MAINT_OPRID,
DATE_LAST_MAINT)
VALUES
($Setid,
$Cust_id,
$Subcust_qual1,
'N',
$oprid,
SYSDATE)
end-sql

End-procedure Inserta-CUST-TEAM


!----------------------------------------------------------------------
! Procedure: Inserta-CLIENTE-CONTACTO
! Descr: Inserta el cliente en el contacto
! MLBO 18-06-2009
!----------------------------------------------------------------------
Begin-procedure Inserta-CLIENTE-CONTACTO

let #items-ins = #items-ins + 1

Begin-SELECT ON-ERROR=SQL-ERROR
TO_CHAR(EFFDT,'YYYY-MM-DD') &FechaContacto

  let $fechaContacto = &FechaContacto

FROM PS_CONTACT 
WHERE SETID = $Setid
  AND CONTACT_ID = $MemberId
  AND EFFDT <= SYSDATE
END-SELECT

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CONTACT_CUST 
(SETID,
CONTACT_ID,
EFFDT,
CUSTOMER_SETID,
CUST_ID,
EFF_STATUS,
CNTCT_SEQ_NUM,
ADDRESS_SEQ_NUM,
BILL_TO_FLG,
SOLD_TO_FLG,
SHIP_TO_FLG,
BROKER_FLG,
CRSPD_CUST,
ADDRESS_MAINT,
ORDER_SAVE,
ALL_ORDERS_FLG,
LAST_MAINT_OPRID,
DATE_LAST_MAINT,
CONTACT_CODE,
PRIMARY_CUST
)
VALUES
($Setid,
$MemberId,
TO_DATE($fechaContacto,'YYYY-MM-DD'),
$Setid,
$Cust_id,
'A',
 1,
'1',
'N',
'Y',
'Y',
'N',
'N',
'N',
'N',
'N',
$prcs_oprid,
SYSDATE,
' ',
'N'
)
end-sql

End-procedure Inserta-CLIENTE-CONTACTO




!----------------------------------------------------------------------
! Inicio 006 - CER - 18/05/2011
!----------------------------------------------------------------------
! Procedure: INSERTAR-CUSTGROUPTYP
! Descr: Inserta los grupos de clientes a partir de la parametrización
!----------------------------------------------------------------------
Begin-procedure INSERTAR-CUSTGROUPTYP

Let $ExisteParam = 'N'


begin-select

GROUPTYP.CUST_GRP_TYPE,
GROUPTYP.CUSTOMER_GROUP

	Let $ExisteParam	= 'Y'
	Let $TipoGrupo		= &GROUPTYP.CUST_GRP_TYPE
	Let $GrupoCliente	= &GROUPTYP.CUSTOMER_GROUP
	do INSERTAR-GRUPO-CLIENTES

FROM PS_CK_CUSTGROUPTYP GROUPTYP
WHERE SETID = $Setid
AND CUSTOMER_TYPE = $Canal
end-select


If $ExisteParam = 'N'
	
	let #Secuencia    = #Secuencia + 1
	let #message_seq  = #message_seq + 1   
	let #NbrSet       = 21000
	let #Nbr          = 41
	Do  Insertar_Mensaje

	let #ParamSecuencia = 1
	let $Parametro      = $Canal
	Do Insertar_Parametro_mensaje

	let #ParamSecuencia = 2
	let $Parametro      = $Cust_id
	Do Insertar_Parametro_mensaje
	
End-If


End-procedure INSERTAR-CUSTGROUPTYP



!----------------------------------------------------------------------
! Inicio 003 - MV - 07/02/2011
!----------------------------------------------------------------------
! Procedure: INSERTAR-GRUPO-CLIENTES
! Descr: Inserta los grupos de clientes
!----------------------------------------------------------------------
Begin-procedure INSERTAR-GRUPO-CLIENTES

show 'Entré INSERTAR-GRUPO-CLIENTES'

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO PS_CUST_CGRP_LNK
(SETID, 
CUST_ID, 
CUST_GRP_TYPE,
CUSTOMER_GROUP,
DEFAULT_TAX_GRP,
DATETIME_ADDED,
LASTUPDDTTM,
LAST_MAINT_OPRID 
)
VALUES
($Setid,
$Cust_id,
$TipoGrupo,
$GrupoCliente,
'N',
SYSDATE,
SYSDATE,
$oprid
)
end-sql


show 'Salí INSERTAR-GRUPO-CLIENTES'

End-procedure INSERTAR-GRUPO-CLIENTES

begin-procedure CAMBIAR-NOMBRE

	If isblank($name1) 
		Let $name1 = ' '
	End-if
	
display 'CAMBIAR-NOMBRE'
begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CUST_CONTACT
SET ps_cust_contact.name1 = initcap($name1)
where ps_cust_contact.setid           = $setid
and   ps_cust_contact.cust_id         = $cust_id
end-sql

begin-sql ON-ERROR=SQL-ERROR
UPDATE PS_CK_CLIPUNTOS
   SET ps_ck_clipuntos.name1 = initcap($name1)
where ps_ck_clipuntos.setid   = $setid
and   ps_ck_clipuntos.cust_id = $cust_id
end-sql
end-procedure   CAMBIAR-NOMBRE

Begin-procedure execute-commit
begin-sql ON-ERROR=SQL-ERROR
COMMIT
end-sql
show 'SE HIZO COMMIT PARA EL CLIENTE ' $cust_id
end-procedure !execute-commit

begin-procedure GRABAR-ARCHIVO-CONTROL

begin-sql
INSERT INTO PS_CK_CONT_CLIENTE
VALUES
(
$setid,
SYSDATE,
$unidad,
#prcs_process_instance,
#tot_leido,
#tot-rows, 
#cnt-rows, 
#no-tot-rows,
#cnt_error)
end-sql
end-procedure   GRABAR-ARCHIVO-CONTROL


begin-procedure actualizar-requerimiento
begin-SQL On-Error=SQL-Error
UPDATE PSPRCSRQST
   SET RUNSTATUS = 10
 WHERE PRCSINSTANCE = #prcs_process_instance
end-sql
end-procedure actualizar-requerimiento


begin-procedure TERMINATE
  if #prcs_process_instance > 0
     do Update-prcs-run-status
  end-if   
   if #ErrorCount > 0 
      do rollback-transaction
      display 'Hizo Rollback Terminate'
    end-if
   do reset
end-procedure


!  <Inicio 007>


!-----------------------------------------------------------------------
! Funcion: InsertaDatosTercerosMediosMagneticos
! Descripcion: Insercion en tablas de medios
!-----------------------------------------------------------------------
BEGIN-PROCEDURE InsertaDatosTercerosMediosMagneticos

DISPLAY 'LLEGAMOS'

begin-select ON-ERROR=SQL-ERROR
SETIDAAA.SETID

  let $setIdTercero = &SETIDAAA.SETID

FROM PS_SET_CNTRL_REC SETIDAAA
WHERE SETIDAAA.RECNAME = 'LC_RPOS_TERC_HD'
  AND SETIDAAA.SETCNTRLVALUE = $Setid
End-Select

DISPLAY 'LLEGAMOS 2'


	! CABECERA DEL TERCERO
	Let $ExisteTerceroLinea = 'N'
        let $quote = chr(39)
	Let $WhereSetid1 = ' '
	if $modOrig ='GL' 
	   let $WhereSetid1 = $WhereSetid1 || ' AND TL.CK_SETID_TERCERO = ' ||$quote||$setIdTercero||$quote
	   let $WhereSetid1 = $WhereSetid1 || ' AND TL.LC_TERCERO = ' ||$quote||$Cust_id||$quote
	end-if
	if $modOrig ='AR'
	   let $WhereSetid1 = $WhereSetid1 || ' AND TL.SETID_CUSTOMER = ' ||$quote||$Setid||$quote
	   let $WhereSetid1 = $WhereSetid1 || ' AND TL.CUST_ID = ' ||$quote||$Cust_id||$quote
	end-if
	Do ExisteTerceroLinea($setIdTercero, $Setid, $Cust_id, $modOrig, $Tipo_ident, $ExisteTerceroLinea, $IdTercero, $ckCodOrigen, $WhereSetid1)
	If $ExisteTerceroLinea = 'N'
	
	   Do ExisteTercero($setIdTercero, $IdTercero, $ExisteTercero)
	   If $ExisteTercero = 'N'
           
              Do RegistrarTerceroCabecera($setIdTercero, $IdTercero)
             
           End-If
           
	! LINEA DEL TERCERO
        End-If

DISPLAY 'LLEGAMOS 3'
	
	!Inicio 039
	
    If $TipoPersona = 'N'
       Let $nameTerc = ' '
    Else
       Let $nameTerc = $Name1
    End-If
	
	Let $ExisteReposTercLinea = 'N'
	Let $ExisteReposTercName = 'N'
	Let $ExisteReposTercDire = 'N'
	if $modOrig ='GL'
	   Do ExisteReposTercLinea($setIdTercero, $IdTercero, $modOrig, $Tipo_ident, $setIdTercero, $Cust_id, ' ', ' ', ' ', ' ', $DigitoVerificacion, $TipoPersona, $ExisteReposTercLinea)
	   Do ExisteReposTercName($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $setIdTercero, $nameTerc, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido, $ExisteReposTercName)
	   Do ExisteReposTercDire($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $setIdTercero, 'COL', $Address1, $Address2, ' ', ' ', $State, $City, ' ', $ExisteReposTercDire)
    end-if
	if $modOrig ='AR'	
	   Do ExisteReposTercLinea($setIdTercero, $IdTercero, $modOrig, $Tipo_ident, ' ', ' ', ' ', ' ', $Setid, $Cust_id, $DigitoVerificacion, $TipoPersona, $ExisteReposTercLinea)
	   Do ExisteReposTercName($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $Setid, $nameTerc, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido, $ExisteReposTercName)
	   Do ExisteReposTercDire($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $Setid, 'COL', $Address1, $Address2, ' ', ' ', $State, $City, ' ', $ExisteReposTercDire)
	end-if
	
    If $ExisteReposTercLinea = 'N' or $ExisteReposTercName = 'N' or $ExisteReposTercDire = 'N'
	!Fin 039
	
	   !Inicio modificación 018
	   let $ckCodOrigen = '1'
	   !Inicio 038
	   Let $WhereSetid = ' AND '
	   If $ExisteTerceroLinea = 'Y'
	      if $modOrig ='GL' 
	        let $WhereSetid = $WhereSetid || ' CK_SETID_TERCERO = ' ||$quote||$setIdTercero||$quote
	       let $WhereSetid = $WhereSetid || ' AND LC_TERCERO = ' ||$quote||$Cust_id||$quote
	      end-if
	      if $modOrig ='AR'
	       let $WhereSetid = $WhereSetid || ' SETID_CUSTOMER = ' ||$quote||$Setid||$quote
	       let $WhereSetid = $WhereSetid || ' AND CUST_ID = ' ||$quote||$Cust_id||$quote	    
	      end-if
	      SHOW '$modOrig: ' $modOrig ' $WhereSetid: ' $WhereSetid
	      do AumentarSecuenciaTerceroLn($setIdTercero, $IdTercero, $modOrig , $Setid, $WhereSetid)
	   End-if
	
	
	   Show 'RegistrarTerceroLinea' 
	   SHOW '$modOrig: ' $modOrig  ' $ckCodOrigen: ' $ckCodOrigen ' $setIdTercero: ' $setIdTercero
	   SHOW  'Tercero: ' $IdTercero ', ' $modOrig ', ' $ckCodOrigen ', ' $Tipo_ident ', ' $Setid ', ' $Cust_id
	   if $modOrig ='GL'
	   Do RegistrarTerceroLinea($setIdTercero, $IdTercero, $modOrig , $ckCodOrigen, $Tipo_ident, $setIdTercero,$Cust_id,' ',' ', ' ', ' ', $DigitoVerificacion, $TipoPersona, '', $current-date, '')
	   end-if
	   if $modOrig ='AR'
	   Do RegistrarTerceroLinea($setIdTercero, $IdTercero, $modOrig , $ckCodOrigen, $Tipo_ident, ' ', ' ',' ',' ', $Setid, $Cust_id, $DigitoVerificacion, $TipoPersona, '', $current-date, '')
	   end-if
	   !Fin 038

	   Show 'Va por ExisteNombreTablaRPOS'
	   Let $ExisteRPOS = 'N'
	   !Inicio 038
	   if $modOrig ='GL'
		   Do ExisteNombreTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $setIdTercero, $fecha_out, $ExisteRPOS)
	   else
		   Do ExisteNombreTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $Setid, $fecha_out, $ExisteRPOS)
	   end-if
	
	   !Fin 038
	   If $ExisteRPOS = 'Y'
       !Inicio 038
	   if $modOrig ='GL'
		   do AumentarSecuenciaTerceroName($setIdTercero, $IdTercero, $modOrig, $setIdTercero)
       else
		   do AumentarSecuenciaTerceroName($setIdTercero, $IdTercero, $modOrig, $Setid)		
       end-if
	   End-if

	   if $modOrig ='GL'

	   Do RegistrarNombreTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $setIdTercero, $fecha_out, $nameTerc, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)

	   else

	   Do RegistrarNombreTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $Setid, $fecha_out, $nameTerc, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)

	   end-if


	   Show 'Va por ExisteDireccionTablaRPOS'
	   Let $ExisteRPOS = 'N'
	   !Inicio 038
	   if $modOrig ='GL'
	   Do ExisteDireccionTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $setIdTercero, $fecha_out, $ExisteRPOS)
	   else
	   Do ExisteDireccionTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $Setid, $fecha_out, $ExisteRPOS)
	   end-if

	   If $ExisteRPOS = 'Y'

	   if $modOrig ='GL'
		   do AumentarSecuenciaTerceroDire($setIdTercero, $IdTercero, $modOrig, $setIdTercero)
	   else
		   do AumentarSecuenciaTerceroDire($setIdTercero, $IdTercero, $modOrig, $Setid)
	   end-if
	   End-if
	   if $modOrig ='GL'
	   Do RegistrarDireccionTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $setIdTercero, $fecha_out, 'COL', $Address1, $Address2, ' ', ' ', $State, $City,' ')
	   else
	   Do RegistrarDireccionTablaRPOS($setIdTercero, $IdTercero, $Tipo_ident, $modOrig, $ckCodOrigen, $Setid, $fecha_out, 'COL', $Address1, $Address2, ' ', ' ', $State, $City,' ')
	   End-if
	   
	End-If
	
	Show 'Va por ExisteNombreTablaCustomName'
	Let $ExisteRPOS = 'N'
	Do ExisteNombreTablaCustomName($Setid, $Cust_id,  $fecha_out, $ExisteRPOS)
	If $ExisteRPOS = 'N'
		Show 'no ModificarNombreTablaCustomName'
		Do RegistrarNombreTablaCustomName($Setid, $Cust_id, $fecha_out, $TipoPersona, $Nombre1, $Nombre2, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)
	Else
		Show 'ModificarNombreTablaCustomName'
		Do ModificarNombreTablaCustomName($Setid, $Cust_id, $fecha_out, $TipoPersona, $Nombre1, $Nombre2, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)
	End-if
	Show 'Terminacion'


END-PROCEDURE


!-----------------------------------------------------------------------
! Funcion: ExisteTercero
! Descripcion: Verifica la existencia del tercero
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ExisteTercero($Setid, $Nit, :$ExisteTercero)

	Let $ExisteTercero = 'N'
BEGIN-SELECT
'EXISTE TERCERO'
	Let $ExisteTercero = 'Y'
FROM PS_LC_RPOS_TERC_HD
WHERE SETID         = $Setid
  AND NIT_PROVEEDOR = $Nit
END-SELECT

END-PROCEDURE

!-----------------------------------------------------------------------
! Funcion: EncontrarTipoPersona
! Descripcion: Busca el tipo de persona que le corresponde al tipo de documento de identidad
!-----------------------------------------------------------------------
BEGIN-PROCEDURE EncontrarTipoPersona($tipoDocumento, :$tipoPersona)

 ! Inicializaciòn de variables
 let $tipoPersona = ' '

BEGIN-SELECT ON-ERROR=SQL-ERROR
A.TIPO_PER_HO

  let $tipoPersona = &A.TIPO_PER_HO

FROM PS_CK_TIPO_DOCUMNT A 
WHERE A.CK_TIPO_IDENT =  $tipoDocumento
  AND A.EFFDT = ( SELECT MAX(B.EFFDT) 
                     FROM PS_CK_TIPO_DOCUMNT B 
                    WHERE B.CK_TIPO_IDENT = A.CK_TIPO_IDENT 
                      AND B.EFFDT <= SYSDATE )
END-SELECT

END-PROCEDURE 

!-----------------------------------------------------------------------
! Funcion: ExisteTerceroLinea
! Descripcion: Verifica la existencia del tercero
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ExisteTerceroLinea($setIdTercero, $Setid, $Nit, $Origen, $TipoIdentificacion, :$ExisteTerceroLinea, :$IdTercero, :$ModOrigen, $WhereSetid1)
SHOW 'ExisteTerceroLinea'
SHOW '$setIdTercero: ' $setIdTercero ' $Setid: ' $Setid  ' $Nit: ' $Nit  ' $Origen: ' $Origen ' $TipoIdentificacion: ' $TipoIdentificacion ' $WhereSetid1: ' $WhereSetid1
	Let $ExisteTerceroLinea = 'N'
	
	let $ModOrigen = '1'
	
BEGIN-SELECT
TL.NIT_PROVEEDOR
TL.CK_COD_ORIGEN


	Let $ExisteTerceroLinea = 'Y'
	let $IdTercero = &TL.NIT_PROVEEDOR
	let $ModOrigen = &TL.CK_COD_ORIGEN
	Show ' Si encontro tercero'
	
	
FROM PS_LC_RPOS_TERC_LN TL
WHERE TL.SETID = $setIdTercero
  [$WhereSetid1]
  AND TL.CK_MOD_ORIGEN  = $Origen
END-SELECT

Show ' Si encontro tercero 2'

If $ExisteTerceroLinea = 'N'

  ! Verifica si el tipo de identificaciòn requiere digito de verificaciòn en cuyo caso lo quita del nit
  DO reqDigitoVerificacion($TipoIdentificacion, $RequiereDigito)
  
  If $RequiereDigito = 'Y'
  
     let #lengthNit = length($Nit)
     let $IdTercero = substr($Nit, 1, #lengthNit -1 )
  
  Else
  
     let $IdTercero = $Nit
  
  End-If


BEGIN-SELECT ON-ERROR=SQL-ERROR
MAX(TL1.CK_COD_ORIGEN) &CKCODORIGEN

   let $ModOrigen = &CKCODORIGEN 
   let $ModOrigen = to_char(to_number($ModOrigen) + 1)

FROM PS_LC_RPOS_TERC_LN TL1
WHERE TL1.SETID = $setIdTercero
  AND TL1.NIT_PROVEEDOR = $IdTercero
  AND TL1.CK_MOD_ORIGEN = $Origen
END-SELECT 


END-IF


Show ' Si encontro tercero 3'
  
END-PROCEDURE


!-----------------------------------------------------------------------
! Funcion: RegistrarTerceroCabecera
! Descripcion: Registra la cabecera del tercero
!-----------------------------------------------------------------------
BEGIN-PROCEDURE RegistrarTerceroCabecera($setIdTercero, $IdTercero)

BEGIN-SQL
INSERT INTO PS_LC_RPOS_TERC_HD(SETID, NIT_PROVEEDOR) VALUES($setIdTercero, $IdTercero)
END-SQL

END-PROCEDURE

!-----------------------------------------------------------------------
! Funcion: RegistrarTerceroLinea
! Descripcion: Registra la linea del tercero
!-----------------------------------------------------------------------
BEGIN-PROCEDURE RegistrarTerceroLinea($setIdTercero, $IdTercero, $Origen, $ModoOrigen, $TipoIdentificacion, $SetidTerc, $Tercero, $SetidVendor, $Vendor, $SetidCliente, $Cliente, $DigitoVerificacion, $TipoPersona, $AddDt, $ModifiedDt, $ChekoutDt)

Show $setIdTercero ' ' $IdTercero  ' ' $Origen ' ' $ModoOrigen ' ' $TipoIdentificacion ' ' $SetidTerc ' ' $Tercero ' ' $SetidVendor ' ' $Vendor ' ' $SetidCliente ' ' $Cliente ' ' $DigitoVerificacion ' ' $TipoPersona ' ' $AddDt ' ' $ModifiedDt ' ' $ChekoutDt

BEGIN-SQL
INSERT INTO PS_LC_RPOS_TERC_LN(SETID,  NIT_PROVEEDOR, CK_MOD_ORIGEN, CK_COD_ORIGEN, TIPO_IDENTIFICAC,    CK_SETID_TERCERO, LC_TERCERO, SETID_VENDOR, VENDOR_ID, SETID_CUSTOMER, CUST_ID,  LC_DIGITO_VERIF,     TIPO_PER_HO,   ADD_DT, MODIFIED_DT, CHECKOUT_DT) 
VALUES($setIdTercero, $IdTercero,      $Origen,       $ModoOrigen,   $TipoIdentificacion, $SetidTerc,    $Tercero,   $SetidVendor, $Vendor,   $SetidCliente,  $Cliente, $DigitoVerificacion, $TipoPersona , $AddDt, $ModifiedDt, $ChekoutDt)
END-SQL

END-PROCEDURE

!-----------------------------------------------------------------------
! Funcion: ModificarTerceroLinea
! Descripcion: Modifica la linea del tercero
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ModificarTerceroLinea($setIdTercero, $IdTercero, $Origen, $ModoOrigen, $TipoIdentificacion, $SetidTercero, $Tercero, $SetidVendor, $Vendor, $SetidCliente, $Cliente, $DigitoVerificacion, $TipoPersona, $AddDt, $ModifiedDt, $ChekoutDt)

BEGIN-SQL
UPDATE PS_LC_RPOS_TERC_LN
   SET CK_SETID_TERCERO = $SetidTercero,
   LC_TERCERO = $Tercero, 
   SETID_VENDOR = $SetidVendor, 
   VENDOR_ID = $Vendor, 
   SETID_CUSTOMER = $SetidCliente, 
   CUST_ID = $Cliente,  
   LC_DIGITO_VERIF = $DigitoVerificacion,     
   TIPO_PER_HO = $TipoPersona,   
   ADD_DT = $AddDt,
   MODIFIED_DT = $ModifiedDt,
   CHECKOUT_DT = $ChekoutDt
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND CK_MOD_ORIGEN = $Origen
  AND CK_COD_ORIGEN = $ModoOrigen
  AND TIPO_IDENTIFICAC = $TipoIdentificacion
END-SQL

END-PROCEDURE

!Inicio modificación 018
!-----------------------------------------------------------------------
! Funcion: AumentarSecuenciaTerceroLn
! Descripcion: Modifica la linea del tercero Aumentando la secuencia
!-----------------------------------------------------------------------
!Inicio 038
!BEGIN-PROCEDURE AumentarSecuenciaTerceroLn($setIdTercero, $IdTercero, $Origen, $SetidCliente)
BEGIN-PROCEDURE AumentarSecuenciaTerceroLn($setIdTercero, $IdTercero, $Origen, $SetidCliente, $WhereSetid)
!Fin 038
BEGIN-SQL
UPDATE PS_LC_RPOS_TERC_LN
   SET CK_COD_ORIGEN = CK_COD_ORIGEN + 1
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND CK_MOD_ORIGEN = $Origen
  [$WhereSetid]
END-SQL

END-PROCEDURE
!Fin modificación 018

!-----------------------------------------------------------------------
! Funcion: ExisteNombreTablaRPOS
! Descripcion: Verifica si el nombre ya existe en la tabla LC_RPOS_LN_NAME
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ExisteNombreTablaRPOS($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $ModoOrigen, $Setid, $Cust_status_dt, :$ExisteRPOS)

	Let $ExisteRPOS = 'N'

BEGIN-SELECT
'EXISTE PS_LC_RPOS_LN_NAME'
	Let $ExisteRPOS = 'Y'
FROM PS_LC_RPOS_LN_NAME
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND CK_MOD_ORIGEN = $Origen  
  AND SETID_SOURCE = $Setid
END-SELECT

END-PROCEDURE

!-----------------------------------------------------------------------
! Funcion: ExisteDireccionTablaRPOS
! Descripcion: Verifica si la direccion ya existe en la tabla LC_RPOS_LN_DIRE
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ExisteDireccionTablaRPOS($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $ModoOrigen, $Setid, $Cust_status_dt, :$ExisteRPOS)

	Let $ExisteRPOS = 'N'
BEGIN-SELECT
'EXISTE PS_LC_RPOS_LN_DIRE'
	Let $ExisteRPOS = 'Y'
FROM PS_LC_RPOS_LN_DIRE
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND CK_MOD_ORIGEN = $Origen
  AND SETID_SOURCE = $Setid
END-SELECT

END-PROCEDURE

!-----------------------------------------------------------------------
! Funcion: ExisteNombreTablaCustomName
! Descripcion: Verifica si el nombre ya existe en la tabla PS_LC_CUSTOM_NAME
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ExisteNombreTablaCustomName($Setid, $Cust_id, $Cust_status_dt, :$ExisteRPOS)

	Let $ExisteRPOS = 'N'
BEGIN-SELECT
'EXISTE PS_LC_CUSTOM_NAME'
	Let $ExisteRPOS = 'Y'
FROM PS_LC_CUSTOM_NAME
WHERE SETID = $Setid
  AND CUST_ID = $Cust_id
  AND EFFDT = TO_DATE($Cust_status_dt,'DD/MM/YYYY')
END-SELECT

END-PROCEDURE

!-----------------------------------------------------------------------
! Funcion: RegistrarNombreTablaRPOS
! Descripcion: Registra el nombre en la tabla LC_RPOS_LN_NAME
!-----------------------------------------------------------------------
!Inicio 039
BEGIN-PROCEDURE RegistrarNombreTablaRPOS($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $ModoOrigen, $Setid, $Cust_status_dt, $nameTerc, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)
show '$Setid '$Setid
BEGIN-SQL
INSERT INTO PS_LC_RPOS_LN_NAME(SETID,  NIT_PROVEEDOR, TIPO_IDENTIFICAC,    CK_MOD_ORIGEN, CK_COD_ORIGEN, SETID_SOURCE, START_DATE,                            EFF_STATUS, NOM_TERCERO,    LC_MMG_PRIM_NOMBRE, LC_MMG_SEGU_NOMBRE, LC_MMG_PRI_APELLID, LC_MMG_SEG_APELLID)
		        VALUES($setIdTercero, $IdTercero,      $TipoIdentificacion, $Origen,       $ModoOrigen, $Setid,   TO_DATE($Cust_status_dt,'DD/MM/YYYY'), 'A',        $nameTerc, $PrimerNombre,      $SegundoNombre,     $PrimerApellido,    $SegundoApellido)
END-SQL

END-PROCEDURE 

!-----------------------------------------------------------------------
! Funcion: RegistrarNombreTablaCustomName
! Descripcion: Registra el nombre en la tabla PS_LC_CUSTOM_NAME
!-----------------------------------------------------------------------
BEGIN-PROCEDURE RegistrarNombreTablaCustomName($Setid, $Cust_id, $Cust_status_dt, $TipoPersona, $Nombre1, $Nombre2, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)

BEGIN-SQL
INSERT INTO PS_LC_CUSTOM_NAME(SETID,  CUST_ID,  EFFDT,                                 EFF_STATUS, TIPO_PER_HO,  NAME1,    NAME2,    LC_MMG_PRIM_NOMBRE, LC_MMG_SEGU_NOMBRE, LC_MMG_PRI_APELLID, LC_MMG_SEG_APELLID)
		       VALUES($Setid, $Cust_id, TO_DATE($Cust_status_dt,'DD/MM/YYYY'), 'A',        $TipoPersona, $Nombre1, $Nombre2, $PrimerNombre,      $SegundoNombre,     $PrimerApellido,    $SegundoApellido)
END-SQL

END-PROCEDURE 

!-----------------------------------------------------------------------
! Funcion: ModificarNombreTablaCustomName
! Descripcion: Modifica el nombre en la tabla PS_LC_CUSTOM_NAME
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ModificarNombreTablaCustomName($Setid, $Cust_id, $Cust_status_dt, $TipoPersona, $Nombre1, $Nombre2, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)

BEGIN-SQL
UPDATE PS_LC_CUSTOM_NAME
   SET TIPO_PER_HO = $TipoPersona,
   NAME1 = $Nombre1,
   NAME2 = $Nombre2,
   LC_MMG_PRIM_NOMBRE = $PrimerNombre,
   LC_MMG_SEGU_NOMBRE = $SegundoNombre,
   LC_MMG_PRI_APELLID = $PrimerApellido,
   LC_MMG_SEG_APELLID = $SegundoApellido
WHERE SETID = $Setid
  AND CUST_ID = $Cust_id
  AND EFFDT = TO_DATE($Cust_status_dt,'DD/MM/YYYY')
END-SQL

END-PROCEDURE 

!-----------------------------------------------------------------------
! Funcion: ModificarNombreTablaRPOS
! Descripcion: Modifica el nombre en la tabla LC_RPOS_LN_NAME
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ModificarNombreTablaRPOS($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $ModoOrigen, $Setid, $Cust_status_dt, $NombreTercero, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido)

BEGIN-SQL
UPDATE PS_LC_RPOS_LN_NAME
   SET EFF_STATUS = 'A',
   NOM_TERCERO = $NombreTercero, 
   LC_MMG_PRIM_NOMBRE = $PrimerNombre, 
   LC_MMG_SEGU_NOMBRE = $SegundoNombre,
   LC_MMG_PRI_APELLID = $PrimerApellido,
   LC_MMG_SEG_APELLID =  $SegundoApellido
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND TIPO_IDENTIFICAC = $TipoIdentificacion
  AND CK_MOD_ORIGEN = $Origen
  AND CK_COD_ORIGEN = $ModoOrigen
  AND SETID_SOURCE = $Setid
  AND START_DATE = TO_DATE($Cust_status_dt,'DD/MM/YYYY')
END-SQL

END-PROCEDURE

!Inicio modificación 018
!-----------------------------------------------------------------------
! Funcion: AumentarSecuenciaTerceroName
! Descripcion: Aumenta la secuencia de los códigos de los nombres
!-----------------------------------------------------------------------
BEGIN-PROCEDURE AumentarSecuenciaTerceroName($setIdTercero, $IdTercero, $Origen, $Setid)

BEGIN-SQL
UPDATE PS_LC_RPOS_LN_NAME
   SET CK_COD_ORIGEN = CK_COD_ORIGEN + 1
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND CK_MOD_ORIGEN = $Origen
  AND SETID_SOURCE = $Setid
END-SQL

END-PROCEDURE


!-----------------------------------------------------------------------
! Funcion: RegistrarDireccionTablaRPOS
! Descripcion: Registra la direccion en la tabla PS_LC_RPOS_LN_DIRE
!-----------------------------------------------------------------------
BEGIN-PROCEDURE RegistrarDireccionTablaRPOS($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $ModoOrigen, $Setid, $Cust_status_dt, $Pais, $Dir1, $Dir2, $Dir3, $Dir4, $Depto, $Ciudad, $CodigoGeo)

BEGIN-SQL
INSERT INTO PS_LC_RPOS_LN_DIRE(SETID,  NIT_PROVEEDOR, TIPO_IDENTIFICAC,    CK_MOD_ORIGEN, CK_COD_ORIGEN, SETID_SOURCE, START_DATE,                            EFF_STATUS, COUNTRY, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, STATE,  CITY,    GEO_CODE)
		        VALUES($setIdTercero, $IdTercero,      $TipoIdentificacion, $Origen,       $ModoOrigen, $Setid,   TO_DATE($Cust_status_dt,'DD/MM/YYYY'), 'A',        $Pais,   $Dir1,    $Dir2,    $Dir3,    $Dir4,    $Depto, $Ciudad, $CodigoGeo)
END-SQL

END-PROCEDURE 

!-----------------------------------------------------------------------
! Funcion: ModificarDireccionTablaRPOS
! Descripcion: Modifica la direccion en la tabla PS_LC_RPOS_LN_DIRE
!-----------------------------------------------------------------------
BEGIN-PROCEDURE ModificarDireccionTablaRPOS($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $ModoOrigen, $Cust_status_dt, $Pais, $Dir1, $Dir2, $Dir3, $Dir4, $Depto, $Ciudad, $CodigoGeo)

BEGIN-SQL
UPDATE PS_LC_RPOS_LN_DIRE
   SET EFF_STATUS = 'A',
   COUNTRY = $Pais, 
   ADDRESS1 = $Dir1, 
   ADDRESS2 = $Dir2, 
   ADDRESS3 = $Dir3, 
   ADDRESS4 = $Dir4, 
   STATE = $Depto, 
   CITY  = $Ciudad, 
   GEO_CODE = $CodigoGeo 
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND TIPO_IDENTIFICAC = $TipoIdentificacion
  AND CK_MOD_ORIGEN = $Origen
  AND CK_COD_ORIGEN = $ModoOrigen
  AND START_DATE = TO_DATE($Cust_status_dt,'DD/MM/YYYY')
END-SQL

END-PROCEDURE 

!Inicio modificación 018
!-----------------------------------------------------------------------
! Funcion: AumentarSecuenciaTerceroDire
! Descripcion: Aumenta la secuencia de los códigos de las direcciones
!-----------------------------------------------------------------------
BEGIN-PROCEDURE AumentarSecuenciaTerceroDire($setIdTercero, $IdTercero, $Origen, $Setid)

BEGIN-SQL
UPDATE PS_LC_RPOS_LN_DIRE
   SET CK_COD_ORIGEN = CK_COD_ORIGEN + 1
WHERE SETID = $setIdTercero
  AND NIT_PROVEEDOR = $IdTercero
  AND CK_MOD_ORIGEN = $Origen
  AND SETID_SOURCE = $Setid
END-SQL

END-PROCEDURE


BEGIN-PROCEDURE reqDigitoVerificacion($tipoDocumento, :$RequiereDigito)
   
   let $RequiereDigito = 'N'

BEGIN-SELECT ON-ERROR=SQL-ERROR
'reqDigitoVerificacion'


   let $RequiereDigito = 'Y'

FROM PS_CK_TIPO_DOCUMNT A 
WHERE A.CK_TIPO_IDENT  = $tipoDocumento
  AND A.LC_DIGITO_FLAG = 'Y' 
  AND A.EFFDT = (SELECT MAX(B.EFFDT) 
                   FROM PS_CK_TIPO_DOCUMNT B 
                  WHERE A.CK_TIPO_IDENT=B.CK_TIPO_IDENT 
                    AND B.EFFDT<= SYSDATE )
  AND A.EFF_STATUS='A'
END-SELECT
   
END-PROCEDURE




BEGIN-PROCEDURE isAddressValidToDuplicate
show 'isAddressValidToDuplicate ' $Address1 ' - ' $City

let $permiteDuplicado = 'N'

if $setid ='DISTR'
	
BEGIN-SELECT ON-ERROR=SQL-ERROR
'isAddressValidToDuplicate'

	let $permiteDuplicado = 'Y'
	
FROM PS_CK_AR_GEOREFADD A

WHERE A.CITY = $City
AND A.ADDRESS = $Address1

END-SELECT

end-if

Show 'Salió permite Duplicado: ' $permiteDuplicado

END-PROCEDURE


begin-procedure GetSetidIpo

BEGIN-SELECT ON-ERROR=SQL-ERROR
SETIPO.SETID

	Let $SetidIpo = &SETIPO.SETID
 
FROM PS_SET_CNTRL_REC SETIPO

WHERE SETIPO.RECNAME = 'CK_CUST_EXS_DEF'
AND SETIPO.SETCNTRLVALUE = $Setid

END-SELECT

end-procedure

begin-procedure INSERTAR-INFO-IPOCONSUMO

BEGIN-SELECT ON-ERROR=SQL-ERROR

EXS_DEF.EXS_TAX_RATE_CD

	let $sExsTaxRateCd = &EXS_DEF.EXS_TAX_RATE_CD

FROM PS_CK_CUST_EXS_DEF EXS_DEF
WHERE SETID = $SetidIpo
AND EXS_TAX_TYPE = 'E'

END-SELECT

begin-sql ON-ERROR=SQL-ERROR
INSERT INTO ps_CUST_ADDR_EXS
(SETID,
CUST_ID,
ADDRESS_SEQ_NUM,
EXD_APPL_FLG,
STX_LST_RGSTN,
EXD_ECC_NBR,
EXD_RGSTN_NBR,
EXD_RANGE,
EXD_DIVISION,
EXD_COLLECTORATE,
EXD_ZONE,
EXD_REGION,
EXD_CIRCLE,
EXD_SERV_TAX_RGSTN,
EXD_TAX_CATG_CD,
STX_TAX_CATG_CD,
STX_APPL_FLG,
STX_CST_RGSTN,
EXS_TAX_TXN_TYPE)
VALUES 
($Setid,	         
$Cust_id,             
$address_seq_num,
'Y',
' ',
1,
1,
1,
1,
1,
1,
1,
1,
1,
$sExsTaxRateCd,
' ',
'N',
' ',
'DOM')
end-sql

end-procedure INSERTAR-INFO-IPOCONSUMO

!--------------------------------------------------------------------------------------------
! Funcion: ExisteReposTercLinea
! Descripcion: Verifica la existencia del registro exacto en la tabla PS_LC_RPOS_TERC_LN
!--------------------------------------------------------------------------------------------

BEGIN-PROCEDURE ExisteReposTercLinea($setIdTercero, $IdTercero, $Origen, $TipoIdentificacion, $SetidTerc, $Tercero, $SetidVendor, $Vendor, $SetidCliente, $Cliente, $DigitoVerificacion, $TipoPersona, :$ExisteReposTercLinea)

show 'Entradas ExisteReposTercLinea' $setIdTercero ' ' $IdTercero ' ' $Origen ' ' $TipoIdentificacion ' ' $SetidTerc ' ' $Tercero ' ' $SetidVendor ' ' $Vendor ' ' $SetidCliente ' ' $Cliente ' ' $DigitoVerificacion ' ' $TipoPersona

	Let $ExisteReposTercLinea = 'N'
	
BEGIN-SELECT ON-ERROR=SQL-ERROR
'X'

	Let $ExisteReposTercLinea = 'Y'
	Show ' Si encontró PS_LC_RPOS_TERC_LN'
	
FROM PS_LC_RPOS_TERC_LN TL
WHERE SETID = $setIdTercero 
   AND NIT_PROVEEDOR = $IdTercero 
   AND CK_MOD_ORIGEN = $Origen 
   AND CK_COD_ORIGEN = '1' 
   AND TIPO_IDENTIFICAC = $TipoIdentificacion
   AND CK_SETID_TERCERO = $SetidTerc
   AND LC_TERCERO = $Tercero 
   AND SETID_VENDOR = $SetidVendor
   AND VENDOR_ID = $Vendor 
   AND SETID_CUSTOMER = $SetidCliente
   AND CUST_ID = $Cliente 
   AND LC_DIGITO_VERIF = $DigitoVerificacion 
   AND TIPO_PER_HO = $TipoPersona
END-SELECT

END-PROCEDURE

!--------------------------------------------------------------------------------------------
! Funcion: ExisteReposTercName
! Descripcion: Verifica la existencia del registro exacto en la tabla PS_LC_RPOS_TERC_LN
!--------------------------------------------------------------------------------------------

BEGIN-PROCEDURE ExisteReposTercName($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $Setid, $nameTerc, $PrimerNombre, $SegundoNombre, $PrimerApellido, $SegundoApellido, :$ExisteReposTercName)

show 'Entradas ExisteReposTercName' $setIdTercero ' ' $IdTercero ' ' $TipoIdentificacion ' ' $Origen ' ' $Setid ' ' $nameTerc ' ' $PrimerNombre ' ' $SegundoNombre ' ' $PrimerApellido ' ' $SegundoApellido

	Let $ExisteReposTercName = 'N'
	
BEGIN-SELECT ON-ERROR=SQL-ERROR
'X'

	Let $ExisteReposTercName = 'Y'
	Show ' Si encontró PS_LC_RPOS_LN_NAME'
	
FROM PS_LC_RPOS_LN_NAME
WHERE SETID = $setIdTercero 
   AND NIT_PROVEEDOR = $IdTercero 
   AND TIPO_IDENTIFICAC = $TipoIdentificacion 
   AND CK_MOD_ORIGEN = $Origen 
   AND CK_COD_ORIGEN = '1' 
   AND SETID_SOURCE = $Setid
   AND EFF_STATUS = 'A'
   AND NOM_TERCERO = $nameTerc
   AND LC_MMG_PRIM_NOMBRE = $PrimerNombre 
   AND LC_MMG_SEGU_NOMBRE = $SegundoNombre 
   AND LC_MMG_PRI_APELLID = $PrimerApellido
   AND LC_MMG_SEG_APELLID = $SegundoApellido
END-SELECT

END-PROCEDURE

!--------------------------------------------------------------------------------------------
! Funcion: ExisteReposTercDire
! Descripcion: Verifica la existencia del registro exacto en la tabla PS_LC_RPOS_LN_DIRE
!--------------------------------------------------------------------------------------------

BEGIN-PROCEDURE ExisteReposTercDire($setIdTercero, $IdTercero, $TipoIdentificacion, $Origen, $Setid, $Pais, $Dir1, $Dir2, $Dir3, $Dir4, $Depto, $Ciudad, $CodigoGeo, :$ExisteReposTercDire)

show 'Entradas ExisteReposTercDire' $setIdTercero ' ' $IdTercero ' ' $TipoIdentificacion ' ' $Origen ' ' $Setid ' ' $Pais ' ' $Dir1 ' ' $Dir2 ' ' $Dir3 ' ' $Dir4 ' ' $Depto ' ' $Ciudad ' ' $CodigoGeo

	Let $ExisteReposTercDire = 'N'
	
BEGIN-SELECT ON-ERROR=SQL-ERROR
'X'

	Let $ExisteReposTercDire = 'Y'
	Show ' Si encontró PS_LC_RPOS_LN_DIRE'
	
FROM PS_LC_RPOS_LN_DIRE
WHERE SETID = $setIdTercero 
   AND NIT_PROVEEDOR = $IdTercero
   AND TIPO_IDENTIFICAC = $TipoIdentificacion 
   AND CK_MOD_ORIGEN = $Origen 
   AND CK_COD_ORIGEN = '1' 
   AND SETID_SOURCE = $Setid 
   AND EFF_STATUS = 'A' 
   AND COUNTRY = $Pais 
   AND ADDRESS1 = $Dir1 
   AND ADDRESS2 = $Dir2 
   AND ADDRESS3 = $Dir3 
   AND ADDRESS4 = $Dir4 
   AND STATE = $Depto 
   AND CITY = $Ciudad 
   AND GEO_CODE = $CodigoGeo
END-SELECT

END-PROCEDURE

!*********************************************************************
!     Rutinas Standar Colombiana de Comercio
!*********************************************************************
#include 'ck_mensa.sqc'  ! Insercion en la tabla de mensajes.


!*********************************************************************
!     Rutinas Standar de SQR 
!*********************************************************************
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'datemath.sqc'  ! Routines for date and time formatting
#include 'timemath.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines for format numbers
#include 'fsgetshr.sqc'  ! Get ShareTable Subroutine
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declare
#include 'reset.sqc'     ! Reset printer procedure
#include 'askeffdt.sqc'  ! Ask Effective Date
!*********************************************************************
!     Rutinas programas de SQR 
!*********************************************************************


